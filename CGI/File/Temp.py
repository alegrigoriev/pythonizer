#!/usr/bin/env python3
# Generated by "pythonizer -a File/Temp.pm" v1.025 run by SNOOPYJC on Fri Feb 10 14:35:57 2023
__author__ = """Joe Cool"""
__email__ = "snoopyjc@gmail.com"
__version__ = "1.025"
# this is a back compatibility wrapper around File::Temp. DO NOT
# use this package outside of CGI, i won't provide any help if
# you use it directly and your code breaks horribly.
import builtins, perllib

_bn = lambda s: "" if s is None else s
_str = lambda s: "" if s is None else str(s)
import Fh as _Fh

perllib.init_package("CGI.File.Temp", isa="File.Temp Fh".split())


def asString(*_args):
    [self] = perllib.list_of_n(_args, 1)
    return self._mp_filename()


CGI.File.Temp.asString = asString


def _mp_filename(*_args):
    [self, filename] = perllib.list_of_n(_args, 2)
    if filename:
        (CGI.File.Temp.__dict__[self])["_mp_filename"] = filename

    return (CGI.File.Temp.__dict__.get(self)).get("_mp_filename")


CGI.File.Temp._mp_filename = _mp_filename


def compare(*_args):
    [self, value] = perllib.list_of_n(_args, 2)
    return perllib.cmp(f"{_bn(self)}", value)


CGI.File.Temp.compare = compare

# back compatibility method since we now return a File::Temp object
# as the filehandle (which isa IO::Handle) so calling ->handle on
# it will fail. FIXME: deprecate this method in v5+


def handle(*_args):
    _args = list(_args)
    return _args.pop(0) if _args else None


CGI.File.Temp.handle = handle


def __gt__(self, other):  # extra overload '>'
    return compare(self, other, False) > 0


CGI.File.Temp.__gt__ = __gt__


def __ge__(self, other):  # extra overload '>='
    return compare(self, other, False) >= 0


CGI.File.Temp.__ge__ = __ge__


def __ne__(self, other):  # extra overload '!='
    return compare(self, other, False) != 0


CGI.File.Temp.__ne__ = __ne__


def __eq__(self, other):  # extra overload '=='
    return compare(self, other, False) == 0


CGI.File.Temp.__eq__ = __eq__


def __le__(self, other):  # extra overload '<='
    return compare(self, other, False) <= 0


CGI.File.Temp.__le__ = __le__


def __lt__(self, other):  # extra overload '<'
    return compare(self, other, False) < 0


CGI.File.Temp.__lt__ = __lt__


def __rcmp__(self, other):  # reversed overload 'cmp'
    return compare(self, other, True)


CGI.File.Temp.__rcmp__ = __rcmp__


def __cmp__(self, other):  # use overload 'cmp'
    return compare(self, other, False)


CGI.File.Temp.__cmp__ = __cmp__


def __str__(self):  # use overload '""'
    return _str(asString(self, None, False))


CGI.File.Temp.__str__ = __str__

builtins.__PACKAGE__ = "CGI.File.Temp"
CGI.File.Temp.ISA_a = perllib.init_global("CGI.File.Temp", "ISA_a", perllib.Array())

CGI.File.Temp.VERSION_v = "4.54"

# SKIPPED: use parent File::Temp;
CGI.File.Temp.ISA_a.append("File.Temp")
CGI.File.Temp.ISA_a.append("Fh")

appease_cpants_kwalitee = """
use strict;
use warnings;
#"""

setattr(CGI.File.Temp, '(""', asString)
setattr(CGI.File.Temp, "(cmp", compare)
