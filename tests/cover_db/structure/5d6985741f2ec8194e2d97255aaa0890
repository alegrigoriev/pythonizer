{"condition":[[336,{"type":"or_3","op":"||","right":"$ENV{'USER'}","left":"$ENV{'LOGNAME'} || $ENV{'USERNAME'}"}],[358,{"op":"and","type":"and_3","left":"defined $line","right":"$line =~ /^\\s*#!/"}],[384,{"type":"and_3","op":"and","right":"$traceback","left":"$g eq \"TRACEBACK\""}],[384,{"op":"and","type":"and_3","left":"$g eq \"TRACE_RUN\"","right":"$trace_run"}],[384,{"op":"and","type":"and_3","left":"$g eq \"AUTODIE\"","right":"$autodie"}],[394,{"left":"$g eq \"TRACEBACK\"","right":"$traceback","op":"and","type":"and_3"}],[394,{"left":"$g eq \"TRACE_RUN\"","right":"$trace_run","op":"and","type":"and_3"}],[394,{"type":"and_3","op":"and","right":"$autodie","left":"$g eq \"AUTODIE\""}],[431,{"op":"and","type":"and_3","left":"exists $SpecialVarsUsed{'bless'}","right":"exists $SpecialVarsUsed{'bless'}{$package}"}],[507,{"type":"and_3","op":"and","right":"$saved_eval_tokens","left":"not defined $line"}],[507,{"left":"defined $saved_sub_tokens","right":"$nested_sub_at_level < 0","op":"and","type":"and_3"}],[507,{"op":"and","type":"and_3","left":"scalar @Perlscan::BufferValClass == 0","right":"$deferred_statement < 2"}],[553,{"type":"and_3","op":"and","right":"$Perlscan::nesting_level < $deferred_statement_nesting","left":"$deferred_statement == 1"}],[554,{"op":"and","type":"and_3","left":"$TokenStr ne \"}\"","right":"substr($TokenStr, 0, 1) ne \"C\""}],[554,{"op":"or","type":"or_3","left":"$TokenStr ne \"}\" and substr($TokenStr, 0, 1) ne \"C\"","right":"$Perlscan::nesting_level < $deferred_statement_nesting - 1"}],[608,{"type":"or_3","op":"or","right":"not defined $ValClass[0]","left":"scalar @ValClass == 0"}],[623,{"type":"and_3","op":"and","right":"$ValPerl[0] eq \"%SIG\"","left":"$TokenStr =~ /^f\\(\"\\)=\"$/"}],[648,{"right":"$ValPerl[0] ne 'package'","left":"$ValClass[0] ne 'c'","type":"or_3","op":"||"}],[648,{"left":"not $set_initial_package","right":"$ValClass[0] ne 'c' || $ValPerl[0] ne 'package'","op":"and","type":"and_3"}],[648,{"left":"exists $FileHandles{'DATA'}","right":"$FileHandles{'DATA'} == $.","op":"and","type":"and_3"}],[648,{"left":"exists $FileHandles{'DATA'} and $FileHandles{'DATA'} == $.","right":"not $gen_open_data","op":"and","type":"and_3"}],[661,{"left":"$ValClass[0] eq \"t\"","right":"$ValClass[1] =~ /[ah]/","op":"and","type":"and_3"}],[661,{"right":"$ValPerl[0] eq 'our' && next_same_level_token('=', 2, $#ValClass) > 0","left":"$ValPerl[0] eq 'my' && scalar @ValClass > 2 || $ValPerl[0] eq 'local' && $CurSub eq '__main__' && scalar @ValClass > 2","type":"or_3","op":"||"}],[661,{"right":"$ValPerl[0] eq 'my' && scalar @ValClass > 2 || $ValPerl[0] eq 'local' && $CurSub eq '__main__' && scalar @ValClass > 2 || $ValPerl[0] eq 'our' && next_same_level_token('=', 2, $#ValClass) > 0","left":"$ValClass[0] eq \"t\" and $ValClass[1] =~ /[ah]/","type":"and_3","op":"and"}],[661,{"left":"$ValClass[0] eq \"t\"","right":"$ValClass[1] eq \"(\"","op":"and","type":"and_3"}],[661,{"left":"$ValClass[0] eq \"t\" and $ValClass[1] eq \"(\"","right":"$ValClass[2] =~ /[ah]/","op":"and","type":"and_3"}],[661,{"left":"$ValClass[0] eq \"t\" and $ValClass[1] eq \"(\" and $ValClass[2] =~ /[ah]/","right":"$ValClass[3] eq \")\"","op":"and","type":"and_3"}],[661,{"left":"$ValPerl[0] eq 'my' && scalar @ValClass > 4 || $ValPerl[0] eq 'local' && $CurSub eq '__main__' && scalar @ValClass > 4","right":"$ValPerl[0] eq 'our' && next_same_level_token('=', 4, $#ValClass) > 0","op":"||","type":"or_3"}],[661,{"op":"and","type":"and_3","left":"$ValClass[0] eq \"t\" and $ValClass[1] eq \"(\" and $ValClass[2] =~ /[ah]/ and $ValClass[3] eq \")\"","right":"$ValPerl[0] eq 'my' && scalar @ValClass > 4 || $ValPerl[0] eq 'local' && $CurSub eq '__main__' && scalar @ValClass > 4 || $ValPerl[0] eq 'our' && next_same_level_token('=', 4, $#ValClass) > 0"}],[661,{"right":"$ValPerl[0] eq \"local\"","left":"$ValClass[0] eq \"t\"","type":"and_3","op":"and"}],[661,{"op":"and","type":"and_3","left":"$ValClass[0] eq \"t\" and $ValPerl[0] eq \"local\"","right":"$ValClass[1] eq \"f\""}],[695,{"type":"and_3","op":"and","right":"$deferred_statement == 1","left":"$debug >= 5"}],[749,{"op":"and","type":"and_3","left":"$we_are_in_sub_body","right":"$Pythonizer::NextNest == 0"}],[751,{"left":"not $implicit_global_my","right":"$CurSub ne \"__main__\"","op":"and","type":"and_3"}],[755,{"type":"and_3","op":"and","right":"not exists $SubAttributes{$CurSub}{'overloads'}","left":"exists $SubAttributes{$CurSub}{'blesses'}"}],[755,{"type":"or_3","op":"or","right":"exists $SubAttributes{$CurSub}{'blesses'} and not exists $SubAttributes{$CurSub}{'overloads'}","left":"exists $CLASS_METHOD_SET{$CurSub}"}],[770,{"left":"$#ValClass > 1","right":"$ValClass[1] eq \"c\"","op":"and","type":"and_3"}],[770,{"left":"$#ValClass > 1 and $ValClass[1] eq \"c\"","right":"$ValPerl[1] eq \"while\"","op":"and","type":"and_3"}],[804,{"op":"and","type":"and_3","left":"$deferred_statement == 1","right":"$deferred_statement_nesting == $Perlscan::nesting_level"}],[810,{"left":"$close_br_pos >= 0","right":"$close_br_pos < $#ValClass","op":"and","type":"and_3"}],[810,{"op":"and","type":"and_3","left":"$close_br_pos >= 0 and $close_br_pos < $#ValClass","right":"$ValClass[$close_br_pos + 1] eq \"=\""}],[810,{"type":"and_3","op":"and","right":"$close_br_pos < $#ValClass","left":"$close_br_pos >= 0"}],[810,{"op":"and","type":"and_3","left":"$close_br_pos >= 0 and $close_br_pos < $#ValClass","right":"$ValClass[$close_br_pos + 1] eq \"~\""}],[810,{"type":"and_3","op":"and","right":"$ValPerl[$close_br_pos + 1] ne \"~\"","left":"$close_br_pos >= 0 and $close_br_pos < $#ValClass and $ValClass[$close_br_pos + 1] eq \"~\""}],[815,{"right":"next_same_level_token(\",\", 1, $close_br_pos - 1) == -1","left":"$close_br_pos == $#ValClass","type":"and_3","op":"and"}],[693,{"left":"$ValPerl[0] eq \"sub\"","right":"$#ValClass >= 1","op":"and","type":"and_3"}],[693,{"op":"and","type":"and_3","left":"$ValPerl[0] eq \"sub\" and $#ValClass >= 1","right":"exists $nested_subs{$ValPerl[1]}"}],[693,{"left":"$ValPerl[0] eq \"sub\"","right":"$#ValClass >= 1","op":"and","type":"and_3"}],[693,{"type":"and_3","op":"and","right":"$ValPy[0] ne \"#NoTrans!\"","left":"$ValPerl[0] eq \"sub\" and $#ValClass >= 1"}],[895,{"type":"or_3","op":"or","right":"$ValClass[$i] eq \"s\"","left":"$ValClass[$i] eq \"i\""}],[909,{"left":"$TokenStr =~ tr/=// > 1","right":"$ValClass[-1] eq \"d\"","op":"and","type":"and_3"}],[909,{"right":"$ValPerl[-2] eq '-='","left":"$ValPerl[-2] eq '+='","type":"or_3","op":"||"}],[909,{"right":"$ValPerl[-2] eq '+=' || $ValPerl[-2] eq '-='","left":"$TokenStr =~ tr/=// > 1 and $ValClass[-1] eq \"d\"","type":"and_3","op":"and"}],[915,{"op":"and","type":"and_3","left":"$reg != -1","right":"$ValPerl[$reg] ne \"~\""}],[915,{"op":"and","type":"and_3","left":"$reg != -1 and $ValPerl[$reg] ne \"~\"","right":"$reg + 1 <= $#ValClass"}],[915,{"left":"$reg != -1 and $ValPerl[$reg] ne \"~\" and $reg + 1 <= $#ValClass","right":"$ValPerl[$reg + 1] =~ /re|tr/","op":"and","type":"and_3"}],[915,{"right":"scalar @ValClass != 1","left":"$CurSub eq \"__main__\"","type":"or_3","op":"or"}],[924,{"left":"$ValPerl[0] eq \"my\"","right":"$ValPerl[0] eq \"local\"","op":"or","type":"or_3"}],[929,{"op":"and","type":"and_3","left":"exists $VarType{$ValPy[1]}","right":"exists $VarType{$ValPy[1]}{$CurSub}"}],[922,{"op":"and","type":"and_3","left":"scalar @ValClass == 4","right":"$ValClass[2] eq \"=\""}],[946,{"op":"or","type":"or_3","left":"$ValPerl[0] eq \"my\"","right":"$ValPerl[0] eq \"our\""}],[946,{"right":"$ValPerl[0] eq \"local\"","left":"$ValPerl[0] eq \"my\" or $ValPerl[0] eq \"our\"","type":"or_3","op":"or"}],[955,{"left":"exists $VarType{$u}","right":"exists $VarType{$u}{$CurSub}","op":"and","type":"and_3"}],[970,{"type":"or_3","op":"||","right":"$ValClass[1] eq 'G' && $ValPy[1] =~ /_[ah]$/","left":"$ValClass[1] =~ /[ah]/"}],[970,{"type":"and_3","op":"and","right":"$ValClass[1] =~ /[ah]/ || $ValClass[1] eq 'G' && $ValPy[1] =~ /_[ah]$/","left":"exists $SubAttributes{$ValPy[3]}{'wantarray'}"}],[950,{"op":"and","type":"and_3","left":"$ValClass[3] eq \"C\"","right":"$ValPerl[3] eq \"eval\""}],[1000,{"type":"and_3","op":"and","right":"substr($ValPy[-1], 0, 1) ne \"f\"","left":"$ValClass[-1] eq \"\\\"\""}],[1000,{"type":"or_3","op":"or","right":"$ValClass[-1] eq \"\\\"\" and substr($ValPy[-1], 0, 1) ne \"f\"","left":"$ValClass[-1] eq \"d\""}],[1000,{"type":"and_3","op":"and","right":"$ValPerl[-1] eq \"undef\"","left":"$ValClass[-1] eq \"f\""}],[1000,{"op":"or","type":"or_3","left":"$ValClass[-1] eq \"d\" or $ValClass[-1] eq \"\\\"\" and substr($ValPy[-1], 0, 1) ne \"f\"","right":"$ValClass[-1] eq \"f\" and $ValPerl[-1] eq \"undef\""}],[1015,{"op":"and","type":"and_3","left":"$#ValClass > $last","right":"$ValClass[$last + 1] eq \"=\""}],[1015,{"left":"$#ValClass > $last and $ValClass[$last + 1] eq \"=\"","right":"init_has_real_values($last + 2)","op":"and","type":"and_3"}],[1027,{"type":"and_3","op":"and","right":"exists $VarType{$ValPy[$i]}{$CurSub}","left":"exists $VarType{$ValPy[$i]}"}],[1030,{"type":"and_3","op":"and","right":"$sval ne $val","left":"defined $val"}],[1053,{"left":"exists $VarType{$ValPy[$i]}","right":"exists $VarType{$ValPy[$i]}{$CurSub}","op":"and","type":"and_3"}],[1080,{"type":"and_3","op":"and","right":"$ValPerl[$reg] ne \"~\"","left":"$reg != -1"}],[1080,{"type":"and_3","op":"and","right":"$reg + 1 <= $#ValClass","left":"$reg != -1 and $ValPerl[$reg] ne \"~\""}],[1080,{"op":"and","type":"and_3","left":"$reg != -1 and $ValPerl[$reg] ne \"~\" and $reg + 1 <= $#ValClass","right":"$ValPerl[$reg + 1] =~ /re|tr/"}],[922,{"right":"$ValPerl[0] eq \"local\"","left":"scalar @ValClass > 6","type":"and_3","op":"and"}],[922,{"type":"and_3","op":"and","right":"$ValClass[1] eq \"s\"","left":"scalar @ValClass > 6 and $ValPerl[0] eq \"local\""}],[922,{"left":"scalar @ValClass > 6 and $ValPerl[0] eq \"local\" and $ValClass[1] eq \"s\"","right":"$ValClass[2] eq \"(\"","op":"and","type":"and_3"}],[922,{"right":"next_same_level_token(\"=\", 1, $#ValClass) > 2","left":"scalar @ValClass > 6 and $ValPerl[0] eq \"local\" and $ValClass[1] eq \"s\" and $ValClass[2] eq \"(\"","type":"and_3","op":"and"}],[1102,{"left":"$#ValClass >= 2","right":"$ValClass[1] eq \"=\"","op":"and","type":"and_3"}],[1121,{"op":"and","type":"and_3","left":"$LocalSub{$ValPy[$i]}","right":"$ValClass[$i + 1] ne \"A\""}],[1120,{"left":"$ValPy[$i] eq \",\"","right":"$comma_flip == 0","op":"and","type":"and_3"}],[1120,{"type":"and_3","op":"and","right":"not $last_was_colon","left":"$ValClass[$i] eq \"a\""}],[1120,{"type":"and_3","op":"and","right":"not $last_was_colon","left":"$ValClass[$i] eq \"h\""}],[1146,{"op":"and","type":"and_3","left":"$ValPy[$i] eq \",\"","right":"$comma_flip != -1"}],[1148,{"left":"$ValPy[$i] eq \":\"","right":"$ValPy[$i] eq \": \"","op":"or","type":"or_3"}],[1156,{"left":"&Pythonizer::expr_type($i, $#ValClass, $CurSub) =~ /^a/","right":"not $last_was_colon","op":"and","type":"and_3"}],[1103,{"type":"and_3","op":"and","right":"$ValClass[2] eq \"h\"","left":"scalar @ValClass == 3"}],[1103,{"left":"$#ValClass == 2","right":"$ValClass[2] eq \"a\"","op":"and","type":"and_3"}],[1211,{"op":"and","type":"and_3","left":"$ValPerl[2] eq \"(\"","right":"($end_pos = matching_br(2)) == $#ValClass"}],[1218,{"op":"and","type":"and_3","left":"$ValClass[$i] eq \"f\"","right":"substr(&Pythonizer::func_type($ValPerl[$i], $ValPy[$i]), 0, 1) eq \"a\""}],[1218,{"left":"$i + 2 <= $end_pos","right":"$ValClass[$i] eq \"s\"","op":"and","type":"and_3"}],[1218,{"op":"and","type":"and_3","left":"$i + 2 <= $end_pos and $ValClass[$i] eq \"s\"","right":"$ValClass[$i + 1] eq \"~\""}],[1218,{"type":"and_3","op":"and","right":"$ValClass[$i + 2] eq \"q\"","left":"$i + 2 <= $end_pos and $ValClass[$i] eq \"s\" and $ValClass[$i + 1] eq \"~\""}],[1218,{"left":"$i + 2 <= $end_pos and $ValClass[$i] eq \"s\" and $ValClass[$i + 1] eq \"~\" and $ValClass[$i + 2] eq \"q\"","right":"substr($ValPy[$i + 1], 0, 1) ne \".\"","op":"and","type":"and_3"}],[1234,{"type":"and_3","op":"and","right":"$elements == 1","left":"$need_flatten"}],[1240,{"left":"$#ValClass == 2","right":"$ValClass[2] eq \"a\"","op":"and","type":"and_3"}],[1243,{"op":"||","type":"or_3","left":"$nested_sub_at_level > 0","right":"$CurSub ne '__main__' && !exists $SubAttributes{$CurSub}{'modifies_arglist'}"}],[1243,{"op":"and","type":"and_3","left":"$ValPerl[2] eq \"\\@_\"","right":"$nested_sub_at_level > 0 || $CurSub ne '__main__' && !exists $SubAttributes{$CurSub}{'modifies_arglist'}"}],[1240,{"op":"and","type":"and_3","left":"$#ValClass == 2","right":"$ValClass[2] eq \"h\""}],[1240,{"op":"||","type":"or_3","left":"$ValPerl[2] eq 'keys'","right":"$ValPerl[2] eq 'values'"}],[1240,{"right":"$ValPerl[2] eq 'keys' || $ValPerl[2] eq 'values'","left":"$ValClass[2] eq \"f\"","type":"and_3","op":"and"}],[1240,{"type":"and_3","op":"and","right":"($end_pos = matching_br(2)) == $#ValClass","left":"$ValPerl[2] eq \"(\""}],[1240,{"type":"and_3","op":"and","right":"$ValPerl[3] eq \"=\"","left":"$ValClass[2] eq \"a\""}],[1338,{"op":"and","type":"and_3","left":"$ValPerl[-1] eq \"\\@_\"","right":"$CurSub ne \"__main__\""}],[1338,{"left":"$ValPerl[-1] eq \"\\@_\" and $CurSub ne \"__main__\"","right":"not exists $SubAttributes{$CurSub}{'modifies_arglist'}","op":"and","type":"and_3"}],[693,{"left":"$ValClass[0] eq \"G\"","right":"$ValClass[1] eq \"=\"","op":"and","type":"and_3"}],[1371,{"op":"and","type":"and_3","left":"$pd != -1","right":"scalar @ValClass == 4"}],[1371,{"op":"and","type":"and_3","left":"$pd != -1 and scalar @ValClass == 4","right":"$ValClass[2] eq \"\\\\\""}],[1371,{"right":"$ValClass[3] eq \"i\"","left":"$pd != -1 and scalar @ValClass == 4 and $ValClass[2] eq \"\\\\\"","type":"and_3","op":"and"}],[1380,{"type":"and_3","op":"and","right":"$ValType[0] eq \"P\"","left":"defined $ValType[0]"}],[1380,{"op":"and","type":"and_3","left":"defined $ValType[0] and $ValType[0] eq \"P\"","right":"$ValPerl[0] ne \"for\""}],[1380,{"type":"and_3","op":"and","right":"$ValPerl[0] ne \"foreach\"","left":"defined $ValType[0] and $ValType[0] eq \"P\" and $ValPerl[0] ne \"for\""}],[1385,{"op":"and","type":"and_3","left":"$#ValClass >= 1","right":"$ValClass[1] eq \"(\""}],[1399,{"type":"and_3","op":"and","right":"$ValPerl[3] eq \"open\"","left":"$TokenStr =~ /^c\\([!n]f\\(?/"}],[1399,{"right":"$ValPerl[3] eq \"opendir\"","left":"$TokenStr =~ /^c\\([!n]f\\(?/","type":"and_3","op":"and"}],[1492,{"right":"scalar @eval_stack == 0","left":"$CurSub eq \"__main__\"","type":"and_3","op":"and"}],[1521,{"right":"scalar @eval_stack != 0","left":"$ValPy[0] eq \"return\"","type":"and_3","op":"and"}],[1527,{"right":"next_same_level_tokens(\"=,\", 2, $#ValClass - 1) != -1","left":"$ValClass[1] eq \"(\"","type":"and_3","op":"and"}],[1521,{"right":"&Perlscan::in_BEGIN()","left":"$ValPy[0] eq \"return\"","type":"and_3","op":"and"}],[1521,{"right":"not &Perlscan::in_sub()","left":"$ValPy[0] eq \"return\" and &Perlscan::in_BEGIN()","type":"and_3","op":"and"}],[1521,{"left":"$ValPy[0] eq \"return\"","right":"$CurSub eq \"__main__\"","op":"and","type":"and_3"}],[1521,{"left":"$ValPy[0] eq \"return\" and $CurSub eq \"__main__\"","right":"$nested_sub_at_level < 0","op":"and","type":"and_3"}],[1521,{"type":"or_3","op":"or","right":"$ValPerl[0] eq \"require\"","left":"$ValPerl[0] eq \"use\""}],[1521,{"type":"or_3","op":"or","right":"$ValPerl[0] eq \"no\"","left":"$ValPerl[0] eq \"use\" or $ValPerl[0] eq \"require\""}],[1553,{"right":"$LocalSub{$ValPy[1]}","left":"$ValClass[1] eq \"i\"","type":"and_3","op":"and"}],[1553,{"right":"$CurSub ne \"__main__\"","left":"$ValClass[1] eq \"i\" and $LocalSub{$ValPy[1]}","type":"and_3","op":"and"}],[1553,{"type":"and_3","op":"and","right":"$ValClass[2] eq \"i\"","left":"$ValClass[1] eq \"\\\\\""}],[1553,{"right":"$LocalSub{$ValPy[2]}","left":"$ValClass[1] eq \"\\\\\" and $ValClass[2] eq \"i\"","type":"and_3","op":"and"}],[1553,{"op":"and","type":"and_3","left":"$ValClass[1] eq \"\\\\\" and $ValClass[2] eq \"i\" and $LocalSub{$ValPy[2]}","right":"$CurSub ne \"__main__\""}],[1553,{"left":"$ValClass[1] eq \"&\"","right":"$ValClass[2] eq \"s\"","op":"and","type":"and_3"}],[1553,{"right":"$CurSub ne \"__main__\"","left":"$ValClass[1] eq \"&\" and $ValClass[2] eq \"s\"","type":"and_3","op":"and"}],[1553,{"type":"and_3","op":"and","right":"$#ValClass == 1","left":"$ValClass[1] eq \"f\""}],[1579,{"right":"$ValPerl[0] eq 'last'","left":"$ValPerl[0] eq 'next'","type":"or_3","op":"||"}],[1579,{"left":"$ValPerl[0] eq 'next' || $ValPerl[0] eq 'last'","right":"&Perlscan::next_last_needs_raise(0)","op":"and","type":"and_3"}],[1577,{"left":"$ValPerl[0] eq 'next' || $ValPerl[0] eq 'last'","right":"$ValPerl[0] eq 'redo'","op":"||","type":"or_3"}],[1577,{"op":"and","type":"and_3","left":"$ValClass[1] eq \"i\"","right":"$ValPerl[0] eq 'next' || $ValPerl[0] eq 'last' || $ValPerl[0] eq 'redo'"}],[1594,{"right":"!&Perlscan::next_last_needs_raise(0)","left":"$ValPerl[0] eq 'redo'","type":"or_3","op":"||"}],[1594,{"right":"$ValPerl[0] eq 'redo' || !&Perlscan::next_last_needs_raise(0)","left":"$ValPerl[1] eq &Perlscan::cur_loop_label()","type":"and_3","op":"and"}],[1611,{"type":"and_3","op":"and","right":"$ValClass[1] eq \"(\"","left":"$#ValClass > 0"}],[1615,{"type":"and_3","op":"and","right":"$Pythonizer::CurNest == 0","left":"$ValPy[0] eq \"main\""}],[1613,{"type":"or_3","op":"||","right":"$ValClass[3] eq '(' && matching_br(3) == $right_br - 1","left":"$ValClass[3] ne '('"}],[1613,{"op":"and","type":"and_3","left":"$ValClass[2] eq \"f\"","right":"$ValClass[3] ne '(' || $ValClass[3] eq '(' && matching_br(3) == $right_br - 1"}],[1611,{"right":"$ValClass[1] eq \":\"","left":"$#ValClass == 1","type":"and_3","op":"and"}],[693,{"right":"$ValPerl[$split] ne \"~\"","left":"($split = index($TokenStr, \"~\")) > -1","type":"and_3","op":"and"}],[693,{"type":"and_3","op":"and","right":"substr($ValPy[0], 0, 1) eq \"(\"","left":"$ValClass[0] eq \"q\""}],[693,{"type":"and_3","op":"and","right":"substr($ValPy[0], -1, 1) eq \")\"","left":"$ValClass[0] eq \"q\" and substr($ValPy[0], 0, 1) eq \"(\""}],[1666,{"left":"$CurSub eq \"__main__\"","right":"scalar @eval_stack == 0","op":"and","type":"and_3"}],[1666,{"type":"and_3","op":"and","right":"$nested_sub_at_level < 0","left":"$CurSub eq \"__main__\" and scalar @eval_stack == 0"}],[490,{"right":"scalar @Perlscan::BufferValClass > 0","left":"defined $line","type":"or_3","op":"or"}],[490,{"type":"or_3","op":"or","right":"$saved_eval_tokens","left":"defined $line or scalar @Perlscan::BufferValClass > 0"}],[490,{"op":"or","type":"or_3","left":"defined $line or scalar @Perlscan::BufferValClass > 0 or $saved_eval_tokens","right":"$split_multiple_assignment"}],[1741,{"right":"$ValPy[$k - 1] =~ /[A-Za-z0-9_]+/","left":"$ValClass[$k - 1] =~ /[ahs]/","type":"and_3","op":"&&"}],[1741,{"type":"and_3","op":"and","right":"not $ValClass[$k - 1] =~ /[ahs]/ && $ValPy[$k - 1] =~ /[A-Za-z0-9_]+/","left":"($k = next_same_level_token(\"=\", $start, $end_pos)) > -1"}],[1741,{"left":"$ValPerl[$start] eq 'chop'","right":"$ValPerl[$start] eq 'chomp'","op":"||","type":"or_3"}],[1741,{"right":"$ValPerl[$start] eq 'chop' || $ValPerl[$start] eq 'chomp'","left":"$ValClass[$start] eq \"f\"","type":"and_3","op":"and"}],[1741,{"op":"and","type":"and_3","left":"$ValClass[$start] eq \"f\" and $ValPerl[$start] eq 'chop' || $ValPerl[$start] eq 'chomp'","right":"$ValClass[$start + 1] eq \"(\""}],[1741,{"right":"($k = next_same_level_token(\"=\", $start + 2, $end_pos)) > -1","left":"$ValClass[$start] eq \"f\" and $ValPerl[$start] eq 'chop' || $ValPerl[$start] eq 'chomp' and $ValClass[$start + 1] eq \"(\"","type":"and_3","op":"and"}],[1795,{"op":"and","type":"and_3","left":"$ValClass[$#ValClass] eq \"^\"","right":"$ValClass[0] eq \"s\""}],[1824,{"left":"$ValClass[$pos] =~ /[if]/","right":"$pos + 1 <= $#ValClass","op":"and","type":"and_3"}],[1824,{"type":"and_3","op":"and","right":"$ValClass[$pos + 1] eq \"(\"","left":"$ValClass[$pos] =~ /[if]/ and $pos + 1 <= $#ValClass"}],[1829,{"type":"and_3","op":"and","right":"$ValClass[$pos + 1] eq \"D\"","left":"$pos + 1 <= $#ValClass"}],[1830,{"right":"$ValClass[$pos + 2] eq \"i\"","left":"$pos + 2 <= $#ValClass","type":"and_3","op":"and"}],[1831,{"op":"and","type":"and_3","left":"$pos + 3 <= $#ValClass","right":"$ValClass[$pos + 3] eq \"(\""}],[1839,{"op":"and","type":"and_3","left":"$pos + 1 <= $#ValClass","right":"$ValClass[$pos + 1] eq \"(\""}],[1839,{"right":"$ValPerl[$pos + 1] eq '['","left":"$ValPerl[$pos + 1] eq '{'","type":"or_3","op":"||"}],[1839,{"right":"$ValPerl[$pos + 1] eq '{' || $ValPerl[$pos + 1] eq '['","left":"$pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq \"(\"","type":"and_3","op":"and"}],[1839,{"type":"and_3","op":"and","right":"($k = matching_br($pos + 1)) != -1","left":"$pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq \"(\" and $ValPerl[$pos + 1] eq '{' || $ValPerl[$pos + 1] eq '['"}],[1860,{"right":"$cl eq \"*\"","left":"$left","type":"and_3","op":"and"}],[1860,{"left":"$left and $cl eq \"*\"","right":"$ValPerl[$p] eq \"x\"","op":"and","type":"and_3"}],[1862,{"right":"$ValClass[$p - 1] eq 'q' && $ValPy[$p - 1] =~ /\\.split\\(\\)$/","left":"$ValClass[$p - 1] eq ')'","type":"or_3","op":"||"}],[1862,{"left":"$p != 0","right":"$ValClass[$p - 1] eq ')' || $ValClass[$p - 1] eq 'q' && $ValPy[$p - 1] =~ /\\.split\\(\\)$/","op":"and","type":"and_3"}],[1867,{"right":"$cl eq \"*\"","left":"not $left","type":"and_3","op":"and"}],[1867,{"left":"not $left and $cl eq \"*\"","right":"$ValPerl[$p] eq \"x\"","op":"and","type":"and_3"}],[1868,{"right":"$ValPerl[$p] =~ /^[a-z]/","left":"$cl eq \">\"","type":"and_3","op":"and"}],[1869,{"op":"and","type":"and_3","left":"$cl eq \"=\"","right":"$ValPerl[$p] eq \".=\""}],[1870,{"type":"and_3","op":"and","right":"$ValPerl[$p] eq \"=\"","left":"$cl eq \"=\""}],[1858,{"left":"$cl eq \"f\"","right":"exists $PyFuncType{$ValPy[$p]}","op":"and","type":"and_3"}],[1858,{"op":"and","type":"and_3","left":"$cl eq \"f\"","right":"exists $FuncType{$ValPerl[$p]}"}],[1904,{"left":"defined $t_left","right":"defined $t_right","op":"and","type":"and_3"}],[1910,{"type":"and_3","op":"and","right":"index(\"IF\", $type) != -1","left":"defined $type"}],[1910,{"type":"and_3","op":"and","right":"defined $t","left":"defined $type and index(\"IF\", $type) != -1"}],[1910,{"right":"$t ne \"I\"","left":"defined $type and index(\"IF\", $type) != -1 and defined $t","type":"and_3","op":"and"}],[1912,{"op":"and","type":"and_3","left":"$debug >= 3","right":"defined $converter"}],[1921,{"right":"$ValClass[$k + 1] eq \"=\"","left":"$k + 1 <= $#ValClass","type":"and_3","op":"and"}],[1944,{"left":"$i - 2 >= 0","right":"$ValClass[$i - 1] eq \"D\"","op":"and","type":"and_3"}],[1944,{"type":"and_3","op":"and","right":"$ValClass[$i - 2] eq \"i\"","left":"$i - 2 >= 0 and $ValClass[$i - 1] eq \"D\""}],[2004,{"op":"and","type":"and_3","left":"$ValPerl[$sub_start - 1] ne \"{\"","right":"$ValPerl[$sub_start - 1] ne \"[\""}],[2000,{"right":"$i < $eq","left":"$i >= 0","type":"and_3","op":"and"}],[2046,{"op":"and","type":"and_3","left":"$type eq \"N\"","right":"$v_type =~ /[IF]/"}],[2054,{"left":"$ValPy[$var_start] =~ /\\./","right":"$ValPy[$var_start] =~ /e/i","op":"or","type":"or_3"}],[2049,{"type":"and_3","op":"and","right":"substr($ValPy[$var_start], 0, 1) ne \"f\"","left":"$ValClass[$var_start] eq \"\\\"\""}],[2063,{"op":"or","type":"or_3","left":"$type eq \"F\"","right":"$type eq \"N\""}],[2099,{"left":"$ValClass[0] eq \"k\"","right":"$ValPerl[0] eq \"sub\"","op":"and","type":"and_3"}],[2099,{"op":"or","type":"or_3","left":"scalar @ValClass == 0","right":"$ValClass[0] eq \"k\" and $ValPerl[0] eq \"sub\""}],[2101,{"left":"$ValClass[$start] eq \"f\"","right":"$ValPy[$start] eq \"print\"","op":"and","type":"and_3"}],[2115,{"left":"$i + 2 <= $limit","right":"$ValClass[$i + 1] eq \"(\"","op":"and","type":"and_3"}],[2115,{"type":"and_3","op":"and","right":"$ValClass[$i + 2] eq \")\"","left":"$i + 2 <= $limit and $ValClass[$i + 1] eq \"(\""}],[2119,{"type":"and_3","op":"and","right":"$ValClass[$i + 1] eq \"(\"","left":"$i + 1 <= $#ValClass"}],[2130,{"right":"$ValClass[$j] =~ /[isf]/","left":"$t eq \"H\"","type":"and_3","op":"and"}],[2130,{"left":"$t eq \"S\"","right":"$ValPerl[$i] eq \"grep\"","op":"and","type":"and_3"}],[2130,{"type":"and_3","op":"and","right":"$ValPerl[$i + 1] eq \"{\"","left":"$t eq \"S\" and $ValPerl[$i] eq \"grep\""}],[2144,{"type":"and_3","op":"and","right":"$ValClass[$ep] eq \"i\"","left":"$ValClass[$j] eq \"q\""}],[2144,{"left":"$ValClass[$j] eq \"q\" and $ValClass[$ep] eq \"i\"","right":"$j + 1 == $ep","op":"and","type":"and_3"}],[2161,{"op":"and","type":"and_3","left":"$i != 0","right":"$ValClass[$i - 1] eq \"(\""}],[2170,{"left":"$close != -1","right":"$close - 1 < $ep","op":"and","type":"and_3"}],[2181,{"op":"and","type":"and_3","left":"$t eq \"H\"","right":"$ValClass[$j] =~ /[isf]/"}],[2181,{"type":"or_3","op":"||","right":"$ValClass[$j - 1] ne ','","left":"$j == 0"}],[2181,{"left":"$optional","right":"$j == 0 || $ValClass[$j - 1] ne ','","op":"and","type":"and_3"}],[2181,{"right":"index(\"^*~/%.HI>&|0or?:=,A\", $ValClass[$j]) != -1","left":"$optional and $j == 0 || $ValClass[$j - 1] ne ','","type":"and_3","op":"and"}],[2194,{"type":"and_3","op":"and","right":"$ValClass[$ep] eq \"i\"","left":"$ValClass[$j] eq \"q\""}],[2194,{"type":"and_3","op":"and","right":"$j + 1 == $ep","left":"$ValClass[$j] eq \"q\" and $ValClass[$ep] eq \"i\""}],[2207,{"left":"$comma >= 0","right":"$ValClass[$comma] ne \",\"","op":"and","type":"and_3"}],[2106,{"op":"||","type":"or_3","left":"$LocalSub{$ValPy[$i]}","right":"$i + 1 <= $#ValClass && $ValClass[$i + 1] eq '('"}],[2106,{"type":"and_3","op":"and","right":"$LocalSub{$ValPy[$i]} || $i + 1 <= $#ValClass && $ValClass[$i + 1] eq '('","left":"$ValClass[$i] eq \"i\""}],[2218,{"right":"$ValClass[$i + 1] eq \"(\"","left":"$i + 1 <= $#ValClass","type":"and_3","op":"and"}],[2237,{"type":"and_3","op":"and","right":"$ValClass[$i - 1] eq \"(\"","left":"$i != 0"}],[2258,{"type":"and_3","op":"and","right":"$ValClass[$comma] ne \",\"","left":"$comma >= 0"}],[2106,{"type":"and_3","op":"and","right":"not $ValPy[$i] =~ /^len\\(/","left":"$ValClass[$i] =~ /[ah]/"}],[2106,{"type":"or_3","op":"or","right":"$ValClass[$i] =~ /[ah]/ and not $ValPy[$i] =~ /^len\\(/","left":"$ValClass[$i] =~ /[sd\"]/"}],[2286,{"left":"$ValClass[$i] =~ /[ah]/","right":"$m == $k","op":"and","type":"and_3"}],[2286,{"type":"and_3","op":"and","right":"($ty = &Pythonizer::expr_type($j + 1, $k - 1, $CurSub)) =~ /^a/","left":"$ValClass[$i] =~ /[ah]/ and $m == $k"}],[2106,{"left":"$ValClass[$i] =~ /[ah]/","right":"$ValPy[$i] =~ /^len\\(/","op":"and","type":"and_3"}],[2106,{"right":"$ValPerl[$i] eq \"(\"","left":"$ValClass[$i] eq \"(\"","type":"and_3","op":"and"}],[2324,{"right":"defined($ot = operator_type($k + 1, 1))","left":"$k + 1 < $limit","type":"and_3","op":"and"}],[2324,{"right":"$type =~ /^a of /","left":"defined $type","type":"and_3","op":"and"}],[2324,{"right":"next_same_level_token(\",\", $i + 1, $k - 1) != -1","left":"defined $type and $type =~ /^a of /","type":"and_3","op":"and"}],[2106,{"op":"and","type":"and_3","left":"$ValClass[$i] eq \")\"","right":"$ValPerl[$i] eq \")\""}],[2342,{"op":"and","type":"and_3","left":"$k > 0","right":"defined($ot = operator_type($k - 1, 0))"}],[2106,{"op":"and","type":"and_3","left":"$opt = operator_type($i, 0)","right":"$opt ne $type"}],[2106,{"right":"$i + 1 < $#ValClass","left":"$opt = operator_type($i, 0) and $opt ne $type","type":"and_3","op":"and"}],[2106,{"left":"$opt = operator_type($i, 0) and $opt ne $type and $i + 1 < $#ValClass","right":"$ValClass[$i + 1] eq \"(\"","op":"and","type":"and_3"}],[2106,{"right":"$ValPerl[$i + 1] eq \"(\"","left":"$opt = operator_type($i, 0) and $opt ne $type and $i + 1 < $#ValClass and $ValClass[$i + 1] eq \"(\"","type":"and_3","op":"and"}],[2106,{"type":"and_3","op":"and","right":"$ValPy[0] ne \"for\"","left":"$ValClass[$i] eq \";\""}],[2106,{"type":"and_3","op":"and","right":"$ValPy[$i] eq \"if\"","left":"$ValClass[$i] eq \":\""}],[2106,{"right":"$ValPerl[$i] ne \"(\"","left":"$ValClass[$i] eq \"(\"","type":"and_3","op":"and"}],[2106,{"left":"$ValClass[$i] eq \"(\" and $ValPerl[$i] ne \"(\"","right":"defined $type","op":"and","type":"and_3"}],[2106,{"left":"$ValClass[$i] eq \"(\" and $ValPerl[$i] ne \"(\" and defined $type","right":"$type =~ /^a of /","op":"and","type":"and_3"}],[2399,{"left":"$total_adjust","right":"$debug >= 3","op":"and","type":"and_3"}],[2411,{"left":"$ValClass[0] eq \"f\"","right":"$ValPerl[0] eq \"delete\"","op":"and","type":"and_3"}],[2414,{"op":"and","type":"and_3","left":"$ValClass[0] =~ /[Cc]/","right":"1 <= $#ValClass"}],[2414,{"right":"$ValClass[1] eq \"(\"","left":"$ValClass[0] =~ /[Cc]/ and 1 <= $#ValClass","type":"and_3","op":"and"}],[2419,{"left":"$ValClass[$i] eq \"(\"","right":"$ValPerl[$i] eq \"(\"","op":"and","type":"and_3"}],[2429,{"right":"$ValPerl[$sub_start] ne \"{\"","left":"$ValPerl[$sub_start] ne \"[\"","type":"and_3","op":"and"}],[2438,{"right":"$range","left":"$commas","type":"or_3","op":"or"}],[2491,{"type":"or_3","op":"or","right":"$ValClass[$i] eq \"\\@\"","left":"$ValClass[$i] eq \"&\""}],[2491,{"op":"or","type":"or_3","left":"$ValClass[$i] eq \"&\" or $ValClass[$i] eq \"\\@\"","right":"$ValClass[$i] eq \"%\""}],[2492,{"left":"$i < $#ValClass","right":"$ValClass[$i + 1] eq \"(\"","op":"and","type":"and_3"}],[2492,{"left":"$i < $#ValClass and $ValClass[$i + 1] eq \"(\"","right":"$ValPerl[$i + 1] eq \"{\"","op":"and","type":"and_3"}],[2492,{"op":"and","type":"and_3","left":"$i < $#ValClass","right":"$ValClass[$i + 1] eq \"s\""}],[2492,{"right":"index(')sdah\"iifx', $ValClass[$i - 1]) == -1","left":"$i - 1 < 0","type":"or_3","op":"||"}],[2492,{"type":"and_3","op":"and","right":"$i - 1 < 0 || index(')sdah\"iifx', $ValClass[$i - 1]) == -1","left":"$i < $#ValClass and $ValClass[$i + 1] eq \"s\""}],[2491,{"left":"$ValClass[$i] eq \"(\"","right":"$ValPerl[$i] eq \"{\"","op":"and","type":"and_3"}],[2514,{"right":"$j < $to","left":"($j = index($TokenStr, \"A\", $i + 1)) > 0","type":"and_3","op":"and"}],[2491,{"right":"$ValPerl[$i] eq \"\\$\"","left":"$ValClass[$i] eq \"s\"","type":"and_3","op":"and"}],[2491,{"right":"$i + 3 <= $#ValClass","left":"$ValClass[$i] eq \"s\" and $ValPerl[$i] eq \"\\$\"","type":"and_3","op":"and"}],[2491,{"type":"and_3","op":"and","right":"$ValClass[$i + 1] eq \"(\"","left":"$ValClass[$i] eq \"s\" and $ValPerl[$i] eq \"\\$\" and $i + 3 <= $#ValClass"}],[2491,{"left":"$ValClass[$i] eq \"s\" and $ValPerl[$i] eq \"\\$\" and $i + 3 <= $#ValClass and $ValClass[$i + 1] eq \"(\"","right":"$ValPerl[$i + 1] eq \"{\"","op":"and","type":"and_3"}],[2491,{"op":"and","type":"and_3","left":"$ValClass[$i] eq \"s\" and $ValPerl[$i] eq \"\\$\" and $i + 3 <= $#ValClass and $ValClass[$i + 1] eq \"(\" and $ValPerl[$i + 1] eq \"{\"","right":"$ValClass[$i + 2] ne \"\\\"\""}],[2615,{"left":"$ValClass[0] eq \"c\"","right":"$ValPerl[0] eq \"while\"","op":"and","type":"and_3"}],[2676,{"op":"or","type":"or_3","left":"$ValPerl[$pos] eq \"||=\"","right":"$ValPerl[$pos] eq \"&&=\""}],[2687,{"right":"$ValPerl[$pos] eq \"<=>\"","left":"$ValPerl[$pos] eq \"cmp\"","type":"or_3","op":"or"}],[2708,{"type":"and_3","op":"and","right":"$ValClass[$pos + 1] eq \"i\"","left":"$pos + 1 <= $#ValClass"}],[2708,{"op":"and","type":"and_3","left":"$pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq \"i\"","right":"not $LocalSub{$ValPy[$pos + 1]}"}],[2708,{"type":"and_3","op":"and","right":"not $Constants{$ValPy[$pos + 1]}","left":"$pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq \"i\" and not $LocalSub{$ValPy[$pos + 1]}"}],[2708,{"left":"$pos == 0","right":"!($ValClass[$pos - 1] =~ /[s)]/)","op":"||","type":"or_3"}],[2708,{"type":"and_3","op":"and","right":"$pos == 0 || !($ValClass[$pos - 1] =~ /[s)]/)","left":"$pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq \"i\" and not $LocalSub{$ValPy[$pos + 1]} and not $Constants{$ValPy[$pos + 1]}"}],[2720,{"op":"and","type":"and_3","left":"$oorp >= 0","right":"exists $VarType{$ValPy[$oorp]}"}],[2720,{"op":"and","type":"and_3","left":"$oorp >= 0 and exists $VarType{$ValPy[$oorp]}","right":"exists $VarType{$ValPy[$oorp]}{$CurSub}"}],[2720,{"type":"and_3","op":"and","right":"$VarType{$ValPy[$oorp]}{$CurSub} eq \"H\"","left":"$oorp >= 0 and exists $VarType{$ValPy[$oorp]} and exists $VarType{$ValPy[$oorp]}{$CurSub}"}],[2720,{"left":"$ValPerl[$oorp + 2] eq 'read'","right":"$ValPerl[$oorp + 2] eq 'sysread'","op":"||","type":"or_3"}],[2720,{"type":"and_3","op":"and","right":"$ValPerl[$oorp + 2] eq 'read' || $ValPerl[$oorp + 2] eq 'sysread'","left":"$oorp >= 0 and exists $VarType{$ValPy[$oorp]} and exists $VarType{$ValPy[$oorp]}{$CurSub} and $VarType{$ValPy[$oorp]}{$CurSub} eq \"H\""}],[2735,{"op":"and","type":"and_3","left":"$oop >= 0","right":"exists $VarType{$ValPy[$oop]}"}],[2735,{"right":"exists $VarType{$ValPy[$oop]}{$CurSub}","left":"$oop >= 0 and exists $VarType{$ValPy[$oop]}","type":"and_3","op":"and"}],[2735,{"left":"$oop >= 0 and exists $VarType{$ValPy[$oop]} and exists $VarType{$ValPy[$oop]}{$CurSub}","right":"$VarType{$ValPy[$oop]}{$CurSub} eq \"H\"","op":"and","type":"and_3"}],[2735,{"op":"||","type":"or_3","left":"$ValPerl[$oop + 2] eq 'open' || $ValPerl[$oop + 2] eq 'fdopen' || $ValPerl[$oop + 2] eq 'binmode'","right":"$ValPerl[$oop + 2] eq 'write'"}],[2735,{"op":"and","type":"and_3","left":"$oop >= 0 and exists $VarType{$ValPy[$oop]} and exists $VarType{$ValPy[$oop]}{$CurSub} and $VarType{$ValPy[$oop]}{$CurSub} eq \"H\"","right":"$ValPerl[$oop + 2] eq 'open' || $ValPerl[$oop + 2] eq 'fdopen' || $ValPerl[$oop + 2] eq 'binmode' || $ValPerl[$oop + 2] eq 'write'"}],[2735,{"op":"and","type":"and_3","left":"$oop >= 0","right":"$ValPerl[$oop + 2] eq \"isa\""}],[2772,{"left":"$ValPy[$pos] eq \".read\"","right":"$ValPy[$pos] eq \".sysread\"","op":"or","type":"or_3"}],[2805,{"left":"$pos + 1 <= $limit","right":"$ValClass[$pos + 1] eq \"(\"","op":"and","type":"and_3"}],[2805,{"right":"$ValPerl[$pos + 1] eq \"(\"","left":"$pos + 1 <= $limit and $ValClass[$pos + 1] eq \"(\"","type":"and_3","op":"and"}],[2821,{"left":"$pos - 1 >= 0","right":"$pos + 1 <= $limit","op":"and","type":"and_3"}],[2821,{"type":"and_3","op":"and","right":"$ValPy[$pos] =~ /\\.split\\(\\)$/","left":"$pos - 1 >= 0 and $pos + 1 <= $limit"}],[2821,{"right":"$ValClass[$pos - 1] eq \"(\"","left":"$pos - 1 >= 0 and $pos + 1 <= $limit and $ValPy[$pos] =~ /\\.split\\(\\)$/","type":"and_3","op":"and"}],[2821,{"type":"and_3","op":"and","right":"$ValPerl[$pos - 1] eq \"[\"","left":"$pos - 1 >= 0 and $pos + 1 <= $limit and $ValPy[$pos] =~ /\\.split\\(\\)$/ and $ValClass[$pos - 1] eq \"(\""}],[2821,{"right":"$ValClass[$pos + 1] eq \")\"","left":"$pos - 1 >= 0 and $pos + 1 <= $limit and $ValPy[$pos] =~ /\\.split\\(\\)$/ and $ValClass[$pos - 1] eq \"(\" and $ValPerl[$pos - 1] eq \"[\"","type":"and_3","op":"and"}],[2821,{"type":"and_3","op":"and","right":"$ValPerl[$pos + 1] eq \"]\"","left":"$pos - 1 >= 0 and $pos + 1 <= $limit and $ValPy[$pos] =~ /\\.split\\(\\)$/ and $ValClass[$pos - 1] eq \"(\" and $ValPerl[$pos - 1] eq \"[\" and $ValClass[$pos + 1] eq \")\""}],[2835,{"left":"$pos - 1 >= 0","right":"$pos + 1 <= $limit","op":"and","type":"and_3"}],[2838,{"right":"$ValPerl[$pos + 1] eq $close","left":"$ValPerl[$pos - 1] eq $open","type":"and_3","op":"and"}],[2838,{"type":"or_3","op":"||","right":"!($ValClass[$pos - 2] =~ /[sahG\\)]/)","left":"$pos - 2 < 0"}],[2838,{"op":"and","type":"and_3","left":"$ValPerl[$pos - 1] eq $open and $ValPerl[$pos + 1] eq $close","right":"$pos - 2 < 0 || !($ValClass[$pos - 2] =~ /[sahG\\)]/)"}],[2853,{"right":"$pos != 0","left":"$ValPerl[$pos] eq \"x\"","type":"and_3","op":"and"}],[2853,{"right":"$ValClass[$pos - 1] eq \")\"","left":"$ValPerl[$pos] eq \"x\" and $pos != 0","type":"and_3","op":"and"}],[2853,{"type":"and_3","op":"and","right":"$ValPerl[$pos - 1] eq \")\"","left":"$ValPerl[$pos] eq \"x\" and $pos != 0 and $ValClass[$pos - 1] eq \")\""}],[2860,{"op":"and","type":"and_3","left":"$open != 0","right":"$ValClass[$open - 1] eq \"(\""}],[2889,{"op":"and","type":"and_3","left":"$#ValClass != 0","right":"$ValClass[$#ValClass] eq \"k\""}],[2889,{"type":"and_3","op":"and","right":"$ValPerl[$#ValClass] eq \"sub\"","left":"$#ValClass != 0 and $ValClass[$#ValClass] eq \"k\""}],[2920,{"left":"$deferred_statement < 2","right":"not defined $split_multiple_assignment","op":"and","type":"and_3"}],[2925,{"left":"$CurSub ne '__main__' || scalar @eval_stack != 0","right":"$nested_sub_at_level > 0","op":"||","type":"or_3"}],[2925,{"left":"$CurSub ne '__main__' || scalar @eval_stack != 0 || $nested_sub_at_level > 0","right":"defined $line","op":"and","type":"and_3"}],[2925,{"op":"||","type":"or_3","left":"$line eq '}' || $line =~ /^}\\s*#/ || $line eq '};' || substr($line, 0, 1) eq '}' && &Perlscan::could_be_anonymous_sub_close() || $line =~ /^\\s*}\\s*$/ || $line =~ /^\\s*};\\s*$/","right":"$line =~ /^\\s*};\\s*#/"}],[2925,{"op":"and","type":"and_3","left":"$CurSub ne '__main__' || scalar @eval_stack != 0 || $nested_sub_at_level > 0 and defined $line","right":"$line eq '}' || $line =~ /^}\\s*#/ || $line eq '};' || substr($line, 0, 1) eq '}' && &Perlscan::could_be_anonymous_sub_close() || $line =~ /^\\s*}\\s*$/ || $line =~ /^\\s*};\\s*$/ || $line =~ /^\\s*};\\s*#/"}],[2925,{"type":"and_3","op":"and","right":"$ValPerl[0] ne \"return\"","left":"$CurSub ne '__main__' || scalar @eval_stack != 0 || $nested_sub_at_level > 0 and defined $line and $line eq '}' || $line =~ /^}\\s*#/ || $line eq '};' || substr($line, 0, 1) eq '}' && &Perlscan::could_be_anonymous_sub_close() || $line =~ /^\\s*}\\s*$/ || $line =~ /^\\s*};\\s*$/ || $line =~ /^\\s*};\\s*#/"}],[2925,{"left":"$Perlscan::nesting_level == 1 || $Pythonizer::CurNest == $eval_nest + 1","right":"$Perlscan::nesting_level == $nested_sub_at_level","op":"||","type":"or_3"}],[2925,{"op":"and","type":"and_3","left":"$CurSub ne '__main__' || scalar @eval_stack != 0 || $nested_sub_at_level > 0 and defined $line and $line eq '}' || $line =~ /^}\\s*#/ || $line eq '};' || substr($line, 0, 1) eq '}' && &Perlscan::could_be_anonymous_sub_close() || $line =~ /^\\s*}\\s*$/ || $line =~ /^\\s*};\\s*$/ || $line =~ /^\\s*};\\s*#/ and $ValPerl[0] ne \"return\"","right":"$Perlscan::nesting_level == 1 || $Pythonizer::CurNest == $eval_nest + 1 || $Perlscan::nesting_level == $nested_sub_at_level"}],[2941,{"type":"and_3","op":"and","right":"&Perlscan::could_be_anonymous_sub_close()","left":"not $comment"}],[2941,{"type":"and_3","op":"and","right":"$line ne \"}\"","left":"not $comment and &Perlscan::could_be_anonymous_sub_close()"}],[2941,{"type":"and_3","op":"and","right":"$line ne \"};\"","left":"not $comment and &Perlscan::could_be_anonymous_sub_close() and $line ne \"}\""}],[2944,{"op":"and","type":"and_3","left":"substr($line, 0, 2) eq \"},\"","right":"rindex($prev_line, '}' . substr($line, 2)) != -1"}],[2958,{"right":"index(\"fds\\\"(-a\", $ValClass[0]) != -1","left":"$generated_code == 0","type":"and_3","op":"and"}],[2962,{"type":"or_3","op":"||","right":"$prev_lno == $.","left":"$ValClass[-1] ne ')'"}],[2962,{"right":"$ValClass[-1] ne ')' || $prev_lno == $.","left":"$last_c eq \"}\"","type":"and_3","op":"and"}],[2967,{"type":"and_3","op":"and","right":"$prev_lno == $.","left":"substr($prev_line, -2, 2) eq \"};\""}],[2967,{"op":"and","type":"and_3","left":"substr($prev_line, -2, 2) eq \"};\" and $prev_lno == $.","right":"$line =~ /};/"}],[2958,{"right":"$LocalSub{$ValPy[0]}","left":"$ValClass[0] eq \"i\"","type":"and_3","op":"and"}],[2958,{"type":"or_3","op":"or","right":"$ValClass[0] eq \"i\" and $LocalSub{$ValPy[0]}","left":"$ValClass[0] eq \"f\""}],[2958,{"op":"or","type":"or_3","left":"$ValClass[0] eq \"f\" or $ValClass[0] eq \"i\" and $LocalSub{$ValPy[0]}","right":"ok_to_insert_return()"}],[2982,{"right":"$#ValClass >= 1","left":"$ValPerl[0] eq \"undef\"","type":"and_3","op":"and"}],[2958,{"type":"and_3","op":"and","right":"index($TokenStr, \"=\") > 0","left":"not $ValClass[0] =~ /[cCk]/"}],[3020,{"op":"or","type":"or_3","left":"$prev_line =~ /\\+\\+\\s*;/","right":"$prev_line =~ /\\+\\+\\s*$/"}],[3020,{"left":"$prev_line =~ /\\+\\+\\s*;/ or $prev_line =~ /\\+\\+\\s*$/","right":"$prev_line =~ /\\+\\+\\s+#/","op":"or","type":"or_3"}],[3020,{"right":"$prev_line =~ /--\\s*$/","left":"$prev_line =~ /--\\s*;/","type":"or_3","op":"or"}],[3020,{"type":"or_3","op":"or","right":"$prev_line =~ /--\\s+#/","left":"$prev_line =~ /--\\s*;/ or $prev_line =~ /--\\s*$/"}],[3059,{"type":"and_3","op":"and","right":"$TrStatus < 0","left":"defined $TrStatus"}],[3067,{"left":"$debug >= 3","right":"scalar @eval_stack","op":"and","type":"and_2"}],[3070,{"right":"not $Perlscan::PREV_HAD_COLON","left":"$eval_nest == $Pythonizer::CurNest","type":"and_3","op":"and"}],[3105,{"type":"and_3","op":"and","right":"$ValPy[0] eq $ValPy[2]","left":"$ValClass[0] eq \"s\""}],[3114,{"left":"$context_manager_nest == $Pythonizer::CurNest - 1","right":"$ValClass[0] ne \"c\"","op":"and","type":"and_3"}],[3132,{"op":"and","type":"and_3","left":"$ValClass[$i] eq \"s\"","right":"$ValClass[$i + 1] eq \"(\""}],[3154,{"op":"and","type":"and_3","left":"defined $ValClass[$i]","right":"$ValClass[$i] =~ /[sah]/"}],[3154,{"op":"and","type":"and_3","left":"defined $ValClass[$i] and $ValClass[$i] =~ /[sah]/","right":"exists $new_state_var_name{$ValPy[$i]}"}],[3156,{"op":"and","type":"and_3","left":"exists $VarType{$ValPy[$i]}","right":"exists $VarType{$ValPy[$i]}{$CurSub}"}],[3154,{"type":"or_3","op":"||","right":"$ValClass[$i] eq 'f' && $ValPerl[$i] eq 're'","left":"$ValClass[$i] =~ /[\"qx]/"}],[3154,{"type":"and_3","op":"and","right":"$ValClass[$i] =~ /[\"qx]/ || $ValClass[$i] eq 'f' && $ValPerl[$i] eq 're'","left":"defined $ValClass[$i]"}],[3154,{"left":"defined $ValClass[$i] and $ValClass[$i] =~ /[\"qx]/ || $ValClass[$i] eq 'f' && $ValPerl[$i] eq 're'","right":"$ValPy[$i] =~ /\\br?f['\"]/","op":"and","type":"and_3"}],[3173,{"right":"defined $state_var[0]","left":"scalar @state_var","type":"and_3","op":"and"}],[3202,{"type":"and_3","op":"and","right":"$ValClass[$start + 1] eq \"(\"","left":"$start + 1 <= $#ValClass"}],[3206,{"right":"$ValClass[$start + 1] =~ /[is]/","left":"$start + 1 <= $#ValClass","type":"and_3","op":"and"}],[3209,{"type":"or_3","op":"||","right":"$ValClass[$k] eq 'D'","left":"$ValClass[$k] eq ','"}],[3209,{"left":"$k <= $#ValClass","right":"$ValClass[$k] eq ',' || $ValClass[$k] eq 'D'","op":"and","type":"and_3"}],[3209,{"right":"$ValClass[$start + 2] eq '('","left":"$end_pos == $start + 1","type":"or_3","op":"||"}],[3209,{"left":"$ValClass[$start + 1] eq \"s\"","right":"$end_pos == $start + 1 || $ValClass[$start + 2] eq '('","op":"and","type":"and_3"}],[3209,{"type":"and_3","op":"and","right":"$start + 3 >= $#ValClass","left":"$ValClass[$start + 1] eq \"s\""}],[3209,{"type":"and_3","op":"and","right":"$ValClass[$start + 2] eq \".\"","left":"$ValClass[$start + 1] eq \"s\" and $start + 3 >= $#ValClass"}],[3209,{"op":"and","type":"and_3","left":"$ValClass[$start + 1] eq \"i\"","right":"$LocalSub{$ValPy[$start + 1]}"}],[3209,{"left":"not $Constants{$ValPy[$start + 1]}","right":"$start + 3 < $#ValClass","op":"and","type":"and_3"}],[3209,{"type":"and_3","op":"and","right":"$ValClass[$start + 2] eq \"(\"","left":"not $Constants{$ValPy[$start + 1]} and $start + 3 < $#ValClass"}],[3209,{"op":"or","type":"or_3","left":"$ValClass[$start + 1] eq \"i\" and $LocalSub{$ValPy[$start + 1]}","right":"not $Constants{$ValPy[$start + 1]} and $start + 3 < $#ValClass and $ValClass[$start + 2] eq \"(\""}],[3232,{"type":"and_3","op":"and","right":"$ValClass[$begin - 1] eq \"(\"","left":"$begin != 0"}],[3232,{"left":"$begin != 0 and $ValClass[$begin - 1] eq \"(\"","right":"$ValClass[-1] eq \")\"","op":"and","type":"and_3"}],[3258,{"right":"$comma == $end_pos + 1","left":"$ValClass[$k] eq \"a\"","type":"and_3","op":"and"}],[3275,{"op":"||","type":"or_3","left":"$ValPerl[$begin] eq 'print'","right":"$ValPerl[$begin] eq 'printf'"}],[3289,{"type":"or_3","op":"||","right":"$ValPerl[$begin] eq 'printf'","left":"$ValPerl[$begin] eq 'print'"}],[3289,{"left":"$ValPerl[$begin] eq 'print' || $ValPerl[$begin] eq 'printf'","right":"$ValClass[-1] eq \"\\\"\"","op":"and","type":"and_3"}],[3290,{"left":"$Perlscan::PythonCode[-1] =~ qr/\\\\n[\"']$/","right":"not $Perlscan::PythonCode[-1] =~ qr/\\\\\\\\n[\"']$/","op":"and","type":"and_3"}],[3289,{"left":"$ValPerl[$begin] eq \"print\"","right":"$ValPerl[$begin] eq \"printf\"","op":"or","type":"or_3"}],[3318,{"type":"or_3","op":"or","right":"$TrStatus < 0","left":"$start < 0"}],[3369,{"right":"$ValClass[$split + 1] eq \"C\"","left":"$split + 1 <= $#ValClass","type":"and_3","op":"and"}],[3377,{"right":"$extra < $limit","left":"$extra >= 0","type":"and_3","op":"and"}],[3380,{"right":"$ValPerl[$x + 1] ne \"(\"","left":"$ValClass[$x] =~ /[if]/","type":"and_3","op":"and"}],[3389,{"type":"and_3","op":"and","right":"$ValPy[$split] ne \":=\"","left":"$ValPy[$split] ne \"=\""}],[3405,{"left":"$ValPy[$split] ne \"=\"","right":"$ValPy[$split] ne \":=\"","op":"and","type":"and_3"}],[3419,{"left":"$ValPerl[$k] eq \"\\$?\"","right":"substr($CurSub, 0, 7) eq \"__END__\"","op":"and","type":"and_3"}],[3403,{"left":"$ValPerl[$k] eq \"(\"","right":"$ValPerl[$k + 1] eq \")\"","op":"and","type":"and_3"}],[3403,{"left":"$k + 2 < $split","right":"$ValPerl[$k] eq \"(\"","op":"and","type":"and_3"}],[3403,{"op":"and","type":"and_3","left":"$k + 2 < $split and $ValPerl[$k] eq \"(\"","right":"$ValClass[$k + 1] eq \"a\""}],[3403,{"op":"and","type":"and_3","left":"$k + 2 < $split and $ValPerl[$k] eq \"(\" and $ValClass[$k + 1] eq \"a\"","right":"$ValPerl[$k + 2] eq \")\""}],[3403,{"right":"$k + 7 < $#ValClass","left":"$ValPy[$k] eq \"[\"","type":"and_3","op":"and"}],[3403,{"type":"and_3","op":"and","right":"$ValClass[$k + 1] eq \"f\"","left":"$ValPy[$k] eq \"[\" and $k + 7 < $#ValClass"}],[3403,{"op":"and","type":"and_3","left":"$ValPy[$k] eq \"[\" and $k + 7 < $#ValClass and $ValClass[$k + 1] eq \"f\"","right":"$ValClass[$k + 3] =~ /[as]/"}],[3403,{"op":"||","type":"or_3","left":"$ValClass[$k + 7] eq 'y' && $ValPerl[$k + 7] eq 'multi'","right":"$k + 12 < $#ValClass && $ValClass[$k + 10] eq 'y' && $ValPerl[$k + 10] eq 'multi'"}],[3403,{"left":"$ValPy[$k] eq \"[\" and $k + 7 < $#ValClass and $ValClass[$k + 1] eq \"f\" and $ValClass[$k + 3] =~ /[as]/","right":"$ValClass[$k + 7] eq 'y' && $ValPerl[$k + 7] eq 'multi' || $k + 12 < $#ValClass && $ValClass[$k + 10] eq 'y' && $ValPerl[$k + 10] eq 'multi'","op":"and","type":"and_3"}],[3403,{"right":"$k + 3 < $#ValClass","left":"$ValPy[$k] eq \"[\"","type":"and_3","op":"and"}],[3403,{"right":"$ValClass[$k + 1] =~ /[as]/","left":"$ValPy[$k] eq \"[\" and $k + 3 < $#ValClass","type":"and_3","op":"and"}],[3403,{"type":"and_3","op":"and","right":"$ValClass[$k + 2] eq \"y\"","left":"$ValPy[$k] eq \"[\" and $k + 3 < $#ValClass and $ValClass[$k + 1] =~ /[as]/"}],[3403,{"left":"$ValPy[$k] eq \"[\" and $k + 3 < $#ValClass and $ValClass[$k + 1] =~ /[as]/ and $ValClass[$k + 2] eq \"y\"","right":"$ValPerl[$k + 2] eq \"multi\"","op":"and","type":"and_3"}],[3403,{"type":"and_3","op":"and","right":"$ValPy[$k + 2] =~ /\\.get\\(/","left":"$ValPy[$k] eq \"[\" and $k + 3 < $#ValClass and $ValClass[$k + 1] =~ /[as]/ and $ValClass[$k + 2] eq \"y\" and $ValPerl[$k + 2] eq \"multi\""}],[3403,{"left":"$ValPy[$k + 3] eq '[' || $ValClass[$k + 3] eq 'q' && $ValPy[$k + 3] =~ /\\.split\\(\\)$/","right":"$ValClass[$k + 3] eq 'f' && $ValPy[$k + 3] eq $CONVERTER_MAP{'a of S'} && $ValPy[$k + 5] eq '['","op":"||","type":"or_3"}],[3403,{"op":"and","type":"and_3","left":"$ValPy[$k] eq \"[\" and $k + 3 < $#ValClass and $ValClass[$k + 1] =~ /[as]/ and $ValClass[$k + 2] eq \"y\" and $ValPerl[$k + 2] eq \"multi\" and $ValPy[$k + 2] =~ /\\.get\\(/","right":"$ValPy[$k + 3] eq '[' || $ValClass[$k + 3] eq 'q' && $ValPy[$k + 3] =~ /\\.split\\(\\)$/ || $ValClass[$k + 3] eq 'f' && $ValPy[$k + 3] eq $CONVERTER_MAP{'a of S'} && $ValPy[$k + 5] eq '['"}],[3486,{"op":"and","type":"and_3","left":"$ValClass[$k] eq \"f\"","right":"$ValPerl[$k] eq \"undef\""}],[3486,{"left":"$ValClass[$k] eq \"s\"","right":"$ValClass[$k + 1] eq \"(\"","op":"and","type":"and_3"}],[3503,{"type":"and_3","op":"and","right":"$ValPerl[$k] eq \"undef\"","left":"$ValClass[$k] eq \"f\""}],[3503,{"left":"$ValClass[$k] eq \"s\"","right":"$ValClass[$k + 1] eq \"(\"","op":"and","type":"and_3"}],[3403,{"op":"and","type":"and_3","left":"$ValClass[$k] eq \"a\"","right":"$k + 1 <= $#ValClass"}],[3403,{"right":"$ValClass[$k + 1] eq \"(\"","left":"$ValClass[$k] eq \"a\" and $k + 1 <= $#ValClass","type":"and_3","op":"and"}],[3403,{"op":"and","type":"and_3","left":"$ValClass[$k] eq \"a\" and $k + 1 <= $#ValClass and $ValClass[$k + 1] eq \"(\"","right":"$ValPerl[$k + 1] eq \"{\""}],[3533,{"right":"$ValPerl[$k + 1] eq \"{\"","left":"substr($TokenStr, $k) =~ /^s\\([si\"]\\)=\\(\\)$/","type":"and_3","op":"and"}],[3533,{"left":"substr($TokenStr, $k) =~ /^s\\([si\"]\\)=\\(\\)$/ and $ValPerl[$k + 1] eq \"{\"","right":"$ValPy[$k + 5] eq \"(\"","op":"and","type":"and_3"}],[3547,{"right":"$ValPerl[$k] eq \"\\$ARGV\"","left":"$ValClass[$k] eq \"s\"","type":"and_3","op":"and"}],[3547,{"type":"and_3","op":"and","right":"$ValClass[$k + 1] eq \"(\"","left":"$ValClass[$k] eq \"s\" and $ValPerl[$k] eq \"\\$ARGV\""}],[3564,{"right":"rhs_has_same_number_of_elements($number_of_elements, $split + 1, $limit)","left":"defined $number_of_elements","type":"and_3","op":"and"}],[3606,{"type":"and_3","op":"and","right":"list_or_scalar_context($start, $limit) == 1","left":"exists $SubAttributes{$ValPy[$limit]}{'wantarray'}"}],[3577,{"op":"and","type":"and_3","left":"defined $number_of_elements","right":"$ValClass[$limit] eq \"h\""}],[3577,{"left":"$ValClass[$limit] eq \"q\"","right":"index($ValPy[$limit], \":=\") > 0","op":"and","type":"and_3"}],[3572,{"type":"and_3","op":"and","right":"$ValClass[$split + 1] eq \"(\"","left":"$limit - $split == 2"}],[3572,{"op":"and","type":"and_3","left":"$limit - $split == 2 and $ValClass[$split + 1] eq \"(\"","right":"$ValClass[$split + 2] eq \")\""}],[3726,{"left":"$k < 0","right":"$ValClass[$k] ne \"=\"","op":"or","type":"or_3"}],[3734,{"right":"$ValClass[$start] =~ /[ah]/","left":"$autovivification","type":"and_3","op":"and"}],[3734,{"op":"and","type":"and_3","left":"$autovivification","right":"$ValClass[$split + 1] eq \"(\""}],[3734,{"type":"and_3","op":"and","right":"$ValPerl[$split + 1] ne \"(\"","left":"$autovivification and $ValClass[$split + 1] eq \"(\""}],[3734,{"op":"and","type":"and_3","left":"$autovivification and $ValClass[$split + 1] eq \"(\" and $ValPerl[$split + 1] ne \"(\"","right":"not defined $number_of_elements"}],[3749,{"op":"and","type":"and_3","left":"$ValClass[$start] eq \"h\"","right":"&Pythonizer::expr_type($split + 1, $limit, $CurSub) =~ /^a/"}],[3368,{"right":"$ValPerl[$split] ne \"~\"","left":"($split = index($TokenStr, \"~\", $k)) > -1","type":"and_3","op":"and"}],[3777,{"right":"$ValPerl[0] eq \"\\$|\"","left":"$ValClass[0] eq \"s\"","type":"and_3","op":"and"}],[3785,{"right":"$ValClass[$k] ne \"=\"","left":"$k < 0","type":"or_3","op":"or"}],[3838,{"right":"$ValClass[$ep + 1] eq \"(\"","left":"$ep < $#ValClass","type":"and_3","op":"and"}],[3838,{"op":"and","type":"and_3","left":"$ep < $#ValClass and $ValClass[$ep + 1] eq \"(\"","right":"$ValPerl[$ep + 1] eq \"(\""}],[3838,{"left":"$ep == $#ValClass","right":"defined $line","op":"and","type":"and_3"}],[3838,{"type":"and_3","op":"and","right":"$line =~ /eval;/","left":"$ep == $#ValClass and defined $line"}],[3838,{"right":"$ep == $#ValClass and defined $line and $line =~ /eval;/","left":"$ep < $#ValClass and $ValClass[$ep + 1] eq \"(\" and $ValPerl[$ep + 1] eq \"(\"","type":"or_3","op":"or"}],[3838,{"type":"and_3","op":"and","right":"$ValClass[$ep + 1] eq \"(\"","left":"$ep < $#ValClass"}],[3838,{"type":"and_3","op":"and","right":"$ValPerl[$ep + 1] eq \"{\"","left":"$ep < $#ValClass and $ValClass[$ep + 1] eq \"(\""}],[4007,{"op":"||","type":"or_3","left":"$start == 0","right":"$start == 1 && $ValClass[0] eq 't'"}],[4008,{"right":"$ValClass[$split + 1] eq \"f\"","left":"$split + 1 <= $#ValClass","type":"and_3","op":"and"}],[4008,{"type":"and_3","op":"and","right":"$ValPerl[$split + 1] eq \"tr\"","left":"$split + 1 <= $#ValClass and $ValClass[$split + 1] eq \"f\""}],[4016,{"right":"$eq_ok","left":"$flags =~ /r/","type":"or_3","op":"||"}],[4016,{"type":"and_3","op":"and","right":"$flags =~ /r/ || $eq_ok","left":"$split - $k == 1"}],[4018,{"op":"and","type":"and_3","left":"$flags eq \"\"","right":"$eq_ok"}],[4016,{"left":"not $eq_ok","right":"end_of_variable($start) + 1 == $split","op":"and","type":"and_3"}],[4016,{"op":"or","type":"or_3","left":"($eq = next_same_level_token(\"=\", $start, $split - 1)) != -1","right":"not $eq_ok and end_of_variable($start) + 1 == $split"}],[4057,{"type":"and_3","op":"and","right":"$ValPy[$eq + 1] eq $CONVERTER_MAP{'S'}","left":"$ValClass[$eq + 1] eq \"f\""}],[4057,{"op":"and","type":"and_3","left":"$ValClass[$eq + 1] eq \"(\"","right":"($eq2 = next_same_level_token(\"=\", $eq + 2, $split - 2)) != -1"}],[4016,{"type":"and_3","op":"and","right":"($eq = next_same_level_token(\"=\", $start + 1, $split - 2)) != -1","left":"$ValClass[$start] eq \"(\""}],[4094,{"left":"$flags eq \"\"","right":"$flags eq \"r\"","op":"or","type":"or_3"}],[4100,{"left":"$flags eq \"\"","right":"$flags eq \"r\"","op":"or","type":"or_3"}],[4105,{"type":"or_3","op":"or","right":"$flags =~ /r/","left":"not $eq_ok"}],[4016,{"left":"$ValPy[$start] eq '_assign_global'","right":"$ValPy[$start] eq $CONVERTER_MAP{'S'} && $ValPy[$start + 2] eq '_assign_global'","op":"||","type":"or_3"}],[4016,{"op":"and","type":"and_3","left":"$ValClass[$start] eq \"f\"","right":"$ValPy[$start] eq '_assign_global' || $ValPy[$start] eq $CONVERTER_MAP{'S'} && $ValPy[$start + 2] eq '_assign_global'"}],[4128,{"left":"$flags eq \"\"","right":"$flags eq \"r\"","op":"or","type":"or_3"}],[4135,{"left":"$flags eq \"\"","right":"$flags eq \"r\"","op":"or","type":"or_3"}],[4143,{"right":"$ValPy[$start] eq $CONVERTER_MAP{'S'}","left":"$ValClass[$start] eq \"f\"","type":"and_3","op":"and"}],[4152,{"type":"or_3","op":"or","right":"$flags eq \"r\"","left":"$flags eq \"\""}],[4157,{"left":"$flags eq \"\"","right":"$flags eq \"r\"","op":"or","type":"or_3"}],[4191,{"right":"$ValPy[$split + 1] =~ /^\\($DEFAULT_MATCH:=/","left":"$eq_ok","type":"and_3","op":"and"}],[4170,{"left":"$ValClass[$split + 1] eq \"f\"","right":"$ValPerl[$split + 1] eq \"re\"","op":"and","type":"and_3"}],[4220,{"right":"$eq_ok","left":"$flags =~ /replace/","type":"or_3","op":"||"}],[4220,{"op":"and","type":"and_3","left":"$split - $k == 1","right":"$flags =~ /replace/ || $eq_ok"}],[4220,{"type":"and_3","op":"and","right":"end_of_variable($start) + 1 == $split","left":"not $eq_ok"}],[4220,{"left":"($eq = next_same_level_token(\"=\", $start, $split - 1)) != -1","right":"not $eq_ok and end_of_variable($start) + 1 == $split","op":"or","type":"or_3"}],[4261,{"left":"$ValClass[$eq + 1] eq \"f\"","right":"$ValPy[$eq + 1] eq $CONVERTER_MAP{'S'}","op":"and","type":"and_3"}],[4220,{"type":"and_3","op":"and","right":"($eq = next_same_level_token(\"=\", $start + 1, $split - 2)) != -1","left":"$ValClass[$start] eq \"(\""}],[4220,{"left":"$ValPy[$start] eq '_assign_global'","right":"$ValPy[$start] eq $CONVERTER_MAP{'S'} && $ValPy[$start + 2] eq '_assign_global'","op":"||","type":"or_3"}],[4220,{"right":"$ValPy[$start] eq '_assign_global' || $ValPy[$start] eq $CONVERTER_MAP{'S'} && $ValPy[$start + 2] eq '_assign_global'","left":"$ValClass[$start] eq \"f\"","type":"and_3","op":"and"}],[4353,{"op":"and","type":"and_3","left":"$ValClass[$start] eq \"f\"","right":"$ValPy[$start] eq $CONVERTER_MAP{'S'}"}],[4388,{"left":"exists $SpecialVarsUsed{'qr'}","right":"!$implicit_global_my","op":"||","type":"or_3"}],[4388,{"right":"$ValClass[$split + 1] ne \"\\\"\"","left":"exists $SpecialVarsUsed{'qr'} || !$implicit_global_my","type":"and_3","op":"and"}],[4393,{"right":"$ValPy[$pat_s] eq $CONVERTER_MAP{'S'}","left":"$ValClass[$pat_s] eq \"f\"","type":"and_3","op":"and"}],[4444,{"type":"and_3","op":"and","right":"$ValClass[$pos + 1] eq \")\"","left":"$pos + 2 <= $#ValClass"}],[4444,{"right":"$ValPerl[$pos + 1] eq \")\"","left":"$pos + 2 <= $#ValClass and $ValClass[$pos + 1] eq \")\"","type":"and_3","op":"and"}],[4444,{"type":"and_3","op":"and","right":"$ValClass[$pos + 2] eq \"(\"","left":"$pos + 2 <= $#ValClass and $ValClass[$pos + 1] eq \")\" and $ValPerl[$pos + 1] eq \")\""}],[4444,{"left":"$pos + 2 <= $#ValClass and $ValClass[$pos + 1] eq \")\" and $ValPerl[$pos + 1] eq \")\" and $ValClass[$pos + 2] eq \"(\"","right":"$ValPerl[$pos + 2] eq \"[\"","op":"and","type":"and_3"}],[4453,{"op":"and","type":"and_3","left":"$ValClass[0] eq \"c\"","right":"$ValPy[0] eq \"for\""}],[4458,{"type":"and_3","op":"and","right":"$ValPerl[$eq - 1] eq \")\"","left":"$ValClass[$eq - 1] eq \")\""}],[4458,{"type":"or_3","op":"or","right":"$ValClass[$eq - 1] eq \")\" and $ValPerl[$eq - 1] eq \")\"","left":"$ValClass[$eq - 1] =~ /[ah]/"}],[4487,{"type":"and_3","op":"and","right":"matching_br($assign_start + 1) == $assign_end - 1","left":"$ValClass[$assign_start + 1] eq \"(\""}],[4497,{"left":"$ValPerl[$begin] eq 'chop'","right":"$ValPerl[$begin] eq 'chomp'","op":"||","type":"or_3"}],[4497,{"right":"$begin == 2","left":"$ValPerl[$begin] eq 'chop' || $ValPerl[$begin] eq 'chomp'","type":"and_3","op":"and"}],[4519,{"right":"$ValPy[$i] =~ /$DEFAULT_MATCH:=/","left":"$ValClass[$i] eq \"q\"","type":"and_3","op":"and"}],[4542,{"left":"$comma > $assign_start","right":"$comma < $end","op":"and","type":"and_3"}],[4553,{"op":"and","type":"and_3","left":"$ValClass[$assign_start + 1] eq \"f\"","right":"$ValPerl[$assign_start + 1] eq \"undef\""}],[4572,{"left":"$begin < 0","right":"$TrStatus < 0","op":"or","type":"or_3"}],[4587,{"type":"and_3","op":"and","right":"$ValClass[-1] eq \")\"","left":"$ValPerl[$start] eq \"(\""}],[4587,{"right":"!($TokenStr =~ /=/)","left":"$ValPerl[$begin] eq 'for' || $ValPerl[$begin] eq 'foreach'","type":"or_3","op":"||"}],[4587,{"op":"and","type":"and_3","left":"$ValPerl[$start] eq \"(\" and $ValClass[-1] eq \")\"","right":"$ValPerl[$begin] eq 'for' || $ValPerl[$begin] eq 'foreach' || !($TokenStr =~ /=/)"}],[4599,{"right":"$ValPerl[$begin] eq \"unless\"","left":"$ValPerl[$begin] eq \"if\"","type":"or_3","op":"or"}],[4602,{"right":"$TokenStr eq \"cdrq\"","left":"$TokenStr eq \"cqrq\"","type":"or_3","op":"or"}],[4599,{"type":"or_3","op":"or","right":"$ValPerl[$begin] eq \"until\"","left":"$ValPerl[$begin] eq \"while\""}],[4640,{"type":"and_3","op":"and","right":"$Perlscan::nesting_last->{'type'} eq \"do\"","left":"defined $Perlscan::nesting_last"}],[4649,{"right":"$ValPy[$start] eq 1","left":"substr($TokenStr, $start) eq \"d\"","type":"and_3","op":"and"}],[4599,{"op":"||","type":"or_3","left":"$ValPerl[$begin] eq 'for'","right":"$ValPerl[$begin] eq 'foreach'"}],[4599,{"type":"and_3","op":"and","right":"$hadparens == 1","left":"$ValPerl[$begin] eq 'for' || $ValPerl[$begin] eq 'foreach'"}],[4599,{"right":"not $ValClass[$begin + 1] =~ /[ahf]/","left":"$ValPerl[$begin] eq 'for' || $ValPerl[$begin] eq 'foreach' and $hadparens == 1","type":"and_3","op":"and"}],[4684,{"left":"$ValPerl[-1] eq \"++\"","right":"$ValClass[-2] eq \"s\"","op":"and","type":"and_3"}],[4684,{"op":"and","type":"and_3","left":"$ValPerl[-1] eq \"++\" and $ValClass[-2] eq \"s\"","right":"$ValClass[-3] eq \";\""}],[4684,{"right":"$ValClass[-2] eq \"s\"","left":"$ValPerl[-1] eq \"--\"","type":"and_3","op":"and"}],[4684,{"op":"and","type":"and_3","left":"$ValPerl[-1] eq \"--\" and $ValClass[-2] eq \"s\"","right":"$ValClass[-3] eq \";\""}],[4684,{"type":"and_3","op":"and","right":"$k + 11 == $#ValClass","left":"($k = index($TokenStr, \";((s=s+d)-d)\")) > 0"}],[4684,{"type":"and_3","op":"and","right":"$k + 11 == $#ValClass","left":"($k = index($TokenStr, \";((s=s-d)+d)\")) > 0"}],[4684,{"right":"$k + 14 == $#ValClass","left":"($k = index($TokenStr, \";((s=f(s)+d)-d)\")) > 0","type":"and_3","op":"and"}],[4684,{"right":"$k + 14 == $#ValClass","left":"($k = index($TokenStr, \";((s=f(s)-d)+d)\")) > 0","type":"and_3","op":"and"}],[4684,{"type":"and_3","op":"and","right":"$ValPerl[$k + 2] eq \"+=\"","left":"($k = index($TokenStr, \";s=d\")) > 0"}],[4684,{"right":"$k + 3 == $#ValClass","left":"($k = index($TokenStr, \";s=d\")) > 0 and $ValPerl[$k + 2] eq \"+=\"","type":"and_3","op":"and"}],[4684,{"type":"and_3","op":"and","right":"$ValPerl[$k + 2] eq \"-=\"","left":"($k = index($TokenStr, \";s=d\")) > 0"}],[4684,{"right":"$k + 3 == $#ValClass","left":"($k = index($TokenStr, \";s=d\")) > 0 and $ValPerl[$k + 2] eq \"-=\"","type":"and_3","op":"and"}],[4684,{"type":"and_3","op":"and","right":"$ValPerl[$k + 1] eq $ValPerl[$k + 5]","left":"($k = index($TokenStr, \";s=f(s)+d\")) > 0"}],[4684,{"type":"and_3","op":"and","right":"$ValPy[$k + 3] eq $CONVERTER_MAP{'N'}","left":"($k = index($TokenStr, \";s=f(s)+d\")) > 0 and $ValPerl[$k + 1] eq $ValPerl[$k + 5]"}],[4684,{"right":"$k + 8 == $#ValClass","left":"($k = index($TokenStr, \";s=f(s)+d\")) > 0 and $ValPerl[$k + 1] eq $ValPerl[$k + 5] and $ValPy[$k + 3] eq $CONVERTER_MAP{'N'}","type":"and_3","op":"and"}],[4684,{"op":"and","type":"and_3","left":"($k = index($TokenStr, \";s=f(s)-d\")) > 0","right":"$ValPerl[$k + 1] eq $ValPerl[$k + 5]"}],[4684,{"left":"($k = index($TokenStr, \";s=f(s)-d\")) > 0 and $ValPerl[$k + 1] eq $ValPerl[$k + 5]","right":"$ValPy[$k + 3] eq $CONVERTER_MAP{'N'}","op":"and","type":"and_3"}],[4684,{"op":"and","type":"and_3","left":"($k = index($TokenStr, \";s=f(s)-d\")) > 0 and $ValPerl[$k + 1] eq $ValPerl[$k + 5] and $ValPy[$k + 3] eq $CONVERTER_MAP{'N'}","right":"$k + 8 == $#ValClass"}],[4742,{"left":"$semi1 < 0","right":"$semi2 < 0","op":"or","type":"or_3"}],[4755,{"type":"and_3","op":"and","right":"$ValPy[$eq] eq \":=\"","left":"$eq != -1"}],[4782,{"right":"$loop_ctr eq $CONVERTER_MAP{'I'}","left":"$loop_ctr eq $CONVERTER_MAP{'N'}","type":"or_3","op":"||"}],[4782,{"right":"$loop_ctr eq $CONVERTER_MAP{'N'} || $loop_ctr eq $CONVERTER_MAP{'I'}","left":"$ValClass[$start + 2] eq \"f\"","type":"and_3","op":"and"}],[4599,{"left":"$ValPerl[$begin] eq \"for\"","right":"$ValPerl[$begin] eq \"foreach\"","op":"or","type":"or_3"}],[4866,{"left":"substr($TokenStr, $start) eq \"(a)\"","right":"substr($TokenStr, $start) eq \"(s)\"","op":"or","type":"or_3"}],[4876,{"right":"$ValPerl[$start] eq \"values\"","left":"$ValPerl[$start] eq \"keys\"","type":"or_3","op":"or"}],[4866,{"op":"||","type":"or_3","left":"$ValPy[$start + 1] =~ /\\.split\\(\\)$/","right":"$ValPy[$start + 1] =~ /re\\.finditer/"}],[4866,{"left":"substr($TokenStr, $start) eq \"(q)\"","right":"$ValPy[$start + 1] =~ /\\.split\\(\\)$/ || $ValPy[$start + 1] =~ /re\\.finditer/","op":"and","type":"and_3"}],[4866,{"op":"||","type":"or_3","left":"$ValPy[$start + 2] =~ /\\.split\\(\\)$/","right":"$ValPy[$start + 2] =~ /re\\.finditer/"}],[4866,{"type":"and_3","op":"and","right":"$ValPy[$start + 2] =~ /\\.split\\(\\)$/ || $ValPy[$start + 2] =~ /re\\.finditer/","left":"substr($TokenStr, $start) eq \"((q))\""}],[4866,{"type":"and_3","op":"and","right":"$ValPerl[$start + 1] eq \"reverse\"","left":"substr($TokenStr, $start) =~ /^\\(f\\(?.*r/"}],[4926,{"op":"or","type":"or_3","left":"$ValPerl[$start] ne \"(\"","right":"$ValPerl[-1] ne \")\""}],[4926,{"type":"or_3","op":"or","right":"index(substr($TokenStr, $start), \",\") != -1","left":"$ValPerl[$start] ne \"(\" or $ValPerl[-1] ne \")\""}],[4599,{"left":"$ValPerl[$begin] eq \"package\"","right":"$start <= $#ValClass","op":"and","type":"and_3"}],[4969,{"right":"$ValPerl[$begin] eq \"length\"","left":"substr($TokenStr, $begin, $limit + 1 - $begin) eq \"f(C(kis>d,\\\",\\\";ki\\\";s&\\\"))\"","type":"and_3","op":"and"}],[4969,{"type":"and_3","op":"and","right":"$ValPerl[$limit - 2] eq \"\"","left":"substr($TokenStr, $begin, $limit + 1 - $begin) eq \"f(C(kis>d,\\\",\\\";ki\\\";s&\\\"))\" and $ValPerl[$begin] eq \"length\""}],[4976,{"right":"$ValClass[$begin + 1] eq \"(\"","left":"$ValPerl[$begin] eq \"%SIG\"","type":"and_3","op":"and"}],[4981,{"op":"and","type":"and_3","left":"scalar @_ > 1","right":"$begin == $limit"}],[4981,{"left":"$begin == $#ValClass","right":"scalar @_ > 1 and $begin == $limit","op":"or","type":"or_3"}],[4981,{"type":"and_3","op":"and","right":"$ValClass[$begin + 1] eq \"(\"","left":"$begin < $#ValClass"}],[4981,{"type":"and_3","op":"and","right":"$ValPy[$begin + 1] eq \"(\"","left":"$begin < $#ValClass and $ValClass[$begin + 1] eq \"(\""}],[5012,{"type":"and_3","op":"and","right":"$begin != 0","left":"scalar @_ < 2"}],[5032,{"right":"$TrStatus < 0","left":"$begin < 0","type":"or_3","op":"or"}],[5038,{"left":"$perl_name eq \"die\"","right":"$py_name =~ /^raise /","op":"and","type":"and_3"}],[5038,{"op":"and","type":"and_3","left":"$perl_name eq \"die\" and $py_name =~ /^raise /","right":"$begin != 0"}],[5074,{"right":"substr($1, 0, 1) eq \"-\"","left":"length $1 >= 2","type":"and_3","op":"and"}],[5075,{"right":"substr($2, 0, 1) eq \"-\"","left":"length $2 >= 2","type":"and_3","op":"and"}],[5070,{"right":"$comma2 != -1","left":"$comma3 != -1","type":"and_3","op":"and"}],[5070,{"right":"$comma1 != -1","left":"$comma3 != -1 and $comma2 != -1","type":"and_3","op":"and"}],[5144,{"left":"$end_pos - $split2 == 1","right":"$ValClass[$end_pos] eq \"d\"","op":"and","type":"and_3"}],[5158,{"right":"$arg2 < 0","left":"$arg1 >= 0","type":"or_3","op":"||"}],[5158,{"left":"$arg2 != 0","right":"$arg1 >= 0 || $arg2 < 0","op":"and","type":"and_3"}],[5144,{"right":"substr($TokenStr, $split2, 3) eq \",-d\"","left":"$end_pos - $split2 == 2","type":"and_3","op":"and"}],[5064,{"left":"$perl_name eq \"index\"","right":"$perl_name eq \"rindex\"","op":"or","type":"or_3"}],[5311,{"left":"$bracketed == -1","right":"$k > $#ValClass","op":"or","type":"or_3"}],[5311,{"type":"and_3","op":"and","right":"$ValPerl[$k] eq \")\"","left":"$bracketed == 1"}],[5311,{"type":"or_3","op":"or","right":"$bracketed == 1 and $ValPerl[$k] eq \")\"","left":"$bracketed == -1 or $k > $#ValClass"}],[5325,{"left":"$arg1type eq \"f\"","right":"$arg1 eq $CONVERTER_MAP{'S'}","op":"and","type":"and_3"}],[5325,{"type":"and_3","op":"and","right":"$ValClass[$k + 2] eq \"q\"","left":"$arg1type eq \"f\" and $arg1 eq $CONVERTER_MAP{'S'}"}],[5332,{"right":"$k + 1 <= $#ValClass","left":"$arg1type ne \"\\\"\"","type":"and_3","op":"and"}],[5332,{"right":"$ValClass[$k + 1] eq \"i\"","left":"$arg1type ne \"\\\"\" and $k + 1 <= $#ValClass","type":"and_3","op":"and"}],[5340,{"op":"or","type":"or_3","left":"$k + 1 > $#ValClass","right":"$ValPerl[$k + 1] ne \",\""}],[5064,{"op":"or","type":"or_3","left":"$perl_name eq \"print\"","right":"$perl_name eq \"printf\""}],[5420,{"op":"and","type":"and_3","left":"$k + 1 <= $#ValClass","right":"$ValClass[$k + 1] eq \"(\""}],[5420,{"op":"and","type":"and_3","left":"$k + 1 <= $#ValClass and $ValClass[$k + 1] eq \"(\"","right":"$ValPerl[$k + 1] ne \"(\""}],[5422,{"left":"$ValClass[$e] eq \")\"","right":"$ValPerl[$e] eq \"]\"","op":"and","type":"and_3"}],[5426,{"left":"$ValClass[$s - 1] eq \"s\"","right":"$ValPerl[$s - 1] eq \"\\$_\"","op":"and","type":"and_3"}],[5437,{"type":"and_3","op":"and","right":"$ValClass[$e - 1] eq \"d\"","left":"$ValClass[$s + 1] eq \"-\""}],[5437,{"left":"$ValClass[$s + 1] eq \"-\" and $ValClass[$e - 1] eq \"d\"","right":"$e - 1 - ($s + 1) == 1","op":"and","type":"and_3"}],[5437,{"left":"$ValClass[$s + 1] eq \"d\"","right":"$e - 1 - ($s + 1) == 0","op":"and","type":"and_3"}],[5420,{"left":"$k + 1 > $#ValClass","right":"$ValClass[$k + 1] ne '('","op":"||","type":"or_3"}],[5420,{"right":"$k + 1 > $#ValClass || $ValClass[$k + 1] ne '('","left":"$ValClass[$k] eq \"i\"","type":"and_3","op":"and"}],[5473,{"type":"and_3","op":"and","right":"$ValClass[$k + 1] eq \"D\"","left":"$k + 2 <= $#ValClass"}],[5473,{"right":"$ValClass[$k + 2] eq \"i\"","left":"$k + 2 <= $#ValClass and $ValClass[$k + 1] eq \"D\"","type":"and_3","op":"and"}],[5420,{"op":"||","type":"or_3","left":"$k + 1 > $end_pos","right":"$ValClass[$k + 1] ne '('"}],[5420,{"type":"and_3","op":"and","right":"$k + 1 > $end_pos || $ValClass[$k + 1] ne '('","left":"$ValClass[$k] eq \"f\""}],[5509,{"right":"$arg0_type eq \"\"","left":"$arg0_type eq \":\"","type":"or_3","op":"or"}],[5420,{"left":"$ValClass[$k] eq \"s\"","right":"substr($ValPy[$k], 0, length($DEFAULT_MATCH) + 1) eq \"$DEFAULT_MATCH.\"","op":"and","type":"and_3"}],[5523,{"op":"or","type":"or_3","left":"$ValPy[$k] eq \"$DEFAULT_MATCH.group(0)\"","right":"$ValPy[$k] =~ /$DEFAULT_MATCH\\.string/"}],[5420,{"type":"and_3","op":"and","right":"$ValPerl[$k] eq \"\\$_\"","left":"$ValClass[$k] eq \"s\""}],[5420,{"right":"$ValPy[$k] =~ /^(\\w+)\\[(\\d+)\\]$/","left":"$ValClass[$k] eq \"s\" and $ValPerl[$k] eq \"\\$_\"","type":"and_3","op":"and"}],[5534,{"right":"$end_pos + 2 <= $#ValClass","left":"$bracketed == 1","type":"and_3","op":"and"}],[5534,{"op":"and","type":"and_3","left":"$bracketed == 1 and $end_pos + 2 <= $#ValClass","right":"$ValClass[$end_pos + 2] eq \"y\""}],[5545,{"left":"$k + 1 <= $#ValPerl","right":"$ValPerl[$k + 1] eq ')'","op":"&&","type":"and_3"}],[5559,{"op":"and","type":"and_3","left":"$k == $comma - 1","right":"substr($ValPy[$k], -4, 4) eq \"[1:]\""}],[5565,{"op":"and","type":"and_3","left":"$ValClass[$comma + 1] eq \"i\"","right":"$comma + 1 == $#ValClass"}],[5565,{"left":"index(\"sd-\\\"\", $ValClass[$comma + 1]) != -1","right":"$ValClass[$comma + 1] eq \"i\" and $comma + 1 == $#ValClass","op":"or","type":"or_3"}],[5565,{"type":"or_3","op":"or","right":"$ValClass[$comma + 1] eq \"\\\\\"","left":"index(\"sd-\\\"\", $ValClass[$comma + 1]) != -1 or $ValClass[$comma + 1] eq \"i\" and $comma + 1 == $#ValClass"}],[5064,{"left":"$perl_name eq \"shift\"","right":"$perl_name eq \"pop\"","op":"or","type":"or_3"}],[5586,{"right":"index(\">0o+-*/\", $ValClass[$start]) != -1","left":"$bracketed != -1","type":"and_3","op":"and"}],[5589,{"right":"substr($CurSub, 0, 7) eq \"__END__\"","left":"$CurSub eq \"__main__\"","type":"or_3","op":"or"}],[5064,{"type":"and_3","op":"and","right":"$bracketed == -1","left":"$perl_name eq \"mkdir\""}],[5064,{"op":"or","type":"or_3","left":"$perl_name eq \"ord\"","right":"$perl_name eq \"chr\""}],[5064,{"right":"$perl_name eq \"quotemeta\"","left":"$perl_name eq \"ord\" or $perl_name eq \"chr\"","type":"or_3","op":"or"}],[5064,{"right":"$perl_name eq \"hex\"","left":"$perl_name eq \"oct\"","type":"or_3","op":"or"}],[5064,{"op":"||","type":"or_3","left":"$perl_name eq 'stat'","right":"$perl_name eq 'lstat'"}],[5064,{"op":"and","type":"and_3","left":"$perl_name eq 'stat' || $perl_name eq 'lstat'","right":"not $uses_file_stat"}],[5064,{"op":"or","type":"or_3","left":"$perl_name eq \"grep\"","right":"$perl_name eq \"map\""}],[5703,{"right":"$ValClass[$begin + 1] eq \"(\"","left":"$bracketed == 0","type":"and_3","op":"and"}],[5720,{"left":"$ValClass[0] eq 'c' && ($ValPerl[0] eq 'if' || $ValPerl[0] eq 'unless')","right":"$ValClass[0] eq 'C' && $ValPerl[0] eq 'elsif'","op":"||","type":"or_3"}],[5720,{"right":"$ValClass[$begin - 1] ne '='","left":"$begin == 0","type":"or_3","op":"||"}],[5720,{"right":"$begin == 0 || $ValClass[$begin - 1] ne '='","left":"$ValClass[0] eq 'c' && ($ValPerl[0] eq 'if' || $ValPerl[0] eq 'unless') || $ValClass[0] eq 'C' && $ValPerl[0] eq 'elsif'","type":"and_3","op":"and"}],[5732,{"op":"and","type":"and_3","left":"$perl_name eq \"map\"","right":"index(substr($TokenStr, $start, $end_pos + 1 - $start), \"A\") != -1"}],[5749,{"op":"||","type":"or_3","left":"$bracketed == 0","right":"$ValPerl[$begin + 1] eq '('"}],[5749,{"right":"$ValClass[$start] eq \"f\"","left":"$bracketed == 0 || $ValPerl[$begin + 1] eq '('","type":"and_3","op":"and"}],[5749,{"left":"$bracketed == 0 || $ValPerl[$begin + 1] eq '(' and $ValClass[$start] eq \"f\"","right":"substr($ValPy[$start], 0, 1) ne \".\"","op":"and","type":"and_3"}],[5757,{"right":"$ValPy[$start] =~ /^$ANONYMOUS_SUB\\d+[a-z]?$/","left":"$ValClass[$start] eq \"\\\"\"","type":"and_3","op":"and"}],[5765,{"op":"and","type":"and_3","left":"$start == $comma - 1","right":"$perl_name eq \"grep\""}],[5769,{"right":"substr($ValPy[$start], 0, 6 + length($DEFAULT_MATCH)) eq \"(${DEFAULT_MATCH}:=re.\"","left":"substr($ValPy[$start], 0, 3) eq \"re.\"","type":"or_3","op":"or"}],[5765,{"op":"and","type":"and_3","left":"$start == $comma - 1","right":"$ValClass[$start] eq \"f\""}],[5765,{"left":"$start == $comma - 1 and $ValClass[$start] eq \"f\"","right":"substr($ValPy[$start], 0, 1) eq \".\"","op":"and","type":"and_3"}],[5765,{"left":"$start == $comma - 1","right":"$ValClass[$start] eq \"i\"","op":"and","type":"and_3"}],[5765,{"op":"and","type":"and_3","left":"$start == $comma - 1 and $ValClass[$start] eq \"i\"","right":"$LocalSub{$ValPy[$start]}"}],[5765,{"right":"$perl_name eq \"map\"","left":"$start == $comma - 1 and $ValClass[$start] eq \"i\" and $LocalSub{$ValPy[$start]}","type":"and_3","op":"and"}],[5756,{"right":"$ValPerl[$begin + 1] eq \"(\"","left":"$bracketed == 1","type":"and_3","op":"and"}],[5792,{"type":"and_3","op":"and","right":"$ValPerl[$begin + 1] eq \"{\"","left":"$bracketed == 1"}],[5797,{"type":"and_3","op":"and","right":"$ValPerl[$end_pos + 2] eq \"(\"","left":"$ValClass[$end_pos + 2] eq \"(\""}],[5797,{"left":"$ValClass[$end_pos + 2] eq \"(\" and $ValPerl[$end_pos + 2] eq \"(\"","right":"next_same_level_token(\",\", $end_pos + 3, $limit - 1) != -1","op":"and","type":"and_3"}],[5803,{"op":"and","type":"and_3","left":"$ValClass[$comma + 1] eq \"(\"","right":"$ValPerl[$comma + 1] eq \"(\""}],[5803,{"op":"and","type":"and_3","left":"$ValClass[$comma + 1] eq \"(\" and $ValPerl[$comma + 1] eq \"(\"","right":"next_same_level_token(\",\", $end_pos + 3, $limit - 1) != -1"}],[5817,{"type":"and_3","op":"and","right":"$ValClass[$begin + 1] eq \"(\"","left":"$bracketed == 0"}],[5825,{"right":"$ValPerl[$begin + 1] eq '{'","left":"$bracketed == 1","type":"and_3","op":"&&"}],[5825,{"op":"||","type":"or_3","left":"$ValClass[$k] ne 'i'","right":"$k + 1 < $#ValClass && $ValClass[$k + 1] eq '('"}],[5825,{"left":"not $bracketed == 1 && $ValPerl[$begin + 1] eq '{'","right":"$ValClass[$k] ne 'i' || $k + 1 < $#ValClass && $ValClass[$k + 1] eq '('","op":"and","type":"and_3"}],[5836,{"op":"and","type":"and_3","left":"$bracketed == 1","right":"$ValPerl[$begin + 1] eq \"{\""}],[5841,{"type":"and_3","op":"and","right":"$ValClass[$limit] eq \"h\"","left":"$end_pos + 2 == $limit"}],[5836,{"op":"and","type":"and_3","left":"$start + 1 == $limit","right":"$ValClass[$limit] eq \"h\""}],[5854,{"type":"and_3","op":"and","right":"$ValClass[$start] eq \"i\"","left":"$bracketed == 0"}],[5854,{"right":"$LocalSub{$ValPy[$start]}","left":"$bracketed == 0 and $ValClass[$start] eq \"i\"","type":"and_3","op":"and"}],[5883,{"right":"$ValPerl[$comma + 1] eq \"{\"","left":"$ValPerl[$comma + 1] eq \"[\"","type":"or_3","op":"or"}],[5877,{"op":"and","type":"and_3","left":"index(\"isd-\\\"\", $ValClass[$comma + 1]) != -1","right":"$comma + 1 == $end_pos"}],[5877,{"right":"$ValClass[$comma + 1] eq \"\\\\\"","left":"index(\"isd-\\\"\", $ValClass[$comma + 1]) != -1 and $comma + 1 == $end_pos","type":"or_3","op":"or"}],[5905,{"type":"and_3","op":"and","right":"$ValPerl[$k] eq \"local\"","left":"$ValClass[$k] eq \"t\""}],[5918,{"right":"$ValClass[$k + 2] eq \"f\"","left":"$k + 3 <= $#ValClass","type":"and_3","op":"and"}],[5918,{"type":"and_3","op":"and","right":"$ValPerl[$k + 2] eq \"keys\"","left":"$k + 3 <= $#ValClass and $ValClass[$k + 2] eq \"f\""}],[5918,{"left":"$k + 3 <= $#ValClass and $ValClass[$k + 2] eq \"f\" and $ValPerl[$k + 2] eq \"keys\"","right":"$ValClass[$k + 3] eq \"h\"","op":"and","type":"and_3"}],[5918,{"op":"and","type":"and_3","left":"$k + 3 <= $#ValClass and $ValClass[$k + 2] eq \"f\" and $ValPerl[$k + 2] eq \"keys\" and $ValClass[$k + 3] eq \"h\"","right":"$ValPerl[$k]"}],[5999,{"op":"and","type":"and_3","left":"exists $VarType{$u}","right":"exists $VarType{$u}{$CurSub}"}],[6002,{"right":"$sval ne $val","left":"defined $val","type":"and_3","op":"and"}],[6015,{"type":"and_3","op":"and","right":"exists $VarType{$u}{$CurSub}","left":"exists $VarType{$u}"}],[5064,{"op":"or","type":"or_3","left":"$perl_name eq \"chomp\"","right":"$perl_name eq \"chop\""}],[6038,{"op":"or","type":"or_3","left":"$ValClass[$start] eq \"a\"","right":"$ValClass[$start] eq \"h\""}],[6035,{"left":"$ValClass[$start] eq \"f\"","right":"$ValPy[$start] eq $CONVERTER_MAP{'S'}","op":"and","type":"and_3"}],[6035,{"type":"and_3","op":"and","right":"matching_br($start + 1) == $end_pos","left":"$ValClass[$start] eq \"f\" and $ValPy[$start] eq $CONVERTER_MAP{'S'}"}],[6055,{"right":"$ValPy[$start + 2] eq '_set_element'","left":"$ValPy[$start + 2] eq '_assign_global'","type":"or_3","op":"||"}],[6055,{"right":"$ValPy[$start + 2] eq '_assign_global' || $ValPy[$start + 2] eq '_set_element'","left":"$ValClass[$start + 2] eq \"f\"","type":"and_3","op":"and"}],[6071,{"op":"and","type":"and_3","left":"$ValClass[$i] eq \"f\"","right":"$ValPy[$i] eq $CONVERTER_MAP{'S'}"}],[6100,{"left":"$of0 == $of1","right":"$ValClass[$of0] eq \"a\"","op":"and","type":"and_3"}],[6100,{"right":"not $ValPerl[$of0] =~ /^len\\(/","left":"$of0 == $of1 and $ValClass[$of0] eq \"a\"","type":"and_3","op":"and"}],[6116,{"type":"and_3","op":"and","right":"$ValClass[$ls0] eq \"a\"","left":"$ls0 == $ls1"}],[6126,{"type":"or_3","op":"or","right":"$py_name eq \"$PERLLIB.reverse_scalar\"","left":"substr($py_name, 0, 1) eq \"_\""}],[6128,{"type":"and_3","op":"and","right":"$ValClass[$start] =~ /([as])/","left":"$start == $end_pos"}],[6143,{"left":"$ValClass[$start] ne \"(\"","right":"next_same_level_token(\",\", $start, $end_pos) >= 0","op":"and","type":"and_3"}],[6153,{"right":"$ValClass[$start] eq \"h\"","left":"$start == $end_pos","type":"and_3","op":"and"}],[5064,{"type":"or_3","op":"or","right":"$perl_name eq \"getopts\"","left":"$perl_name eq \"getopt\""}],[5064,{"right":"$bracketed == 1","left":"$perl_name eq \"GetOptions\"","type":"and_3","op":"and"}],[5064,{"right":"my $type = GetOptionsHandled($start, $end_pos)","left":"$perl_name eq \"GetOptions\" and $bracketed == 1","type":"and_3","op":"and"}],[6175,{"left":"not defined $ly","right":"$ValClass[$ly] ne \"\\\"\"","op":"or","type":"or_3"}],[6181,{"right":"$layer eq \":bytes\"","left":"$layer eq \":raw\"","type":"or_3","op":"or"}],[5064,{"type":"or_3","op":"or","right":"$perl_name eq \"fdopen\"","left":"$perl_name eq \"IOFile_open\""}],[5064,{"op":"or","type":"or_3","left":"$py_name eq \".read\"","right":"$py_name eq \".sysread\""}],[6358,{"type":"and_3","op":"and","right":"$ValPy[$start] eq $CONVERTER_MAP{'S'}","left":"$ValClass[$start] eq \"f\""}],[6365,{"right":"index($ValPy[$text_s], \".\") == -1","left":"$text_s == $text_e","type":"and_3","op":"and"}],[6445,{"type":"and_3","op":"and","right":"$ValPy[0] eq \"for\"","left":"$perl_name eq \"keys\""}],[6450,{"left":"$perl_name eq \"keys\"","right":"$ValPy[0] eq \"for\"","op":"and","type":"and_3"}],[5064,{"right":"$ValClass[$start] eq \"d\"","left":"$py_name eq \"math.exp\"","type":"and_3","op":"and"}],[5064,{"op":"and","type":"and_3","left":"$py_name eq \"math.exp\" and $ValClass[$start] eq \"d\"","right":"$ValPy[$start] >= 710"}],[6463,{"right":"$ValClass[$start] eq \"s\"","left":"$begin == 0","type":"and_3","op":"and"}],[6463,{"type":"and_3","op":"and","right":"end_of_variable($start) == $end","left":"$begin == 0 and $ValClass[$start] eq \"s\""}],[6474,{"type":"and_3","op":"and","right":"$ValClass[$end_pos] eq \"\\\"\"","left":"$comma + 1 == $end_pos"}],[6474,{"type":"and_3","op":"and","right":"substr($ValPy[$end_pos], 0, 1) eq \"'\"","left":"$comma + 1 == $end_pos and $ValClass[$end_pos] eq \"\\\"\""}],[6489,{"type":"or_3","op":"||","right":"expression_uses_builtin_types($begin)","left":"$ValClass[$start] eq '\\\\'"}],[6489,{"right":"$ValClass[$start] eq '\\\\' || expression_uses_builtin_types($begin)","left":"$py_name eq \"_ref\"","type":"and_3","op":"and"}],[6489,{"left":"$ValClass[$start] eq '\\\\'","right":"expression_uses_builtin_types($begin)","op":"||","type":"or_3"}],[6489,{"type":"and_3","op":"and","right":"$ValClass[$start] eq '\\\\' || expression_uses_builtin_types($begin)","left":"$py_name eq \"$PERLLIB.ref\""}],[6496,{"right":"$end_pos < $start","left":"$bracketed == -1","type":"or_3","op":"or"}],[6504,{"op":"and","type":"and_3","left":"$py_name ne \"len\"","right":"$perl_name ne \"ref\""}],[6504,{"op":"and","type":"and_3","left":"$py_name ne \"len\" and $perl_name ne \"ref\"","right":"$perl_name ne \"each\""}],[6504,{"left":"$py_name ne \"len\" and $perl_name ne \"ref\" and $perl_name ne \"each\"","right":"$py_name ne \"_get_element\"","op":"and","type":"and_3"}],[6504,{"type":"and_3","op":"and","right":"need_splat($start)","left":"$py_name ne \"len\" and $perl_name ne \"ref\" and $perl_name ne \"each\" and $py_name ne \"_get_element\""}],[6532,{"type":"and_3","op":"and","right":"substr($ValPy[$k], 0, 4) ne \"len(\"","left":"$ValClass[$k] eq \"a\""}],[6533,{"op":"and","type":"and_3","left":"$ValClass[$k] eq \"f\"","right":"substr(&Pythonizer::func_type($ValPerl[$k], $ValPy[$k]), 0, 1) eq \"a\""}],[6542,{"left":"$k + 2 <= $#ValClass","right":"$ValClass[$k + 1] eq \"~\"","op":"and","type":"and_3"}],[6542,{"left":"$k + 2 <= $#ValClass and $ValClass[$k + 1] eq \"~\"","right":"$ValClass[$k + 2] eq \"q\"","op":"and","type":"and_3"}],[6533,{"type":"and_3","op":"and","right":"$ValPy[$k] =~ /\\.split\\(\\)$/","left":"$ValClass[$k] eq \"q\""}],[6555,{"type":"or_3","op":"or","right":"substr($ValPy[$start], 0, 1) eq \"f\"","left":"$ValClass[$start] ne \"\\\"\""}],[6591,{"type":"and_3","op":"and","right":"exists $Perlscan::NameMap{\"opt_$c\"}{'$'}","left":"exists $Perlscan::NameMap{\"opt_$c\"}"}],[6617,{"type":"and_3","op":"and","right":"$ValClass[$start + 1] eq \"h\"","left":"$ValClass[$start] eq \"\\\\\""}],[6628,{"type":"and_3","op":"and","right":"$ValClass[$i + 3] ne \"a\"","left":"$ValClass[$i + 3] ne \"s\""}],[6629,{"op":"and","type":"and_3","left":"$ValClass[$i + 4] ne \",\"","right":"$ValClass[$i + 4] ne \")\""}],[6672,{"type":"or_3","op":"or","right":"$typ eq \"float\"","left":"$typ eq \"int\""}],[6691,{"type":"or_3","op":"or","right":"$arr =~ /{,}/","left":"$arr =~ /{,\\d+}/"}],[6712,{"op":"or","type":"or_3","left":"$op eq \"!\"","right":"$op eq \"\""}],[6739,{"right":"$typ eq \"float\"","left":"$typ eq \"int\"","type":"or_3","op":"or"}],[6749,{"op":"or","type":"or_3","left":"$arr eq \"%\"","right":"$ValClass[$i + 3] eq \"h\""}],[6760,{"left":"$arr =~ /{,\\d+}/","right":"$arr =~ /{,}/","op":"or","type":"or_3"}],[6783,{"type":"or_3","op":"or","right":"$op eq \"\"","left":"$op eq \"!\""}],[6842,{"left":"$k + 1 <= $#ValClass","right":"$ValClass[$k + 1] eq \",\"","op":"and","type":"and_3"}],[6857,{"type":"or_3","op":"or","right":"$ValClass[$k] eq \"s\"","left":"$ValClass[$k] eq \"\\\"\""}],[6857,{"type":"and_3","op":"and","right":"$LocalSub{$ValPy[$k]}","left":"$ValClass[$k] eq \"i\""}],[6887,{"right":"$open_mode eq \"\"","left":"defined $open_mode","type":"and_3","op":"and"}],[6887,{"type":"and_3","op":"and","right":"$ValPy[$k] =~ /^['\"]/","left":"defined $open_mode and $open_mode eq \"\""}],[6842,{"left":"$ValClass[$k] eq \"i\"","right":"$LocalSub{$ValPy[$k]}","op":"and","type":"and_3"}],[6916,{"op":"or","type":"or_3","left":"$ext eq \"raw\"","right":"$ext eq \"bytes\""}],[6940,{"left":"$k == $end_pos","right":"$ValClass[$k] eq \"i\"","op":"and","type":"and_3"}],[6956,{"op":"and","type":"and_3","left":"$mode ne \"s\"","right":"not $handle =~ /^[A-Za-z0-9_]+$/"}],[7040,{"left":"$ValClass[$k] eq \"i\"","right":"$LocalSub{$ValPy[$k]}","op":"and","type":"and_3"}],[7053,{"type":"and_3","op":"and","right":"not $handle =~ /^[A-Za-z0-9_]+$/","left":"$mode ne \"s\""}],[7165,{"type":"or_3","op":"or","right":"$TrStatus < 0","left":"$begin < 0"}],[7186,{"right":"matching_br($begin) == $limit","left":"$ValClass[$begin] eq \"(\"","type":"and_3","op":"and"}],[7200,{"op":"or","type":"or_3","left":"$mode == 2","right":"$mode == 3"}],[7202,{"left":"$ValClass[$begin] eq \"(\"","right":"$ValPerl[$begin] eq \"(\"","op":"and","type":"and_3"}],[7220,{"type":"and_3","op":"and","right":"$ValPerl[$begin] eq \"(\"","left":"$ValClass[$begin] eq \"(\""}],[7220,{"type":"and_3","op":"and","right":"matching_br($begin) == $begin + 1","left":"$ValClass[$begin] eq \"(\" and $ValPerl[$begin] eq \"(\""}],[7220,{"right":"$begin + 1 != $#ValClass","left":"$ValClass[$begin] eq \"(\" and $ValPerl[$begin] eq \"(\" and matching_br($begin) == $begin + 1","type":"and_3","op":"and"}],[7220,{"type":"and_3","op":"and","right":"$ValClass[$begin + 2] ne \":\"","left":"$ValClass[$begin] eq \"(\" and $ValPerl[$begin] eq \"(\" and matching_br($begin) == $begin + 1 and $begin + 1 != $#ValClass"}],[7220,{"right":"!($ValClass[$begin - 1] =~ /[fi]/)","left":"$begin == 0","type":"or_3","op":"||"}],[7220,{"left":"$ValClass[$begin] eq \"(\" and $ValPerl[$begin] eq \"(\" and matching_br($begin) == $begin + 1 and $begin + 1 != $#ValClass and $ValClass[$begin + 2] ne \":\"","right":"$begin == 0 || !($ValClass[$begin - 1] =~ /[fi]/)","op":"and","type":"and_3"}],[7228,{"left":"$ValClass[$begin] eq \"(\"","right":"matching_br($begin) == $limit","op":"and","type":"and_3"}],[7234,{"left":"$ValClass[$i] eq \"(\"","right":"$ValPy[$i] eq \"[\"","op":"and","type":"and_3"}],[7234,{"op":"and","type":"and_3","left":"$ValClass[$i] eq \"(\" and $ValPy[$i] eq \"[\"","right":"$ValPerl[$i] eq \"{\""}],[7234,{"left":"$ValClass[$i] eq \"(\" and $ValPy[$i] eq \"[\" and $ValPerl[$i] eq \"{\"","right":"$i - 1 != 0","op":"and","type":"and_3"}],[7234,{"left":"$ValClass[$i] eq \"(\" and $ValPy[$i] eq \"[\" and $ValPerl[$i] eq \"{\" and $i - 1 != 0","right":"$ValClass[$i - 1] ne \"f\"","op":"and","type":"and_3"}],[7250,{"type":"or_3","op":"||","right":"$ValPerl[$f] =~ /push|unshift/ && $l < next_same_level_token(',', $f, $#ValClass)","left":"$ValPerl[$f] =~ /keys|values/"}],[7250,{"left":"($f = index($TokenStr, \"f\")) != -1","right":"$ValPerl[$f] =~ /keys|values/ || $ValPerl[$f] =~ /push|unshift/ && $l < next_same_level_token(',', $f, $#ValClass)","op":"and","type":"and_3"}],[7254,{"type":"and_3","op":"and","right":"not last_subscript($i, $l)","left":"$autovivification"}],[7255,{"left":"$autovivification","right":"in_x_element_call($i)","op":"and","type":"and_3"}],[7256,{"left":"$autovivification","right":"$ValClass[0] eq \"c\"","op":"and","type":"and_3"}],[7256,{"right":"$ValPy[0] eq \"for\"","left":"$autovivification and $ValClass[0] eq \"c\"","type":"and_3","op":"and"}],[7257,{"right":"same_as_lhs($l)","left":"$autovivification","type":"and_3","op":"and"}],[7258,{"op":"and","type":"and_3","left":"$i == $begin","right":"end_of_variable($i + 1) == $l - 1"}],[7275,{"op":"and","type":"and_3","left":"$mode == 1","right":"$bracketed == 0"}],[7275,{"type":"and_3","op":"and","right":"$ValClass[$begin] eq \"(\"","left":"$mode == -1"}],[7275,{"right":"$ValClass[$limit] eq \")\"","left":"$mode == -1 and $ValClass[$begin] eq \"(\"","type":"and_3","op":"and"}],[7283,{"left":"substr($TokenStr, $begin) =~ /^d\\*d\\*d/","right":"$ValPy[$begin] == 9","op":"and","type":"and_3"}],[7283,{"right":"$ValPy[$begin + 1] eq \"**\"","left":"substr($TokenStr, $begin) =~ /^d\\*d\\*d/ and $ValPy[$begin] == 9","type":"and_3","op":"and"}],[7283,{"type":"and_3","op":"and","right":"$ValPy[$begin + 2] == 9","left":"substr($TokenStr, $begin) =~ /^d\\*d\\*d/ and $ValPy[$begin] == 9 and $ValPy[$begin + 1] eq \"**\""}],[7283,{"left":"substr($TokenStr, $begin) =~ /^d\\*d\\*d/ and $ValPy[$begin] == 9 and $ValPy[$begin + 1] eq \"**\" and $ValPy[$begin + 2] == 9","right":"$ValPy[$begin + 3] eq \"**\"","op":"and","type":"and_3"}],[7283,{"type":"and_3","op":"and","right":"$ValPy[$begin + 4] == 9","left":"substr($TokenStr, $begin) =~ /^d\\*d\\*d/ and $ValPy[$begin] == 9 and $ValPy[$begin + 1] eq \"**\" and $ValPy[$begin + 2] == 9 and $ValPy[$begin + 3] eq \"**\""}],[7292,{"left":"$cur_pos < 0","right":"$TrStatus < 0","op":"or","type":"or_3"}],[7302,{"type":"and_3","op":"and","right":"$ValPerl[$pos] ne \"~\"","left":"$ValClass[$pos] eq \"~\""}],[7309,{"op":"and","type":"and_3","left":"$match + 1 <= $#ValClass","right":"$ValClass[$cur_pos + 1] eq \"f\""}],[7309,{"left":"$match + 1 <= $#ValClass and $ValClass[$cur_pos + 1] eq \"f\"","right":"$ValPerl[$cur_pos + 1] eq \"ref\"","op":"and","type":"and_3"}],[7309,{"type":"and_3","op":"and","right":"$ValClass[$match + 1] eq \"D\"","left":"$match + 1 <= $#ValClass and $ValClass[$cur_pos + 1] eq \"f\" and $ValPerl[$cur_pos + 1] eq \"ref\""}],[7316,{"op":"and","type":"and_3","left":"$match == $cur_pos + 1","right":"$ValPy[$cur_pos] eq \"(\""}],[7326,{"type":"and_3","op":"and","right":"$mode == -1","left":"$cur_pos == $begin"}],[7307,{"op":"and","type":"and_3","left":"$ValClass[$cur_pos] =~ /[ahs]/","right":"$cur_pos + 1 < $limit"}],[7307,{"type":"and_3","op":"and","right":"$ValPy[$cur_pos + 1] eq \":=\"","left":"$ValClass[$cur_pos] =~ /[ahs]/ and $cur_pos + 1 < $limit"}],[7307,{"type":"and_3","op":"and","right":"$mode != 1","left":"$ValClass[$cur_pos] =~ /[ahs]/ and $cur_pos + 1 < $limit and $ValPy[$cur_pos + 1] eq \":=\""}],[7307,{"right":"($limit + 1 > $#ValPy || $ValPy[$limit + 1] eq ')')","left":"($cur_pos == 0 || $ValPy[$cur_pos - 1] eq '(')","type":"and_3","op":"&&"}],[7307,{"type":"and_3","op":"and","right":"not +($cur_pos == 0 || $ValPy[$cur_pos - 1] eq '(') && ($limit + 1 > $#ValPy || $ValPy[$limit + 1] eq ')')","left":"$ValClass[$cur_pos] =~ /[ahs]/ and $cur_pos + 1 < $limit and $ValPy[$cur_pos + 1] eq \":=\" and $mode != 1"}],[7378,{"type":"and_3","op":"and","right":"$ValClass[$cur_pos + 1] eq \"=\"","left":"$cur_pos + 1 <= $end_pos"}],[7378,{"right":"exists $SpecialVarR2L{$ValPy[$cur_pos]}","left":"$cur_pos + 1 <= $end_pos and $ValClass[$cur_pos + 1] eq \"=\"","type":"and_3","op":"and"}],[7382,{"right":"$ValClass[$cur_pos] eq \"s\"","left":"$end_pos - $cur_pos >= 2","type":"and_3","op":"and"}],[7382,{"right":"$ValClass[$cur_pos + 1] eq \"=\"","left":"$end_pos - $cur_pos >= 2 and $ValClass[$cur_pos] eq \"s\"","type":"and_3","op":"and"}],[7382,{"right":"$ValClass[$cur_pos + 2] eq \"f\"","left":"$end_pos - $cur_pos >= 2 and $ValClass[$cur_pos] eq \"s\" and $ValClass[$cur_pos + 1] eq \"=\"","type":"and_3","op":"and"}],[7385,{"left":"inParens($cur_pos)","right":"$ValPy[$cur_pos + 1] eq \"=\"","op":"and","type":"and_3"}],[7382,{"op":"and","type":"and_3","left":"$end_pos - $cur_pos > 1","right":"($split = next_same_level_token(\"~\", $cur_pos, $end_pos)) > -1"}],[7382,{"right":"$split <= $end_pos","left":"$end_pos - $cur_pos > 1 and ($split = next_same_level_token(\"~\", $cur_pos, $end_pos)) > -1","type":"and_3","op":"and"}],[7382,{"left":"$end_pos - $cur_pos > 1 and ($split = next_same_level_token(\"~\", $cur_pos, $end_pos)) > -1 and $split <= $end_pos","right":"$ValPerl[$split] ne \"~\"","op":"and","type":"and_3"}],[7307,{"type":"and_3","op":"and","right":"$ValClass[$cur_pos] eq \"i\"","left":"$cur_pos < $#ValClass"}],[7307,{"right":"$ValClass[$cur_pos + 1] eq \"(\"","left":"$cur_pos < $#ValClass and $ValClass[$cur_pos] eq \"i\"","type":"and_3","op":"and"}],[7408,{"op":"and","type":"and_3","left":"$end_pos + 1 <= $limit","right":"$ValClass[$end_pos + 1] eq \"~\""}],[7408,{"op":"and","type":"and_3","left":"$end_pos + 1 <= $limit and $ValClass[$end_pos + 1] eq \"~\"","right":"$ValPerl[$end_pos + 1] ne \"~\""}],[7444,{"left":"exists $SubAttributes{$ValPy[$sub_pos]}{'wantarray'}","right":"list_or_scalar_context($sub_pos, $limit) == 1","op":"and","type":"and_3"}],[7455,{"op":"and","type":"and_3","left":"exists $SubAttributes{$ValPy[$sub_pos]}{'wantarray'}","right":"list_or_scalar_context($sub_pos, $limit) == 1"}],[7466,{"type":"or_3","op":"or","right":"$ValClass[$cur_pos - 1] ne \"D\"","left":"$cur_pos == 0"}],[7472,{"op":"and","type":"and_3","left":"$ValClass[$cur_pos + 1] eq \"(\"","right":"$ValPerl[$cur_pos + 1] ne \"(\""}],[7479,{"type":"and_3","op":"and","right":"list_or_scalar_context($cur_pos, $limit) == 1","left":"exists $SubAttributes{$ValPy[$cur_pos]}{'wantarray'}"}],[7307,{"left":"$ValClass[$cur_pos] eq \"i\"","right":"not inDotOp($cur_pos)","op":"and","type":"and_3"}],[7493,{"right":"$ValClass[$pos] eq \"~\"","left":"$pos > -1","type":"and_3","op":"and"}],[7493,{"type":"and_3","op":"and","right":"$ValPerl[$pos] ne \"~\"","left":"$pos > -1 and $ValClass[$pos] eq \"~\""}],[7493,{"left":"$LocalSub{$ValPy[$cur_pos]} || $ValPerl[$cur_pos] =~ /::/ || in_boolean_context($cur_pos) && !$Constants{$ValPy[$cur_pos]} && substr($ValPerl[$cur_pos], 0, 1) ne '-'","right":"$cur_pos + 1 <= $#ValClass && $ValClass[$cur_pos + 1] =~ /[ahsd\"]/","op":"||","type":"or_3"}],[7493,{"op":"||","type":"or_3","left":"$cur_pos + 1 > $#ValClass","right":"$ValPerl[$cur_pos + 1] ne '=>'"}],[7493,{"type":"and_3","op":"and","right":"$cur_pos + 1 > $#ValClass || $ValPerl[$cur_pos + 1] ne '=>'","left":"$LocalSub{$ValPy[$cur_pos]} || $ValPerl[$cur_pos] =~ /::/ || in_boolean_context($cur_pos) && !$Constants{$ValPy[$cur_pos]} && substr($ValPerl[$cur_pos], 0, 1) ne '-' || $cur_pos + 1 <= $#ValClass && $ValClass[$cur_pos + 1] =~ /[ahsd\"]/"}],[7500,{"right":"$ValClass[$cur_pos + 1] eq \"i\"","left":"$cur_pos + 1 <= $end_pos","type":"and_3","op":"and"}],[7500,{"left":"$cur_pos + 1 <= $end_pos and $ValClass[$cur_pos + 1] eq \"i\"","right":"not $LocalSub{$ValPy[$cur_pos + 1]}","op":"and","type":"and_3"}],[7500,{"right":"not $Constants{$ValPy[$cur_pos + 1]}","left":"$cur_pos + 1 <= $end_pos and $ValClass[$cur_pos + 1] eq \"i\" and not $LocalSub{$ValPy[$cur_pos + 1]}","type":"and_3","op":"and"}],[7505,{"right":"$ValClass[$cur_pos + 1] eq \"(\"","left":"$cur_pos + 1 <= $end_pos","type":"and_3","op":"and"}],[7505,{"type":"and_3","op":"and","right":"$ValPerl[$cur_pos + 1] eq \"(\"","left":"$cur_pos + 1 <= $end_pos and $ValClass[$cur_pos + 1] eq \"(\""}],[7517,{"type":"and_3","op":"and","right":"$ValClass[$cur_pos - 1] eq \"\\\\\"","left":"$cur_pos != 0"}],[7531,{"right":"exists $SubAttributes{$ValPy[$cur_pos]}{'wantarray'}","left":"not $skip_parens","type":"and_3","op":"and"}],[7531,{"left":"not $skip_parens and exists $SubAttributes{$ValPy[$cur_pos]}{'wantarray'}","right":"list_or_scalar_context($cur_pos, $limit) == 1","op":"and","type":"and_3"}],[7493,{"op":"and","type":"and_3","left":"$cur_pos + 1 <= $#ValClass","right":"$ValClass[$cur_pos + 1] eq \"i\""}],[7543,{"left":"$ValClass[$last_i] ne \"i\"","right":"$ValClass[$last_i] ne \"D\"","op":"and","type":"and_3"}],[7547,{"right":"$ValClass[$last_i] eq \"i\"","left":"$last_i <= $#ValClass","type":"and_3","op":"and"}],[7307,{"type":"and_3","op":"and","right":"$cur_pos != 0","left":"$ValClass[$cur_pos] eq \"i\""}],[7307,{"left":"$ValClass[$cur_pos] eq \"i\" and $cur_pos != 0","right":"$ValClass[$cur_pos - 1] eq \"D\"","op":"and","type":"and_3"}],[7307,{"type":"or_3","op":"||","right":"$ValClass[$cur_pos + 1] ne '(' && $ValClass[$cur_pos + 1] ne 'D'","left":"$cur_pos + 1 > $#ValClass"}],[7307,{"right":"$cur_pos + 1 > $#ValClass || $ValClass[$cur_pos + 1] ne '(' && $ValClass[$cur_pos + 1] ne 'D'","left":"$ValClass[$cur_pos] eq \"i\" and $cur_pos != 0 and $ValClass[$cur_pos - 1] eq \"D\"","type":"and_3","op":"and"}],[7558,{"op":"and","type":"and_3","left":"exists $SubAttributes{$ValPy[$cur_pos]}{'wantarray'}","right":"list_or_scalar_context($cur_pos, $limit) == 1"}],[7307,{"right":"$cur_pos + 1 <= $#ValClass","left":"$ValClass[$cur_pos] eq \"&\"","type":"and_3","op":"and"}],[7307,{"op":"and","type":"and_3","left":"$ValClass[$cur_pos] eq \"&\" and $cur_pos + 1 <= $#ValClass","right":"$ValClass[$cur_pos + 1] eq \"s\""}],[7307,{"left":"$cur_pos == 0","right":"index('difs)', $ValClass[$cur_pos - 1]) == -1","op":"||","type":"or_3"}],[7307,{"op":"and","type":"and_3","left":"$ValClass[$cur_pos] eq \"&\" and $cur_pos + 1 <= $#ValClass and $ValClass[$cur_pos + 1] eq \"s\"","right":"$cur_pos == 0 || index('difs)', $ValClass[$cur_pos - 1]) == -1"}],[7576,{"op":"or","type":"or_3","left":"$cur_pos + 2 > $#ValClass","right":"$ValClass[$cur_pos + 2] ne \"(\""}],[7307,{"op":"||","type":"or_3","left":"$cur_pos == 0 || $ValClass[$cur_pos - 1] eq '('","right":"$ValClass[$cur_pos - 1] eq 'f' && $ValPy[$cur_pos - 1] eq 'print'"}],[7307,{"right":"$cur_pos == 0 || $ValClass[$cur_pos - 1] eq '(' || $ValClass[$cur_pos - 1] eq 'f' && $ValPy[$cur_pos - 1] eq 'print'","left":"$ValClass[$cur_pos] eq \"+\"","type":"and_3","op":"and"}],[7307,{"op":"and","type":"and_3","left":"$ValClass[$cur_pos] eq \"k\"","right":"$ValPerl[$cur_pos] eq \"sub\""}],[7590,{"right":"$ValPerl[$i] eq \"die\"","left":"$ValClass[$i] eq \"f\"","type":"and_3","op":"and"}],[7307,{"type":"and_3","op":"and","right":"$cur_pos != 0","left":"$ValClass[$cur_pos] eq \"k\""}],[7616,{"op":"or","type":"or_3","left":"$ValPerl[$cur_pos] eq \"next\"","right":"$ValPerl[$cur_pos] eq \"last\""}],[7622,{"op":"and","type":"and_3","left":"$cur_pos + 1 <= $end_pos","right":"$ValClass[$cur_pos + 1] eq \"i\""}],[7636,{"op":"and","type":"and_3","left":"&Perlscan::in_BEGIN()","right":"not &Perlscan::in_sub()"}],[7616,{"right":"$ValPerl[$cur_pos] eq \"require\"","left":"$ValPerl[$cur_pos] eq \"use\"","type":"or_3","op":"or"}],[7616,{"op":"or","type":"or_3","left":"$ValPerl[$cur_pos] eq \"use\" or $ValPerl[$cur_pos] eq \"require\"","right":"$ValPerl[$cur_pos] eq \"no\""}],[7307,{"type":"and_3","op":"and","right":"$ValPy[$cur_pos] eq \"=\"","left":"$ValClass[$cur_pos] eq \"=\""}],[7307,{"type":"and_3","op":"and","right":"inParens($cur_pos)","left":"$ValClass[$cur_pos] eq \"=\" and $ValPy[$cur_pos] eq \"=\""}],[7307,{"type":"and_3","op":"and","right":"$cur_pos == $#ValClass","left":"$ValClass[$cur_pos] eq \",\""}],[7307,{"type":"and_3","op":"and","right":"substr($ValPy[$cur_pos], 0, 9) eq \"re.search\"","left":"$ValClass[$cur_pos] eq \"q\""}],[7307,{"right":"$ValPy[$cur_pos] =~ /re\\.G/","left":"$ValClass[$cur_pos] eq \"q\" and substr($ValPy[$cur_pos], 0, 9) eq \"re.search\"","type":"and_3","op":"and"}],[7307,{"left":"$ValClass[$cur_pos] eq \"\\\\\"","right":"$cur_pos + 1 <= $#ValClass","op":"and","type":"and_3"}],[7307,{"left":"$ValClass[$cur_pos] eq \"\\\\\" and $cur_pos + 1 <= $#ValClass","right":"$ValClass[$cur_pos + 1] eq \"s\"","op":"and","type":"and_3"}],[7307,{"type":"and_3","op":"and","right":"$cur_pos + 1 <= $#ValClass","left":"$ValClass[$cur_pos] eq \"\\\"\""}],[7307,{"op":"and","type":"and_3","left":"$ValClass[$cur_pos] eq \"\\\"\" and $cur_pos + 1 <= $#ValClass","right":"$ValClass[$cur_pos + 1] eq \"D\""}],[7702,{"type":"and_3","op":"and","right":"$bracketed == 0","left":"$mode == 1"}],[7797,{"op":"and","type":"and_3","left":"$op_pos == 0","right":"not has_comma_operator($start, $limit)"}],[7804,{"left":"$op_pos + 1 <= $#ValClass","right":"$ValClass[$op_pos + 1] eq \"s\"","op":"and","type":"and_3"}],[7807,{"op":"and","type":"and_3","left":"$lvalue_end + 1 <= $#ValClass","right":"$ValClass[$lvalue_end + 1] eq \"(\""}],[7821,{"type":"or_3","op":"||","right":"$ValClass[$lvalue_end - 1] eq ';'","left":"$lvalue_start == 0 && $lvalue_end == 0"}],[7821,{"type":"and_3","op":"and","right":"$op_pos == $limit","left":"$lvalue_start == 0 && $lvalue_end == 0 || $ValClass[$lvalue_end - 1] eq ';'"}],[7831,{"op":"and","type":"and_3","left":"$lvalue_start != 0","right":"$ValClass[$lvalue_start - 1] eq \"i\""}],[7831,{"op":"and","type":"and_3","left":"$lvalue_start != 0 and $ValClass[$lvalue_start - 1] eq \"i\"","right":"$ValClass[$lvalue_start] ne \"(\""}],[7831,{"left":"$lvalue_start != 0 and $ValClass[$lvalue_start - 1] eq \"i\" and $ValClass[$lvalue_start] ne \"(\"","right":"$LocalSub{$ValPy[$lvalue_start - 1]}","op":"and","type":"and_3"}],[7905,{"right":"$op_pos == 0","left":"$pre_op","type":"and_3","op":"and"}],[7905,{"type":"and_3","op":"and","right":"$lvalue_end == $#ValClass","left":"$pre_op and $op_pos == 0"}],[7905,{"op":"and","type":"and_3","left":"not $pre_op","right":"$lvalue_start == 0"}],[7905,{"op":"and","type":"and_3","left":"not $pre_op and $lvalue_start == 0","right":"$op_pos == $#ValClass"}],[8115,{"op":"||","type":"or_3","left":"$ValPerl[$end_pos] eq ']'","right":"$ValPerl[$end_pos] eq '}'"}],[8115,{"type":"and_3","op":"and","right":"$ValPerl[$end_pos] eq ']' || $ValPerl[$end_pos] eq '}'","left":"$ValClass[$end_pos] eq \")\""}],[8122,{"op":"and","type":"and_3","left":"$end_pos - 2 >= 0","right":"$ValClass[$end_pos - 1] eq \"D\""}],[8122,{"type":"and_3","op":"and","right":"($end_pos - 2 >= 0 and $ValClass[$end_pos - 1] eq \"D\")","left":"$ValClass[$end_pos] eq \"i\""}],[8143,{"right":"$ValClass[$pos] eq \"(\"","left":"$pos <= $#ValClass","type":"and_3","op":"and"}],[8173,{"type":"and_3","op":"and","right":"$ValClass[$of0] eq \"d\"","left":"defined $of0"}],[8173,{"left":"defined $of0 and $ValClass[$of0] eq \"d\"","right":"$ValPy[$of0] eq 0","op":"and","type":"and_3"}],[8269,{"op":"or","type":"or_3","left":"$eq1 < 0","right":"$ValClass[$eq1] ne \"=\""}],[8271,{"type":"or_3","op":"or","right":"$ValClass[$eq2] ne \"=\"","left":"$eq2 < 0"}],[8278,{"left":"$eqn < 0","right":"$ValClass[$eqn] ne \"=\"","op":"or","type":"or_3"}],[8282,{"left":"$eqn >= 0","right":"$ValClass[$eqn] ne \"=\"","op":"and","type":"and_3"}],[8287,{"left":"$ValClass[$i] =~ /[asG]/","right":"$ValClass[$i + 1] eq \"=\"","op":"and","type":"and_3"}],[8287,{"left":"$ValClass[$i] eq \"(\"","right":"$ValClass[$i + 1] eq \")\"","op":"and","type":"and_3"}],[8287,{"left":"$ValClass[$i] eq \"(\" and $ValClass[$i + 1] eq \")\"","right":"$ValClass[$i + 2] eq \"=\"","op":"and","type":"and_3"}],[8301,{"right":"$TokenStr =~ /=\\(\\)=/","left":"$yup","type":"or_3","op":"or"}],[8326,{"op":"or","type":"or_3","left":"$start == 0","right":"$ValClass[$start - 1] ne \"(\""}],[8326,{"right":"$ValPerl[$start - 1] ne \"(\"","left":"$start == 0 or $ValClass[$start - 1] ne \"(\"","type":"or_3","op":"or"}],[8326,{"right":"$ValClass[$end_pos + 1] ne \")\"","left":"$start == 0 or $ValClass[$start - 1] ne \"(\" or $ValPerl[$start - 1] ne \"(\"","type":"or_3","op":"or"}],[8326,{"right":"$ValPerl[$end_pos + 1] ne \")\"","left":"$start == 0 or $ValClass[$start - 1] ne \"(\" or $ValPerl[$start - 1] ne \"(\" or $ValClass[$end_pos + 1] ne \")\"","type":"or_3","op":"or"}],[8346,{"right":"$pos + 1 <= $#ValClass","left":"$ValClass[$pos] ne \",\"","type":"and_3","op":"and"}],[8346,{"op":"and","type":"and_3","left":"$ValClass[$pos] ne \",\" and $pos + 1 <= $#ValClass","right":"$ValPerl[$pos + 1] eq \"(\""}],[8353,{"right":"$ValClass[$pos + 1] ne '('","left":"$pos + 1 > $end","type":"or_3","op":"||"}],[8353,{"right":"$pos + 1 > $end || $ValClass[$pos + 1] ne '('","left":"$ValClass[$pos] eq \"i\"","type":"and_3","op":"and"}],[8354,{"op":"and","type":"and_3","left":"$ValClass[$pos] eq \"f\"","right":"$pos + 1 <= $#ValClass"}],[8354,{"type":"and_3","op":"and","right":"$ValPerl[$pos + 1] ne \"(\"","left":"$ValClass[$pos] eq \"f\" and $pos + 1 <= $#ValClass"}],[8362,{"left":"$pos > 0","right":"$ValClass[$pos] eq ','","op":"&&","type":"and_3"}],[8371,{"type":"and_3","op":"and","right":"$ValClass[0] =~ /[ashG]/","left":"$pos == 1"}],[8371,{"left":"$pos == 1 and $ValClass[0] =~ /[ashG]/","right":"not has_comma_operator(2, $#ValClass)","op":"and","type":"and_3"}],[8372,{"left":"$pos == 2","right":"$ValClass[0] eq \"t\"","op":"and","type":"and_3"}],[8372,{"type":"and_3","op":"and","right":"$ValClass[1] =~ /[ashG]/","left":"$pos == 2 and $ValClass[0] eq \"t\""}],[8372,{"right":"not has_comma_operator(3, $#ValClass)","left":"$pos == 2 and $ValClass[0] eq \"t\" and $ValClass[1] =~ /[ashG]/","type":"and_3","op":"and"}],[8373,{"op":"and","type":"and_3","left":"$pos >= 3","right":"$ValClass[$pos - 1] eq \")\""}],[8373,{"type":"and_3","op":"and","right":"reverse_matching_br($pos - 1) == 0","left":"$pos >= 3 and $ValClass[$pos - 1] eq \")\""}],[8374,{"right":"$ValClass[$pos - 1] eq \")\"","left":"$pos >= 4","type":"and_3","op":"and"}],[8374,{"type":"and_3","op":"and","right":"reverse_matching_br($pos - 1) == 1","left":"$pos >= 4 and $ValClass[$pos - 1] eq \")\""}],[8374,{"type":"and_3","op":"and","right":"$ValClass[0] eq \"t\"","left":"$pos >= 4 and $ValClass[$pos - 1] eq \")\" and reverse_matching_br($pos - 1) == 1"}],[8375,{"op":"and","type":"and_3","left":"$ValClass[0] eq \"s\"","right":"next_same_level_token(\"=\", 0, $#ValClass) == $pos"}],[8375,{"right":"not has_comma_operator($pos + 1, $#ValClass)","left":"$ValClass[0] eq \"s\" and next_same_level_token(\"=\", 0, $#ValClass) == $pos","type":"and_3","op":"and"}],[8377,{"right":"next_same_level_token(\"=\", 0, $#ValClass) == $pos","left":"$ValClass[0] eq \"a\"","type":"and_3","op":"and"}],[8378,{"left":"$ValPerl[0] eq 'for'","right":"$ValPerl[0] eq 'foreach'","op":"||","type":"or_3"}],[8378,{"type":"and_3","op":"and","right":"$ValPerl[0] eq 'for' || $ValPerl[0] eq 'foreach'","left":"$ValClass[0] eq \"c\""}],[8378,{"op":"and","type":"and_3","left":"$ValClass[0] eq \"c\" and $ValPerl[0] eq 'for' || $ValPerl[0] eq 'foreach'","right":"index($TokenStr, \";\") > 0"}],[8379,{"type":"or_3","op":"||","right":"$ValPerl[0] eq 'chop'","left":"$ValPerl[0] eq 'chomp'"}],[8379,{"right":"$ValPerl[0] eq 'chomp' || $ValPerl[0] eq 'chop'","left":"$ValClass[0] eq \"f\"","type":"and_3","op":"and"}],[8380,{"op":"and","type":"and_3","left":"$ValClass[0] eq \"(\"","right":"$ValClass[-1] eq \")\""}],[8380,{"right":"next_same_level_token(\"=\", 1, $#ValClass - 1) == $pos","left":"$ValClass[0] eq \"(\" and $ValClass[-1] eq \")\"","type":"and_3","op":"and"}],[8380,{"right":"not has_comma_operator($pos + 1, $#ValClass - 1)","left":"$ValClass[0] eq \"(\" and $ValClass[-1] eq \")\" and next_same_level_token(\"=\", 1, $#ValClass - 1) == $pos","type":"and_3","op":"and"}],[8382,{"right":"$ValPerl[$pos] eq \"~\"","left":"$ValClass[$pos] eq \"~\"","type":"and_3","op":"and"}],[8383,{"op":"||","type":"or_3","left":"$pos + 1 > $#ValClass || $ValClass[$pos + 1] ne 'f'","right":"$ValPerl[$pos + 1] ne 're' && $ValPerl[$pos + 1] ne 'tr'"}],[8383,{"right":"$pos + 1 > $#ValClass || $ValClass[$pos + 1] ne 'f' || $ValPerl[$pos + 1] ne 're' && $ValPerl[$pos + 1] ne 'tr'","left":"$ValClass[$pos] eq \"~\"","type":"and_3","op":"and"}],[8384,{"left":"$pos >= 5","right":"$ValClass[0] eq \"t\"","op":"and","type":"and_3"}],[8384,{"op":"and","type":"and_3","left":"$pos >= 5 and $ValClass[0] eq \"t\"","right":"$ValClass[1] eq \"s\""}],[8384,{"right":"$ValClass[2] eq \"(\"","left":"$pos >= 5 and $ValClass[0] eq \"t\" and $ValClass[1] eq \"s\"","type":"and_3","op":"and"}],[8384,{"op":"and","type":"and_3","left":"$pos >= 5 and $ValClass[0] eq \"t\" and $ValClass[1] eq \"s\" and $ValClass[2] eq \"(\"","right":"end_of_variable(1) + 1 == $pos"}],[8387,{"type":"and_3","op":"and","right":"$ValClass[$pos] eq \"=\"","left":"$ValClass[$p] =~ /[ashG]/"}],[8387,{"type":"and_3","op":"and","right":"not has_comma_operator($pos + 1, $#ValClass)","left":"$ValClass[$p] =~ /[ashG]/ and $ValClass[$pos] eq \"=\""}],[8390,{"type":"or_3","op":"or","right":"$ValClass[$i + 1] ne \"=\"","left":"not $ValClass[$i] =~ /[ashG]/"}],[8402,{"type":"and_3","op":"and","right":"$ValClass[$start - 1] eq \"(\"","left":"$start != 0"}],[8409,{"type":"and_3","op":"and","right":"$ValClass[$fi + 1] ne \"(\"","left":"$fi != -1"}],[8410,{"type":"and_3","op":"and","right":"$ValClass[$lower] eq \",\"","left":"($lower = next_lower_or_equal_precedent_token($ValClass[$pos], $lower + 1, $end_pos)) != -1"}],[8418,{"type":"and_3","op":"and","right":"$close <= $end_pos","left":"$close >= $pos"}],[8430,{"right":"$ValClass[$start + 2] eq \"i\"","left":"$ValClass[$start + 1] eq \"D\"","type":"and_3","op":"and"}],[8436,{"right":"$ValPerl[$start] eq \"\\$_\"","left":"$ValClass[$start] eq \"s\"","type":"and_3","op":"and"}],[8436,{"op":"and","type":"and_3","left":"$ValClass[$start] eq \"s\" and $ValPerl[$start] eq \"\\$_\"","right":"$ValPy[$start] =~ /^$PERL_ARG_ARRAY\\[(\\d+)\\]$/"}],[8446,{"type":"and_3","op":"and","right":"$pos - $start == 1","left":"$ValClass[$start] =~ /[ashG]/"}],[8451,{"op":"and","type":"and_3","left":"$ValClass[$pos] eq \"=\"","right":"$ValPy[$pos] ne \":=\""}],[8467,{"right":"$ValPerl[$pos + 1] eq \"re\"","left":"$op eq \"~\"","type":"and_3","op":"and"}],[8467,{"left":"$op eq \"~\" and $ValPerl[$pos + 1] eq \"re\"","right":"$ValPy[$pos + 1] =~ /re\\.R/","op":"and","type":"and_3"}],[8446,{"op":"||","type":"or_3","left":"$ValPerl[$pos - 1] eq '}'","right":"$ValPerl[$pos - 1] eq ']'"}],[8446,{"op":"and","type":"and_3","left":"$ValClass[$pos - 1] eq \")\"","right":"$ValPerl[$pos - 1] eq '}' || $ValPerl[$pos - 1] eq ']'"}],[8499,{"type":"or_3","op":"or","right":"$op eq \":\"","left":"$op eq \"=\""}],[8536,{"type":"or_3","op":"||","right":"$ValClass[1] eq '('","left":"$#ValClass == 0"}],[8536,{"left":"$pos == 0","right":"$#ValClass == 0 || $ValClass[1] eq '('","op":"and","type":"and_3"}],[8537,{"op":"and","type":"and_3","left":"$pos == 2","right":"$ValClass[0] eq \"s\""}],[8537,{"left":"$pos == 2 and $ValClass[0] eq \"s\"","right":"$ValClass[1] eq \"=\"","op":"and","type":"and_3"}],[8537,{"type":"or_3","op":"||","right":"$ValClass[3] eq '('","left":"$#ValClass == 2"}],[8537,{"right":"$#ValClass == 2 || $ValClass[3] eq '('","left":"$pos == 2 and $ValClass[0] eq \"s\" and $ValClass[1] eq \"=\"","type":"and_3","op":"and"}],[8539,{"right":"$ValClass[0] eq \"t\"","left":"$pos == 3","type":"and_3","op":"and"}],[8539,{"op":"and","type":"and_3","left":"$pos == 3 and $ValClass[0] eq \"t\"","right":"$ValClass[1] eq \"s\""}],[8539,{"right":"$ValClass[2] eq \"=\"","left":"$pos == 3 and $ValClass[0] eq \"t\" and $ValClass[1] eq \"s\"","type":"and_3","op":"and"}],[8539,{"right":"$ValClass[4] eq '('","left":"$#ValClass == 3","type":"or_3","op":"||"}],[8539,{"type":"and_3","op":"and","right":"$#ValClass == 3 || $ValClass[4] eq '('","left":"$pos == 3 and $ValClass[0] eq \"t\" and $ValClass[1] eq \"s\" and $ValClass[2] eq \"=\""}],[8568,{"op":"and","type":"and_3","left":"$pos + 1 <= $#ValClass","right":"$ValClass[$pos + 1] eq \"\\\"\""}],[8570,{"right":"$fc ne \"\\\"\"","left":"($fc = substr($ValPy[$pos + 1], 0, 1)) ne \"'\"","type":"and_3","op":"and"}],[8568,{"left":"$pos + 1 <= $#ValClass","right":"$ValClass[$pos + 1] eq \"(\"","op":"and","type":"and_3"}],[8655,{"type":"and_3","op":"and","right":"$1 eq $2","left":"$py =~ /^str.maketrans\\('(.+)','(.+)'\\)$/"}],[8656,{"op":"and","type":"and_3","left":"$py =~ /^str.maketrans\\(\"(.+)\",\"(.+)\"\\)$/","right":"$1 eq $2"}],[8657,{"type":"and_3","op":"and","right":"$1 eq $2","left":"$py =~ /^str.maketrans\\(\"\"\"(.+)\"\"\",\"\"\"(.+)\"\"\"\\)$/"}],[8658,{"type":"and_3","op":"and","right":"$1 eq $2","left":"$py =~ /^str.maketrans\\('''(.+)''','''(.+)'''\\)$/"}],[8761,{"type":"or_3","op":"or","right":"$quote3 eq \"'''\"","left":"$quote3 eq \"\\\"\\\"\\\"\""}],[8767,{"left":"$ch1 eq \"\\\\\"","right":"$ch1 eq \"\\\"\"","op":"or","type":"or_3"}],[8767,{"right":"$ch1 eq \"'\"","left":"$ch1 eq \"\\\\\" or $ch1 eq \"\\\"\"","type":"or_3","op":"or"}],[8765,{"left":"length $quote == 3","right":"substr($string, $i, 3) eq $quote","op":"and","type":"and_3"}],[8792,{"op":"or","type":"or_3","left":"$ch eq \"\\\\\"","right":"$ch eq $delim"}],[8824,{"op":"||","type":"or_3","left":"$ValClass[$pos + 1] eq 'd' || $ValClass[$pos + 1] eq '\"' && substr($ValPy[$pos + 1], 0, 3) eq q['\\\\x]","right":"$ValClass[$pos + 1] eq 'i' && exists $BUILTIN_LIBRARY_SET{$ValPerl[$pos + 1]}"}],[8824,{"op":"and","type":"and_3","left":"$pos + 1 <= $#ValClass","right":"$ValClass[$pos + 1] eq 'd' || $ValClass[$pos + 1] eq '\"' && substr($ValPy[$pos + 1], 0, 3) eq q['\\\\x] || $ValClass[$pos + 1] eq 'i' && exists $BUILTIN_LIBRARY_SET{$ValPerl[$pos + 1]}"}],[8856,{"right":"$implicit_global_my","left":"$ValPerl[$pos] eq \"require\"","type":"and_3","op":"and"}],[8869,{"left":"$pos + 1 <= $#ValClass","right":"$ValClass[$pos + 1] eq \"i\"","op":"and","type":"and_3"}],[8869,{"right":"$ValPerl[$pos + 1] eq \"lib\"","left":"$pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq \"i\"","type":"and_3","op":"and"}],[8882,{"op":"and","type":"and_3","left":"$ValPerl[$i] eq \"dirname\"","right":"$ValPerl[$i + 1] eq \"\\$0\""}],[8882,{"type":"and_3","op":"and","right":"$ValPerl[$i + 1] eq \"(\"","left":"$ValPerl[$i] eq \"dirname\""}],[8882,{"left":"$ValPerl[$i] eq \"dirname\" and $ValPerl[$i + 1] eq \"(\"","right":"$ValPerl[$i + 2] eq \"\\$0\"","op":"and","type":"and_3"}],[8869,{"left":"$pos + 4 <= $#ValClass","right":"$ValClass[$pos + 1] eq \"i\"","op":"and","type":"and_3"}],[8869,{"type":"and_3","op":"and","right":"$ValPerl[$pos + 1] eq \"constant\"","left":"$pos + 4 <= $#ValClass and $ValClass[$pos + 1] eq \"i\""}],[8908,{"op":"and","type":"and_3","left":"$ValClass[$pos + 2] eq \"i\"","right":"$ValClass[$pos + 3] eq \"A\""}],[8917,{"left":"$ValClass[$i] eq \")\"","right":"$ValPerl[$i] eq \"}\"","op":"and","type":"and_3"}],[8869,{"op":"and","type":"and_3","left":"$pos + 4 <= $#ValClass","right":"$ValClass[$pos + 1] eq \"i\""}],[8869,{"right":"$ValPerl[$pos + 1] eq \"overload\"","left":"$pos + 4 <= $#ValClass and $ValClass[$pos + 1] eq \"i\"","type":"and_3","op":"and"}],[8952,{"op":"and","type":"and_3","left":"$ValClass[$i] eq \")\"","right":"$ValPerl[$i] eq \"}\""}],[8958,{"op":"or","type":"or_3","left":"$ValClass[$i] ne \"\\\"\"","right":"not exists $OVERLOAD_MAP{$ValPerl[$i]}"}],[9014,{"type":"or_3","op":"or","right":"exists $overloads{'cmp'}","left":"exists $overloads{'<=>'}"}],[8869,{"op":"and","type":"and_3","left":"$pos + 2 <= $#ValClass","right":"$ValClass[$pos + 1] eq \"i\""}],[8869,{"left":"$pos + 2 <= $#ValClass and $ValClass[$pos + 1] eq \"i\"","right":"$ValPerl[$pos + 1] eq \"open\"","op":"and","type":"and_3"}],[9114,{"type":"and_3","op":"and","right":"$ValClass[$pos + 1] eq \"s\"","left":"$pos + 1 == $limit"}],[9114,{"right":"$ValClass[$pos + 1] eq \"\\\"\"","left":"$pos + 1 == $limit","type":"and_3","op":"and"}],[9142,{"left":"$path eq $MODULES_DIR","right":"$path eq \"./$MODULES_DIR\"","op":"or","type":"or_3"}],[9143,{"left":"not $modules_path_added","right":"$pos == 0","op":"and","type":"and_3"}],[9158,{"op":"and","type":"and_3","left":"$pos == 0","right":"not $path"}],[9158,{"right":"$file =~ /^[A-Za-z._][A-Za-z0-9._]*\\.py$/","left":"$pos == 0 and not $path","type":"and_3","op":"and"}],[9158,{"type":"or_3","op":"||","right":"!$exports","left":"$CurSub eq '__main__'"}],[9158,{"left":"$pos == 0 and not $path and $file =~ /^[A-Za-z._][A-Za-z0-9._]*\\.py$/","right":"$CurSub eq '__main__' || !$exports","op":"and","type":"and_3"}],[9114,{"type":"and_3","op":"and","right":"$ValClass[$pos + 1] eq \"i\"","left":"$pos + 1 <= $limit"}],[9189,{"op":"and","type":"and_3","left":"$path","right":"@places"}],[9199,{"left":"$path eq $MODULES_DIR","right":"$path eq \"./$MODULES_DIR\"","op":"or","type":"or_3"}],[9200,{"type":"and_3","op":"and","right":"$pos == 0","left":"not $modules_path_added"}],[9206,{"type":"and_3","op":"and","right":"not $path","left":"$pos == 0"}],[9206,{"type":"and_3","op":"and","right":"$ValPy[$pos + 1] =~ /^[A-Za-z._][A-Za-z0-9._]*$/","left":"$pos == 0 and not $path"}],[9206,{"op":"||","type":"or_3","left":"$CurSub eq '__main__'","right":"!$exports"}],[9206,{"left":"$pos == 0 and not $path and $ValPy[$pos + 1] =~ /^[A-Za-z._][A-Za-z0-9._]*$/","right":"$CurSub eq '__main__' || !$exports","op":"and","type":"and_3"}],[9114,{"left":"$ValPerl[$pos] eq \"require\"","right":"$pos + 1 <= $limit","op":"and","type":"and_3"}],[9308,{"op":"and","type":"and_3","left":"$ValClass[$i] eq \"i\"","right":"$ValPerl[$i] =~ /^v\\d/"}],[9322,{"right":"substr($desired_version, 0, 1) eq \"v\"","left":"$desired_version","type":"and_3","op":"and"}],[9374,{"right":"-M $fullpy >= -M $fullfile","left":"not -f $fullpy","type":"or_3","op":"or"}],[9374,{"right":"$rerun_flags","left":"not -f $fullpy or -M $fullpy >= -M $fullfile","type":"or_3","op":"or"}],[9415,{"type":"or_3","op":"or","right":"-M $fullpy >= -M $fullfile","left":"not -f $fullpy"}],[9424,{"right":"$pythonize_standard_library","left":"$canwrite","type":"or_3","op":"or"}],[9432,{"left":"!(-f $fullpy) || -M $fullpy >= -M $fullfile","right":"$rerun_flags","op":"||","type":"or_3"}],[9432,{"op":"and","type":"and_3","left":"!(-f $fullpy) || -M $fullpy >= -M $fullfile || $rerun_flags","right":"lock_it($fullpy)"}],[9437,{"type":"and_3","op":"and","right":"$canwrite","left":"$output_dir"}],[9529,{"right":"$1 eq $2","left":"$line =~ /^(?:[A-Za-z][A-Za-z0-9_]*[.])+([A-Za-z][A-Za-z0-9_]*) = ([A-Za-z][A-Za-z0-9_]*)/","type":"and_3","op":"and"}],[9667,{"left":"$desired_version","right":"$version","op":"and","type":"and_3"}],[9799,{"left":"$@","right":"$debug","op":"and","type":"and_3"}],[9816,{"left":"$ValClass[-1] eq \")\"","right":"$ValClass[-2] eq \"(\"","op":"and","type":"and_3"}],[9887,{"right":"$OVERLOAD_MAP{$o}{'normal'} eq $o","left":"exists $OVERLOAD_MAP{$o}","type":"and_3","op":"and"}],[9898,{"right":"$sig ne \"*\"","left":"$sig ne \"&\"","type":"and_3","op":"and"}],[9932,{"op":"and","type":"and_3","left":"$version","right":"substr($version, 0, 1) eq \"v\""}],[10031,{"op":"or","type":"or_3","left":"$TokenStr eq \"((s=f(s)+d)-d)\"","right":"$TokenStr eq \"((s=f(s)-d)+d)\""}],[10031,{"type":"or_3","op":"or","right":"$TokenStr eq \"((s=s+d)-d)\"","left":"$TokenStr eq \"((s=f(s)+d)-d)\" or $TokenStr eq \"((s=f(s)-d)+d)\""}],[10031,{"op":"or","type":"or_3","left":"$TokenStr eq \"((s=f(s)+d)-d)\" or $TokenStr eq \"((s=f(s)-d)+d)\" or $TokenStr eq \"((s=s+d)-d)\"","right":"$TokenStr eq \"((s=s-d)+d)\""}],[10038,{"right":"next_same_level_token(\",\", 0, $#ValClass) == -1","left":"$ValClass[0] eq \"s\"","type":"and_3","op":"and"}],[10040,{"left":"$eq != -1","right":"$ValPy[$eq] eq \":=\"","op":"and","type":"and_3"}],[10062,{"op":"or","type":"or_3","left":"$k < 0","right":"$ValClass[$k] ne \"=\""}],[10107,{"type":"and_3","op":"and","right":"$ValPy[$start] eq $CONVERTER_MAP{'S'}","left":"$ValClass[$start] eq \"f\""}],[10121,{"right":"$ValClass[$end_pos] eq \"\\\"\"","left":"$comma3 + 1 == $end_pos","type":"and_3","op":"and"}],[10121,{"op":"and","type":"and_3","left":"$comma3 + 1 == $end_pos and $ValClass[$end_pos] eq \"\\\"\"","right":"$ValPerl[$end_pos] eq \"\""}],[10128,{"type":"and_3","op":"and","right":"$ValClass[-1] eq \"\\\"\"","left":"$equal_pos + 1 == $#ValClass"}],[10128,{"op":"and","type":"and_3","left":"$equal_pos + 1 == $#ValClass and $ValClass[-1] eq \"\\\"\"","right":"$ValPerl[-1] eq \"\""}],[10140,{"op":"and","type":"and_3","left":"$ValClass[$comma1 + 1] eq \"-\"","right":"$ValClass[$comma2 - 1] eq \"d\""}],[10140,{"right":"$comma2 - 1 - ($comma1 + 1) == 1","left":"$ValClass[$comma1 + 1] eq \"-\" and $ValClass[$comma2 - 1] eq \"d\"","type":"and_3","op":"and"}],[10140,{"type":"and_3","op":"and","right":"$ValClass[$comma2 + 1] eq \"d\"","left":"$ValClass[$comma1 + 1] eq \"-\" and $ValClass[$comma2 - 1] eq \"d\" and $comma2 - 1 - ($comma1 + 1) == 1"}],[10140,{"right":"$end_len - ($comma2 + 1) == 0","left":"$ValClass[$comma1 + 1] eq \"-\" and $ValClass[$comma2 - 1] eq \"d\" and $comma2 - 1 - ($comma1 + 1) == 1 and $ValClass[$comma2 + 1] eq \"d\"","type":"and_3","op":"and"}],[10140,{"op":"and","type":"and_3","left":"$ValClass[$comma1 + 1] eq \"-\" and $ValClass[$comma2 - 1] eq \"d\" and $comma2 - 1 - ($comma1 + 1) == 1 and $ValClass[$comma2 + 1] eq \"d\" and $end_len - ($comma2 + 1) == 0","right":"-$ValPy[$comma2 - 1] + $ValPy[$comma2 + 1] >= 0"}],[10163,{"right":"$ValPerl[$pos] eq \"undef\"","left":"$ValClass[$pos] eq \"f\"","type":"and_3","op":"and"}],[10163,{"op":"or","type":"or_3","left":"$ValClass[$pos] eq \"(\"","right":"$ValClass[$pos] eq \"f\" and $ValPerl[$pos] eq \"undef\""}],[10163,{"type":"or_3","op":"or","right":"$ValClass[$pos] eq \")\"","left":"$ValClass[$pos] eq \"(\" or $ValClass[$pos] eq \"f\" and $ValPerl[$pos] eq \"undef\""}],[10163,{"right":"$ValClass[$pos] eq \",\"","left":"$ValClass[$pos] eq \"(\" or $ValClass[$pos] eq \"f\" and $ValPerl[$pos] eq \"undef\" or $ValClass[$pos] eq \")\"","type":"or_3","op":"or"}],[10258,{"op":"and","type":"and_3","left":"exists $nested_subs{$cs}","right":"$nested_subs{$cs} eq $DEFAULT_MATCH"}],[10258,{"op":"and","type":"and_3","left":"exists $nested_subs{$cs} and $nested_subs{$cs} eq $DEFAULT_MATCH","right":"&Pythonizer::expr_type($start, $end_pos, $cs) ne \"S\""}],[10258,{"left":"$ValClass[$start] eq \"(\"","right":"$ValClass[$end_pos] eq \")\"","op":"and","type":"and_3"}],[10258,{"op":"and","type":"and_3","left":"$ValClass[$start] eq \"(\" and $ValClass[$end_pos] eq \")\"","right":"next_same_level_token(\",\", $start + 1, $end_pos - 1) != -1"}],[10310,{"left":"$k >= 0","right":"$ValPy[$k] ne \":=\"","op":"and","type":"and_3"}],[10332,{"right":"$ValPerl[$start] eq \"(\"","left":"$ValClass[$start] eq \"(\"","type":"and_3","op":"and"}],[10334,{"type":"and_3","op":"and","right":"$ValClass[$start + 1] eq \"s\"","left":"$start + 2 <= $end_pos"}],[10334,{"right":"$ValClass[$start + 2] eq \"=\"","left":"$start + 2 <= $end_pos and $ValClass[$start + 1] eq \"s\"","type":"and_3","op":"and"}],[10334,{"right":"$ValPy[$start + 2] eq \":=\"","left":"$start + 2 <= $end_pos and $ValClass[$start + 1] eq \"s\" and $ValClass[$start + 2] eq \"=\"","type":"and_3","op":"and"}],[10334,{"left":"$start + 3 <= $end_pos","right":"$ValClass[$start + 1] eq \"(\"","op":"and","type":"and_3"}],[10334,{"right":"$ValPerl[$start + 1] eq \"(\"","left":"$start + 3 <= $end_pos and $ValClass[$start + 1] eq \"(\"","type":"and_3","op":"and"}],[10334,{"op":"and","type":"and_3","left":"$start + 3 <= $end_pos and $ValClass[$start + 1] eq \"(\" and $ValPerl[$start + 1] eq \"(\"","right":"$ValClass[$start + 2] eq \"s\""}],[10334,{"type":"and_3","op":"and","right":"$ValClass[$start + 3] eq \"=\"","left":"$start + 3 <= $end_pos and $ValClass[$start + 1] eq \"(\" and $ValPerl[$start + 1] eq \"(\" and $ValClass[$start + 2] eq \"s\""}],[10334,{"right":"$ValPy[$start + 3] eq \":=\"","left":"$start + 3 <= $end_pos and $ValClass[$start + 1] eq \"(\" and $ValPerl[$start + 1] eq \"(\" and $ValClass[$start + 2] eq \"s\" and $ValClass[$start + 3] eq \"=\"","type":"and_3","op":"and"}],[10334,{"left":"$start + 3 <= $end_pos and $ValClass[$start + 1] eq \"(\" and $ValPerl[$start + 1] eq \"(\" and $ValClass[$start + 2] eq \"s\" and $ValClass[$start + 3] eq \"=\" and $ValPy[$start + 3] eq \":=\"","right":"$ValClass[$end_pos - 1] eq \"d\"","op":"and","type":"and_3"}],[10334,{"right":"$ValClass[$end_pos - 2] =~ /[+-]/","left":"$start + 3 <= $end_pos and $ValClass[$start + 1] eq \"(\" and $ValPerl[$start + 1] eq \"(\" and $ValClass[$start + 2] eq \"s\" and $ValClass[$start + 3] eq \"=\" and $ValPy[$start + 3] eq \":=\" and $ValClass[$end_pos - 1] eq \"d\"","type":"and_3","op":"and"}],[10359,{"left":"$ValClass[$i] eq \"i\"","right":"$LocalSub{$ValPy[$i]}","op":"and","type":"and_3"}],[10359,{"left":"$ValClass[$i] eq \"f\"","right":"$ValClass[$i] eq \"i\" and $LocalSub{$ValPy[$i]}","op":"or","type":"or_3"}],[10372,{"left":"$pos - 2 >= 0","right":"$ValClass[$pos - 2] =~ /[Cc]/","op":"and","type":"and_3"}],[10372,{"right":"!($ValClass[$pos + 1] =~ /[.<,]/)","left":"$pos + 1 > $#ValClass","type":"or_3","op":"||"}],[10372,{"op":"and","type":"and_3","left":"$pos - 2 >= 0 and $ValClass[$pos - 2] =~ /[Cc]/","right":"$pos + 1 > $#ValClass || !($ValClass[$pos + 1] =~ /[.<,]/)"}],[10373,{"op":"and","type":"and_3","left":"$pos - 1 >= 0","right":"$ValClass[$pos - 1] =~ /[Cc]/"}],[10373,{"right":"!($ValClass[$pos + 1] =~ /[.<,]/)","left":"$pos + 1 > $#ValClass","type":"or_3","op":"||"}],[10373,{"op":"and","type":"and_3","left":"$pos - 1 >= 0 and $ValClass[$pos - 1] =~ /[Cc]/","right":"$pos + 1 > $#ValClass || !($ValClass[$pos + 1] =~ /[.<,]/)"}],[10374,{"right":"$ValClass[$pos - 1] =~ /[0o]/","left":"$pos != 0","type":"and_3","op":"and"}],[10374,{"op":"||","type":"or_3","left":"$pos + 1 > $#ValClass","right":"!($ValClass[$pos + 1] =~ /[.<,]/)"}],[10374,{"op":"and","type":"and_3","left":"$pos != 0 and $ValClass[$pos - 1] =~ /[0o]/","right":"$pos + 1 > $#ValClass || !($ValClass[$pos + 1] =~ /[.<,]/)"}],[10375,{"left":"$pos + 1 < $#ValClass","right":"$ValClass[$pos + 1] =~ /[0o]/","op":"and","type":"and_3"}],[10375,{"type":"or_3","op":"||","right":"!($ValClass[$pos - 1] =~ /[.<,]/)","left":"$pos == 0"}],[10375,{"right":"$pos == 0 || !($ValClass[$pos - 1] =~ /[.<,]/)","left":"$pos + 1 < $#ValClass and $ValClass[$pos + 1] =~ /[0o]/","type":"and_3","op":"and"}],[10376,{"left":"$pos + 1 < $#ValClass","right":"$ValClass[$pos + 1] eq \":\"","op":"and","type":"and_3"}],[10376,{"right":"$pos != 0","left":"$pos + 1 < $#ValClass and $ValClass[$pos + 1] eq \":\"","type":"and_3","op":"and"}],[10376,{"right":"$ValPerl[$pos - 1] eq \"?\"","left":"$pos + 1 < $#ValClass and $ValClass[$pos + 1] eq \":\" and $pos != 0","type":"and_3","op":"and"}],[10388,{"right":"$ValClass[$fpos - 1] eq \">\"","left":"$fpos - 2 >= 0","type":"and_3","op":"and"}],[10388,{"left":"$eof + 2 <= $#ValClass","right":"$ValClass[$eof + 1] eq \">\"","op":"and","type":"and_3"}],[10393,{"type":"and_3","op":"and","right":"$ValClass[$comparator] eq \"\\\"\"","left":"defined $comparator"}],[10393,{"right":"$ValPerl[$comparator] =~ /^(?:HASH|ARRAY|SCALAR|REGEX)$/","left":"defined $comparator and $ValClass[$comparator] eq \"\\\"\"","type":"and_3","op":"and"}],[10406,{"type":"and_3","op":"and","right":"$ValClass[$start] eq \"q\"","left":"$start == $limit"}],[10406,{"left":"$start == $limit and $ValClass[$start] eq \"q\"","right":"$ValPy[$start] =~ /\\.split\\(\\)$/","op":"and","type":"and_3"}]],"branch":[[271,{"text":"if ($^O eq \"cygwin\")"}],[312,{"text":"unless $implicit_global_my"}],[311,{"text":"unless (%Packages)"}],[331,{"text":"if defined $line"}],[337,{"text":"if $user"}],[341,{"text":"if (@Pass0::implied_options)"}],[348,{"text":"if (/^\\* (.*) <(.*\\@.*)>/)"}],[344,{"text":"if ($gen_author)"}],[361,{"text":"if defined $line"}],[358,{"text":"if (defined $line and $line =~ /^\\s*#!/) { }"}],[367,{"text":"if ($traceback)"}],[376,{"text":"if $import_perllib"}],[384,{"text":"if ($g eq 'TRACEBACK' and $traceback) { }"}],[384,{"text":"elsif ($g eq 'TRACE_RUN' and $trace_run) { }"}],[384,{"text":"elsif ($g eq 'AUTODIE' and $autodie) { }"}],[384,{"text":"elsif ($g =~ /^_[a-z]/) { }"}],[394,{"text":"if ($g eq 'TRACEBACK' and $traceback) { }"}],[394,{"text":"elsif ($g eq 'TRACE_RUN' and $trace_run) { }"}],[394,{"text":"elsif ($g eq 'AUTODIE' and $autodie) { }"}],[383,{"text":"if ($import_perllib) { }"}],[406,{"text":"if ($Perlscan::uses_function_return_exception)"}],[433,{"text":"if (exists $SpecialVarsUsed{'@ISA'})"}],[436,{"text":"if ($autovivification)"}],[431,{"text":"if (exists $SpecialVarsUsed{'bless'} and exists $SpecialVarsUsed{'bless'}{$package})"}],[441,{"text":"if ($import_perllib) { }"}],[447,{"text":"if (exists $InitVar{'__main__'})"}],[457,{"text":"if ($import_perllib) { }"}],[455,{"text":"if (exists $SpecialVarsUsed{'$|'})"}],[501,{"text":"defined $saved_eval_tokens ? :"}],[501,{"text":"defined $split_multiple_assignment ? :"}],[500,{"text":"if ($debug >= 5)"}],[524,{"text":"defined $line ? :"}],[525,{"text":"if ($. >= $breakpoint)"}],[523,{"text":"if ($debug > 1)"}],[550,{"text":"if $deferred_statement == 1"}],[549,{"text":"if ($debug >= 5)"}],[554,{"text":"if ($Perlscan::nesting_last->{'type'} eq 'else') { }"}],[554,{"text":"elsif ($TokenStr ne '}' and substr($TokenStr, 0, 1) ne 'C' or $Perlscan::nesting_level < $deferred_statement_nesting - 1) { }"}],[553,{"text":"if ($deferred_statement == 1 and $Perlscan::nesting_level < $deferred_statement_nesting)"}],[578,{"text":"if ($deferred_statement == 3) { }"}],[570,{"text":"if ($deferred_statement >= 2) { }"}],[570,{"text":"elsif ($token_buffer_active == 0) { }"}],[570,{"text":"elsif ($token_buffer_active == 1) { }"}],[507,{"text":"if (not defined $line and $saved_eval_tokens) { }"}],[507,{"text":"elsif (defined $split_multiple_assignment) { }"}],[507,{"text":"elsif (defined $saved_sub_tokens and $nested_sub_at_level < 0) { }"}],[507,{"text":"elsif (scalar @Perlscan::BufferValClass == 0 and $deferred_statement < 2) { }"}],[608,{"text":"if (scalar @ValClass == 0 or not defined $ValClass[0])"}],[618,{"text":"if (index($TokenStr, \"s^\") != -1)"}],[623,{"text":"if ($TokenStr =~ /^f\\(\"\\)=\"$/ and $ValPerl[0] eq \"%SIG\")"}],[638,{"text":"if ($split_multiple_assignment)"}],[653,{"text":"unless $implicit_global_my"}],[648,{"text":"if (not $set_initial_package and $ValClass[0] ne 'c' || $ValPerl[0] ne 'package') { }"}],[648,{"text":"elsif (exists $FileHandles{'DATA'} and $FileHandles{'DATA'} == $. and not $gen_open_data) { }"}],[661,{"text":"if ($ValClass[0] eq 't' and $ValClass[1] =~ /[ah]/ and $ValPerl[0] eq 'my' && scalar @ValClass > 2 || $ValPerl[0] eq 'local' && $CurSub eq '__main__' && scalar @ValClass > 2 || $ValPerl[0] eq 'our' && next_same_level_token('=', 2, $#ValClass) > 0) { }"}],[661,{"text":"elsif ($ValClass[0] eq 't' and $ValClass[1] eq '(' and $ValClass[2] =~ /[ah]/ and $ValClass[3] eq ')' and $ValPerl[0] eq 'my' && scalar @ValClass > 4 || $ValPerl[0] eq 'local' && $CurSub eq '__main__' && scalar @ValClass > 4 || $ValPerl[0] eq 'our' && next_same_level_token('=', 4, $#ValClass) > 0) { }"}],[661,{"text":"elsif ($ValClass[0] eq 't' and $ValPerl[0] eq 'local' and $ValClass[1] eq 'f') { }"}],[675,{"text":"if ($ValClass[0] eq \"^\")"}],[684,{"text":"if ($debug >= 3)"}],[682,{"text":"if ($ValClass[0] eq \"W\")"}],[695,{"text":"if ($debug >= 5 and $deferred_statement == 1)"}],[699,{"text":"unless ($Pythonizer::GeneratedCode)"}],[705,{"text":"if &Perlscan::continue_needed_try_block(1)"}],[703,{"text":"if (&Perlscan::is_continue_block(1))"}],[708,{"text":"if (&Perlscan::needs_redo_loop(1))"}],[722,{"text":"if (&Perlscan::has_continue(1))"}],[737,{"text":"unless $continue"}],[716,{"text":"if ($ex_name eq $FUNCTION_RETURN_EXCEPTION) { }"}],[714,{"text":"if (defined $ex_name)"}],[712,{"text":"if (&Perlscan::needs_try_block(1)) { }"}],[712,{"text":"elsif (not &Perlscan::is_continue_block(1)) { }"}],[755,{"text":"if (exists $CLASS_METHOD_SET{$CurSub} or exists $SubAttributes{$CurSub}{'blesses'} and not exists $SubAttributes{$CurSub}{'overloads'}) { }"}],[751,{"text":"if (not $implicit_global_my and $CurSub ne \"__main__\")"}],[749,{"text":"if ($we_are_in_sub_body and $Pythonizer::NextNest == 0)"}],[770,{"text":"if ($#ValClass > 1 and $ValClass[1] eq \"c\" and $ValPerl[1] eq \"while\")"}],[781,{"text":"if &Perlscan::continue_needed_try_block(1)"}],[779,{"text":"if (&Perlscan::is_continue_block(0)) { }"}],[779,{"text":"elsif (not $Perlscan::PREV_HAD_COLON) { }"}],[789,{"text":"if (&Perlscan::needs_try_block(0))"}],[794,{"text":"if (&Perlscan::needs_redo_loop(0))"}],[801,{"text":"if (&Perlscan::needs_try_block(0))"}],[804,{"text":"if ($deferred_statement == 1 and $deferred_statement_nesting == $Perlscan::nesting_level)"}],[819,{"text":"if $close_br_pos + 1 <= $#ValClass"}],[815,{"text":"if ($close_br_pos == $#ValClass and next_same_level_token(',', 1, $close_br_pos - 1) == -1) { }"}],[823,{"text":"if $close_br_pos + 1 <= $#ValClass"}],[810,{"text":"if ($close_br_pos >= 0 and $close_br_pos < $#ValClass and $ValClass[$close_br_pos + 1] eq '=') { }"}],[810,{"text":"elsif ($close_br_pos >= 0 and $close_br_pos < $#ValClass and $ValClass[$close_br_pos + 1] eq '~' and $ValPerl[$close_br_pos + 1] ne '~') { }"}],[810,{"text":"elsif (index(substr($TokenStr, 0, $close_br_pos), '=') != -1) { }"}],[826,{"text":"if ($Pythonizer::CurNest) { }"}],[838,{"text":"if $debug >= 3"}],[842,{"text":"if (@vars)"}],[860,{"text":"if (exists $SubAttributes{$CurSub}{'wantarray'}) { }"}],[866,{"text":"if (exists $SubAttributes{$CurSub}{'modifies_arglist'})"}],[856,{"text":"if (substr($escaped, 0, 7) eq '__END__') { }"}],[875,{"text":"if (exists $GlobalVar{$CurSub})"}],[881,{"text":"if (exists $InitVar{$CurSub})"}],[895,{"text":"if ($ValClass[$i] eq \"i\" or $ValClass[$i] eq \"s\")"}],[909,{"text":"if ($TokenStr =~ tr/=// > 1 and $ValClass[-1] eq \"d\" and $ValPerl[-2] eq '+=' || $ValPerl[-2] eq '-=')"}],[915,{"text":"if ($reg != -1 and $ValPerl[$reg] ne '~' and $reg + 1 <= $#ValClass and $ValPerl[$reg + 1] =~ /re|tr/) { }"}],[915,{"text":"elsif ($CurSub eq '__main__' or scalar @ValClass != 1) { }"}],[921,{"text":"if $ValPerl[0] eq \"local\""}],[926,{"text":"if (exists $SpecialVarR2L{$ValPy[1]})"}],[929,{"text":"if (substr($ValPerl[1], 0, 1) eq '*') { }"}],[929,{"text":"elsif (exists $VarType{$ValPy[1]} and exists $VarType{$ValPy[1]}{$CurSub}) { }"}],[924,{"text":"if ($ValPerl[0] eq 'my' or $ValPerl[0] eq 'local') { }"}],[924,{"text":"elsif ($ValPerl[0] eq 'own') { }"}],[924,{"text":"elsif ($ValPerl[0] eq 'state') { }"}],[947,{"text":"if ($ValClass[1] eq \"G\")"}],[955,{"text":"if (exists $VarType{$u} and exists $VarType{$u}{$CurSub})"}],[952,{"text":"if ($ValPerl[3] eq 'undef') { }"}],[970,{"text":"if (exists $SubAttributes{$ValPy[3]}{'wantarray'} and $ValClass[1] =~ /[ah]/ || $ValClass[1] eq 'G' && $ValPy[1] =~ /_[ah]$/) { }"}],[968,{"text":"if ($LocalSub{$ValPy[3]}) { }"}],[968,{"text":"elsif ($Constants{$ValPy[3]}) { }"}],[950,{"text":"if ($ValClass[3] eq 'f') { }"}],[950,{"text":"elsif ($ValClass[3] eq 'x') { }"}],[950,{"text":"elsif ($ValClass[3] eq 'i') { }"}],[950,{"text":"elsif ($ValClass[3] eq 'C' and $ValPerl[3] eq 'eval') { }"}],[1000,{"text":"if ($ValClass[-1] eq 'd' or $ValClass[-1] eq '\"' and substr($ValPy[-1], 0, 1) ne 'f' or $ValClass[-1] eq 'f' and $ValPerl[-1] eq 'undef') { }"}],[946,{"text":"if ($ValPerl[0] eq 'my' or $ValPerl[0] eq 'our' or $ValPerl[0] eq 'local') { }"}],[946,{"text":"elsif ($ValPerl[0] eq 'own') { }"}],[946,{"text":"elsif ($ValPerl[0] eq 'state') { }"}],[1016,{"text":"if ($ValPerl[0] eq 'state') { }"}],[1016,{"text":"elsif ($ValPerl[0] eq 'local') { }"}],[1027,{"text":"if (exists $VarType{$ValPy[$i]} and exists $VarType{$ValPy[$i]}{$CurSub})"}],[1030,{"text":"if (defined $val and $sval ne $val)"}],[1038,{"text":"if ($ValPy[$i] eq ',') { }"}],[1038,{"text":"elsif ($ValPerl[0] eq 'state') { }"}],[1051,{"text":"if $ValPy[$i] eq \",\""}],[1053,{"text":"if (exists $VarType{$ValPy[$i]} and exists $VarType{$ValPy[$i]}{$CurSub})"}],[1056,{"text":"if ($ValPerl[0] eq 'state') { }"}],[1036,{"text":"if (defined $val) { }"}],[1015,{"text":"if ($#ValClass > $last and $ValClass[$last + 1] eq '=' and init_has_real_values($last + 2)) { }"}],[1015,{"text":"elsif ($ValPerl[0] ne 'our') { }"}],[1069,{"text":"if ($ValPerl[0] eq \"state\")"}],[1080,{"text":"if ($reg != -1 and $ValPerl[$reg] ne '~' and $reg + 1 <= $#ValClass and $ValPerl[$reg + 1] =~ /re|tr/) { }"}],[1085,{"text":"if ($ValPerl[0] eq \"state\")"}],[922,{"text":"if (scalar @ValClass == 2) { }"}],[922,{"text":"elsif (scalar @ValClass == 4 and $ValClass[2] eq '=') { }"}],[922,{"text":"elsif ($ValClass[1] eq '(') { }"}],[922,{"text":"elsif ($ValClass[2] eq '=') { }"}],[922,{"text":"elsif (scalar @ValClass > 6 and $ValPerl[0] eq 'local' and $ValClass[1] eq 's' and $ValClass[2] eq '(' and next_same_level_token('=', 1, $#ValClass) > 2) { }"}],[922,{"text":"elsif ($ValPerl[0] eq 'local') { }"}],[1105,{"text":"if ($autovivification) { }"}],[1121,{"text":"if ($LocalSub{$ValPy[$i]} and $ValClass[$i + 1] ne 'A') { }"}],[1121,{"text":"elsif ($Constants{$ValPy[$i]}) { }"}],[1121,{"text":"elsif ($ValPerl[$i] eq $ValPy[$i]) { }"}],[1146,{"text":"if $ValPy[$i] eq \",\" and $comma_flip != -1"}],[1147,{"text":"if $ValPy[$i] =~ /^:\\s?$/"}],[1148,{"text":"if ($ValPy[$i] eq ':' or $ValPy[$i] eq ': ') { }"}],[1148,{"text":"elsif ($ValPy[$i] ne '') { }"}],[1120,{"text":"if ($ValClass[$i] eq 'i') { }"}],[1120,{"text":"elsif ($ValPy[$i] eq ',' and $comma_flip == 0) { }"}],[1120,{"text":"elsif ($ValClass[$i] eq 'a' and not $last_was_colon) { }"}],[1120,{"text":"elsif ($ValClass[$i] eq 'h' and not $last_was_colon) { }"}],[1156,{"text":"if (&Pythonizer::expr_type($i, $#ValClass, $CurSub) =~ /^a/ and not $last_was_colon)"}],[1164,{"text":"if ($i < 0)"}],[1168,{"text":"if $add_right_paren"}],[1119,{"text":"if ($sep - $i <= 1) { }"}],[1173,{"text":"if ($autovivification)"}],[1181,{"text":"if ($autovivification) { }"}],[1190,{"text":"if ($autovivification) { }"}],[1103,{"text":"if ($ValPerl[2] eq '(') { }"}],[1103,{"text":"elsif (scalar @ValClass == 3 and $ValClass[2] eq 'h') { }"}],[1103,{"text":"elsif ($#ValClass == 2 and $ValClass[2] eq 'a') { }"}],[1102,{"text":"if ($#ValClass >= 2 and $ValClass[1] eq '=') { }"}],[1102,{"text":"elsif ($#ValClass == 0) { }"}],[1205,{"text":"if ($#ValClass == 0)"}],[1220,{"text":"if $elements > 1"}],[1223,{"text":"if $elements > 1"}],[1227,{"text":"if $elements > 1"}],[1218,{"text":"if ($ValClass[$i] =~ /[ah]/) { }"}],[1218,{"text":"elsif ($ValClass[$i] eq 'f' and substr(&Pythonizer::func_type($ValPerl[$i], $ValPy[$i]), 0, 1) eq 'a') { }"}],[1218,{"text":"elsif ($i + 2 <= $end_pos and $ValClass[$i] eq 's' and $ValClass[$i + 1] eq '~' and $ValClass[$i + 2] eq 'q' and substr($ValPy[$i + 1], 0, 1) ne '.') { }"}],[1230,{"text":"if $pos == -1"}],[1234,{"text":"if ($need_flatten and $elements == 1)"}],[1211,{"text":"if ($ValPerl[2] eq \"(\" and ($end_pos = matching_br(2)) == $#ValClass)"}],[1243,{"text":"if ($ValPerl[2] eq '@_' and $nested_sub_at_level > 0 || $CurSub ne '__main__' && !exists $SubAttributes{$CurSub}{'modifies_arglist'}) { }"}],[1253,{"text":"if ($autovivification) { }"}],[1263,{"text":"if ($autovivification) { }"}],[1281,{"text":"if $import_perllib"}],[1278,{"text":"if ($need_flatten)"}],[1286,{"text":"if ($import_perllib) { }"}],[1284,{"text":"if ($autovivification)"}],[1296,{"text":"if $pos == -1"}],[1299,{"text":"if $ValClass[$i] eq \",\""}],[1307,{"text":"if ($autovivification) { }"}],[1320,{"text":"if ($ValPerl[-1] eq ')') { }"}],[1317,{"text":"if ($ValPerl[$last_eq + 1] eq \"(\")"}],[1330,{"text":"if ($ValClass[$i + 1] ne \"=\")"}],[1338,{"text":"if ($ValPerl[-1] eq '@_' and $CurSub ne '__main__' and not exists $SubAttributes{$CurSub}{'modifies_arglist'}) { }"}],[1338,{"text":"elsif ($autovivification) { }"}],[1350,{"text":"if ($autovivification)"}],[1355,{"text":"if ($autovivification)"}],[1336,{"text":"if ($last_eq + 1 == $#ValClass) { }"}],[1336,{"text":"elsif ($ValPerl[$last_eq + 1] eq '(') { }"}],[1240,{"text":"if ($#ValClass == 2 and $ValClass[2] eq 'a') { }"}],[1240,{"text":"elsif ($#ValClass == 2 and $ValClass[2] eq 'h') { }"}],[1240,{"text":"elsif ($ValClass[2] eq 'f' and $ValPerl[2] eq 'keys' || $ValPerl[2] eq 'values') { }"}],[1240,{"text":"elsif ($ValPerl[2] eq '(' and ($end_pos = matching_br(2)) == $#ValClass) { }"}],[1240,{"text":"elsif ($ValPerl[2] =~ /<\\w*>/) { }"}],[1240,{"text":"elsif ($ValClass[2] eq 'a' and $ValPerl[3] eq '=') { }"}],[1209,{"text":"if ($ValClass[1] eq \"=\")"}],[1371,{"text":"if ($pd != -1 and scalar @ValClass == 4 and $ValClass[2] eq \"\\\\\" and $ValClass[3] eq \"i\")"}],[1387,{"text":"if ($end_pos == $#ValClass)"}],[1385,{"text":"if ($#ValClass >= 1 and $ValClass[1] eq \"(\")"}],[1390,{"text":"if ($#ValClass >= 1) { }"}],[1389,{"text":"if ($add_parens == 1)"}],[1380,{"text":"if (defined $ValType[0] and $ValType[0] eq \"P\" and $ValPerl[0] ne \"for\" and $ValPerl[0] ne \"foreach\")"}],[1399,{"text":"if ($TokenStr =~ /^c\\([!n]f\\(?/ and $ValPerl[3] eq 'open') { }"}],[1399,{"text":"elsif ($TokenStr =~ /^c\\([!n]f\\(?/ and $ValPerl[3] eq 'opendir') { }"}],[1409,{"text":"if ($ValClass[1] ne \"(\")"}],[1415,{"text":"if $adjust == -1"}],[1418,{"text":"if ($adjust) { }"}],[1430,{"text":"unless $was_block"}],[1408,{"text":"if ($ValPerl[0] eq 'elsif') { }"}],[1408,{"text":"elsif ($ValPerl[0] eq 'else') { }"}],[1408,{"text":"elsif ($ValPerl[0] eq 'eval') { }"}],[1408,{"text":"elsif ($ValPerl[0] eq 'do') { }"}],[1441,{"text":"if ($#ValPerl == 0) { }"}],[1454,{"text":"if ($#ValPerl == 0) { }"}],[1438,{"text":"if ($ValPerl[0] eq 'substr') { }"}],[1438,{"text":"elsif ($ValPerl[0] eq 'chomp') { }"}],[1438,{"text":"elsif ($ValPerl[0] eq 'chop') { }"}],[1438,{"text":"elsif ($ValPerl[0] eq 'open') { }"}],[1438,{"text":"elsif ($ValPerl[0] eq 'opendir') { }"}],[1438,{"text":"elsif ($ValPerl[0] eq 'pos') { }"}],[1492,{"text":"if (length $TokenStr == 1) { }"}],[1492,{"text":"elsif ($CurSub eq '__main__' and scalar @eval_stack == 0) { }"}],[1503,{"text":"if ($ValClass[$right_br + 1] =~ /[0o]/) { }"}],[1503,{"text":"elsif ($ValClass[$right_br + 1] eq '=') { }"}],[1527,{"text":"if $ValClass[1] eq \"(\" and next_same_level_tokens(\"=,\", 2, $#ValClass - 1) != -1"}],[1530,{"text":"if $add_paren"}],[1522,{"text":"if ($#ValClass != 0)"}],[1536,{"text":"if (&Perlscan::return_in_BEGIN_needs_raise()) { }"}],[1568,{"text":"if ($Pythonizer::CurNest) { }"}],[1553,{"text":"if ($ValClass[1] eq 'i' and $LocalSub{$ValPy[1]} and $CurSub ne '__main__') { }"}],[1553,{"text":"elsif ($ValClass[1] eq '\\\\' and $ValClass[2] eq 'i' and $LocalSub{$ValPy[2]} and $CurSub ne '__main__') { }"}],[1553,{"text":"elsif ($ValClass[1] eq '&' and $ValClass[2] eq 's' and $CurSub ne '__main__') { }"}],[1553,{"text":"elsif ($ValClass[1] eq 'f' and $#ValClass == 1) { }"}],[1579,{"text":"if ($ValPerl[0] eq 'next' || $ValPerl[0] eq 'last' and &Perlscan::next_last_needs_raise(0)) { }"}],[1590,{"text":"if $add_paren"}],[1594,{"text":"if ($ValPerl[1] eq &Perlscan::cur_loop_label() and $ValPerl[0] eq 'redo' || !&Perlscan::next_last_needs_raise(0)) { }"}],[1577,{"text":"if ($#ValClass == 0) { }"}],[1577,{"text":"elsif ($ValPy[0] eq 'return') { }"}],[1577,{"text":"elsif ($ValClass[1] eq '(') { }"}],[1577,{"text":"elsif ($ValClass[1] eq 'i' and $ValPerl[0] eq 'next' || $ValPerl[0] eq 'last' || $ValPerl[0] eq 'redo') { }"}],[1521,{"text":"if ($ValPy[0] eq 'return' and scalar @eval_stack != 0) { }"}],[1521,{"text":"elsif ($ValPy[0] eq 'return' and &Perlscan::in_BEGIN() and not &Perlscan::in_sub()) { }"}],[1521,{"text":"elsif ($ValPy[0] eq 'return' and $CurSub eq '__main__' and $nested_sub_at_level < 0) { }"}],[1521,{"text":"elsif ($ValPerl[0] eq 'use' or $ValPerl[0] eq 'require' or $ValPerl[0] eq 'no') { }"}],[1521,{"text":"elsif ($ValPerl[0] eq 'goto') { }"}],[1615,{"text":"if ($ValPy[0] eq \"main\" and $Pythonizer::CurNest == 0)"}],[1613,{"text":"if ($ValClass[2] eq ')') { }"}],[1613,{"text":"elsif ($ValClass[2] eq 'f' and $ValClass[3] ne '(' || $ValClass[3] eq '(' && matching_br(3) == $right_br - 1) { }"}],[1611,{"text":"if ($#ValClass > 0 and $ValClass[1] eq '(') { }"}],[1611,{"text":"elsif ($#ValClass == 1 and $ValClass[1] eq ':') { }"}],[1648,{"text":"if ($k < 0)"}],[1657,{"text":"if ($ValPy[0] =~ /$DEFAULT_MATCH:=/)"}],[1663,{"text":"if ($debug >= 1)"}],[1666,{"text":"if ($CurSub eq \"__main__\" and scalar @eval_stack == 0 and $nested_sub_at_level < 0)"}],[693,{"text":"if ($ValClass[0] eq '}') { }"}],[693,{"text":"elsif ($ValClass[0] eq '{') { }"}],[693,{"text":"elsif ($ValClass[0] eq '(') { }"}],[693,{"text":"elsif ($ValPy[0] eq 'NoTrans!') { }"}],[693,{"text":"elsif ($ValPerl[0] eq 'sub' and $#ValClass >= 1 and exists $nested_subs{$ValPerl[1]}) { }"}],[693,{"text":"elsif ($ValPerl[0] eq 'sub' and $#ValClass >= 1 and $ValPy[0] ne '#NoTrans!') { }"}],[693,{"text":"elsif ($ValPerl[0] =~ /^(?:BEGIN|UNITCHECK|CHECK|INIT)$/) { }"}],[693,{"text":"elsif ($ValPerl[0] eq 'close') { }"}],[693,{"text":"elsif ($ValPerl[0] =~ /^(?:say|print|printf)$/) { }"}],[693,{"text":"elsif ($ValPerl[0] =~ /^warn$/) { }"}],[693,{"text":"elsif ($ValClass[0] eq 's') { }"}],[693,{"text":"elsif ($ValClass[0] eq 't') { }"}],[693,{"text":"elsif ($ValClass[0] eq 'h') { }"}],[693,{"text":"elsif ($ValClass[0] eq 'a') { }"}],[693,{"text":"elsif ($ValClass[0] eq 'G' and $ValClass[1] eq '=') { }"}],[693,{"text":"elsif ($ValClass[0] eq 'c') { }"}],[693,{"text":"elsif ($ValClass[0] eq 'C') { }"}],[693,{"text":"elsif ($ValClass[0] eq 'f') { }"}],[693,{"text":"elsif ($ValClass[0] eq 'x') { }"}],[693,{"text":"elsif ($ValClass[0] eq 'd') { }"}],[693,{"text":"elsif ($ValClass[0] eq '(') { }"}],[693,{"text":"elsif ($ValClass[0] eq 'k') { }"}],[693,{"text":"elsif ($ValClass[0] eq 'i') { }"}],[693,{"text":"elsif (($split = index($TokenStr, '~')) > -1 and $ValPerl[$split] ne '~') { }"}],[693,{"text":"elsif (index($TokenStr, 'D') != -1) { }"}],[693,{"text":"elsif ($ValClass[0] eq 'q' and substr($ValPy[0], 0, 1) eq '(' and substr($ValPy[0], -1, 1) eq ')') { }"}],[1673,{"text":"if $Pythonizer::IntactLine"}],[1680,{"text":"if (substr($key, 0, 2) ne \"__\")"}],[1679,{"text":"if ($import_perllib) { }"}],[1679,{"text":"elsif (exists $PYF_CALLS{$key}) { }"}],[1691,{"text":"if ($value == 1)"}],[1704,{"text":"if (scalar @NoTrans > 0)"}],[1709,{"text":"if $black"}],[211,{"text":"if (exists $ENV{'PERL5PATH'}) { }"}],[1741,{"text":"if (($k = next_same_level_token('=', $start, $end_pos)) > -1 and not $ValClass[$k - 1] =~ /[ahs]/ && $ValPy[$k - 1] =~ /[A-Za-z0-9_]+/) { }"}],[1741,{"text":"elsif ($ValClass[$start] eq 'f' and $ValPerl[$start] eq 'chop' || $ValPerl[$start] eq 'chomp' and $ValClass[$start + 1] eq '(' and ($k = next_same_level_token('=', $start + 2, $end_pos)) > -1) { }"}],[1765,{"text":"if ($add_right_paren)"}],[1778,{"text":"if $k >= 3"}],[1773,{"text":"if ($no_delete) { }"}],[1780,{"text":"$no_delete ? :"}],[1781,{"text":"if $debug"}],[1749,{"text":"if ($need_deferred_statement)"}],[1793,{"text":"if scalar @ValClass < 2"}],[1796,{"text":"if $ValPerl[0] eq \"--\""}],[1799,{"text":"if $ValPerl[$#ValClass] eq \"--\""}],[1795,{"text":"if ($ValClass[0] eq '^') { }"}],[1795,{"text":"elsif ($ValClass[$#ValClass] eq '^' and $ValClass[0] eq 's') { }"}],[1807,{"text":"if $debug >= 1"}],[1822,{"text":"$result == -1 ? :"}],[1820,{"text":"if ($ValClass[$pos] eq \"(\")"}],[1826,{"text":"$result == -1 ? :"}],[1824,{"text":"if ($ValClass[$pos] =~ /[if]/ and $pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq \"(\")"}],[1833,{"text":"$result == -1 ? :"}],[1831,{"text":"if ($pos + 3 <= $#ValClass and $ValClass[$pos + 3] eq \"(\")"}],[1830,{"text":"if ($pos + 2 <= $#ValClass and $ValClass[$pos + 2] eq \"i\")"}],[1829,{"text":"if ($pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq \"D\")"}],[1853,{"text":"if $cl eq \".\""}],[1855,{"text":"if $ValPerl[$p] eq \"~\""}],[1854,{"text":"if ($cl eq \"~\")"}],[1862,{"text":"if ($p != 0 and $ValClass[$p - 1] eq ')' || $ValClass[$p - 1] eq 'q' && $ValPy[$p - 1] =~ /\\.split\\(\\)$/)"}],[1860,{"text":"if ($left and $cl eq \"*\" and $ValPerl[$p] eq \"x\")"}],[1867,{"text":"if not $left and $cl eq \"*\" and $ValPerl[$p] eq \"x\""}],[1868,{"text":"if $cl eq \">\" and $ValPerl[$p] =~ /^[a-z]/"}],[1869,{"text":"if $cl eq \"=\" and $ValPerl[$p] eq \".=\""}],[1870,{"text":"if $cl eq \"=\" and $ValPerl[$p] eq \"=\""}],[1875,{"text":"unless $left"}],[1877,{"text":"unless $left"}],[1858,{"text":"if (index('HI^>=+*/%-', $cl) != -1) { }"}],[1858,{"text":"elsif (index('&|', $cl) != -1) { }"}],[1858,{"text":"elsif ($cl eq 'f' and exists $PyFuncType{$ValPy[$p]}) { }"}],[1858,{"text":"elsif ($cl eq 'f' and exists $FuncType{$ValPerl[$p]}) { }"}],[1891,{"text":"if $k < $i"}],[1894,{"text":"if ($i - 1 >= $start)"}],[1898,{"text":"if ($k + 1 <= $limit)"}],[1903,{"text":"defined $t_left ? :"}],[1907,{"text":"if $p_right > $p_left"}],[1904,{"text":"if (defined $t_left and defined $t_right)"}],[1909,{"text":"unless defined $t"}],[1910,{"text":"if defined $type and index(\"IF\", $type) != -1 and defined $t and $t ne \"I\""}],[1912,{"text":"if ($debug >= 3 and defined $converter)"}],[1917,{"text":"unless defined $converter"}],[1924,{"text":"if $debug >= 3"}],[1922,{"text":"if ($ValPerl[$k + 1] ne '=') { }"}],[1936,{"text":"if $debug >= 3"}],[1933,{"text":"if ($ValPerl[$j] eq '=') { }"}],[1921,{"text":"if ($k + 1 <= $#ValClass and $ValClass[$k + 1] eq '=') { }"}],[1921,{"text":"elsif (($j = next_same_level_token('=', $i, $k)) != -1) { }"}],[1949,{"text":"if ($debug >= 3)"}],[1970,{"text":"if $op eq \"<<\""}],[1971,{"text":"if $op eq \">>\""}],[1972,{"text":"if $op eq \"**\""}],[1986,{"text":"if $debug >= 1"}],[1985,{"text":"if (is_expression_simple($start, $equals - 1))"}],[2004,{"text":"if $ValPerl[$sub_start - 1] ne \"{\" and $ValPerl[$sub_start - 1] ne \"[\""}],[2005,{"text":"if $sub_end < 0"}],[2007,{"text":"if $debug >= 3"}],[2006,{"text":"if (is_expression_simple($sub_start, $sub_end))"}],[2028,{"text":"if $debug >= 5"}],[2030,{"text":"if $debug >= 1"}],[2041,{"text":"unless defined $type"}],[2042,{"text":"unless exists $CONVERTER_MAP{$type}"}],[2043,{"text":"if $ValClass[$var_start] eq \"y\""}],[2045,{"text":"if $type eq $v_type"}],[2046,{"text":"if $type eq \"N\" and $v_type =~ /[IF]/"}],[2054,{"text":"unless ($ValPy[$var_start] =~ /\\./ or $ValPy[$var_start] =~ /e/i)"}],[2050,{"text":"if ($type eq 'I') { }"}],[2050,{"text":"elsif ($type eq 'F') { }"}],[2050,{"text":"elsif ($type eq 'S') { }"}],[2063,{"text":"if ($type eq 'I') { }"}],[2063,{"text":"elsif ($type eq 'F' or $type eq 'N') { }"}],[2049,{"text":"if ($ValClass[$var_start] eq 'd') { }"}],[2049,{"text":"elsif ($ValClass[$var_start] eq '\"' and substr($ValPy[$var_start], 0, 1) ne 'f') { }"}],[2048,{"text":"if ($var_start == $var_end)"}],[2090,{"text":"if ($debug >= 3)"}],[2099,{"text":"if scalar @ValClass == 0 or $ValClass[0] eq \"k\" and $ValPerl[0] eq \"sub\""}],[2100,{"text":"if $start > $limit"}],[2101,{"text":"if $ValClass[$start] eq \"f\" and $ValPy[$start] eq \"print\""}],[2105,{"text":"if $debug >= 5"}],[2115,{"text":"if $i + 2 <= $limit and $ValClass[$i + 1] eq \"(\" and $ValClass[$i + 2] eq \")\""}],[2109,{"text":"if (exists $PyFuncType{$ValPy[$i]}) { }"}],[2109,{"text":"elsif (exists $FuncType{$ValPerl[$i]}) { }"}],[2121,{"text":"if $endbr < 0"}],[2124,{"text":"$comma == -1 ? :"}],[2126,{"text":"if $t eq \"?\""}],[2127,{"text":"if $t eq \":\""}],[2128,{"text":"if $t eq \"?\""}],[2132,{"text":"if $j + 1 == $comma"}],[2144,{"text":"if ($ValClass[$j] eq 'q' and $ValClass[$ep] eq 'i' and $j + 1 == $ep) { }"}],[2144,{"text":"elsif ($ValClass[$j] =~ /[ah]/) { }"}],[2130,{"text":"if ($t eq 'H' and $ValClass[$j] =~ /[isf]/) { }"}],[2130,{"text":"elsif ($t eq 'S' and $ValPerl[$i] eq 'grep' and $ValPerl[$i + 1] eq '{') { }"}],[2163,{"text":"if $end_pos < 0"}],[2161,{"text":"if ($i != 0 and $ValClass[$i - 1] eq \"(\")"}],[2169,{"text":"$comma == -1 ? :"}],[2170,{"text":"if $close != -1 and $close - 1 < $ep"}],[2173,{"text":"if substr($f_type, $t_pos + 1, 1) eq \"?\""}],[2174,{"text":"if $t eq \"?\""}],[2177,{"text":"if $t eq \"?\""}],[2178,{"text":"if $t ne \"a\""}],[2175,{"text":"if ($t eq \":\")"}],[2183,{"text":"if $j + 1 == $comma"}],[2194,{"text":"if ($ValClass[$j] eq 'q' and $ValClass[$ep] eq 'i' and $j + 1 == $ep) { }"}],[2194,{"text":"elsif ($ValClass[$j] =~ /[ah]/) { }"}],[2181,{"text":"if ($t eq 'H' and $ValClass[$j] =~ /[isf]/) { }"}],[2181,{"text":"elsif ($optional and $j == 0 || $ValClass[$j - 1] ne ',' and index('^*~/%.HI>&|0or?:=,A', $ValClass[$j]) != -1) { }"}],[2207,{"text":"if ($comma >= 0 and $ValClass[$comma] ne \",\")"}],[2214,{"text":"if $k > $end_pos"}],[2119,{"text":"if ($i + 1 <= $#ValClass and $ValClass[$i + 1] eq '(') { }"}],[2220,{"text":"if $endbr < 0"}],[2223,{"text":"$comma == -1 ? :"}],[2224,{"text":"if ($ValClass[$j] eq \"a\")"}],[2239,{"text":"if $end_pos < 0"}],[2237,{"text":"if ($i != 0 and $ValClass[$i - 1] eq \"(\")"}],[2244,{"text":"$comma == -1 ? :"}],[2245,{"text":"if ($ValClass[$j] eq 'a') { }"}],[2245,{"text":"elsif (index('^*~/%+-.HI>&|0or?:=,A', $ValClass[$j]) != -1) { }"}],[2258,{"text":"if ($comma >= 0 and $ValClass[$comma] ne \",\")"}],[2265,{"text":"if $k > $end_pos"}],[2218,{"text":"if ($i + 1 <= $#ValClass and $ValClass[$i + 1] eq '(') { }"}],[2277,{"text":"if ($ValPerl[$j] eq '[') { }"}],[2277,{"text":"elsif ($ValPerl[$j] eq '(') { }"}],[2283,{"text":"if $m < 0"}],[2288,{"text":"if $t eq $ty"}],[2286,{"text":"if ($ValClass[$i] =~ /[ah]/ and $m == $k and ($ty = &Pythonizer::expr_type($j + 1, $k - 1, $CurSub)) =~ /^a/)"}],[2274,{"text":"if ($firstsub != -1)"}],[2272,{"text":"if ($k != $i)"}],[2323,{"text":"if $k < 0"}],[2324,{"text":"if ($k + 1 < $limit and defined($ot = operator_type($k + 1, 1))) { }"}],[2324,{"text":"elsif (defined $type and $type =~ /^a of / and next_same_level_token(',', $i + 1, $k - 1) != -1) { }"}],[2342,{"text":"if ($k > 0 and defined($ot = operator_type($k - 1, 0)))"}],[2358,{"text":"if $k < 0"}],[2366,{"text":"if $i + 1 >= $k"}],[2370,{"text":"if ($colon != -1)"}],[2381,{"text":"if $k < 0"}],[2106,{"text":"if ($ValClass[$i] eq 'f') { }"}],[2106,{"text":"elsif ($ValClass[$i] eq 'i' and $LocalSub{$ValPy[$i]} || $i + 1 <= $#ValClass && $ValClass[$i + 1] eq '(') { }"}],[2106,{"text":"elsif ($ValClass[$i] =~ /[sd\"]/ or $ValClass[$i] =~ /[ah]/ and not $ValPy[$i] =~ /^len\\(/) { }"}],[2106,{"text":"elsif ($ValClass[$i] =~ /[ah]/ and $ValPy[$i] =~ /^len\\(/) { }"}],[2106,{"text":"elsif ($ValClass[$i] eq '(' and $ValPerl[$i] eq '(') { }"}],[2106,{"text":"elsif ($ValClass[$i] eq ')' and $ValPerl[$i] eq ')') { }"}],[2106,{"text":"elsif ($opt = operator_type($i, 0) and $opt ne $type and $i + 1 < $#ValClass and $ValClass[$i + 1] eq '(' and $ValPerl[$i + 1] eq '(') { }"}],[2106,{"text":"elsif ($ValClass[$i] eq ';' and $ValPy[0] ne 'for') { }"}],[2106,{"text":"elsif ($ValClass[$i] eq ':' and $ValPy[$i] eq 'if') { }"}],[2106,{"text":"elsif ($ValClass[$i] eq '(' and $ValPerl[$i] ne '(' and defined $type and $type =~ /^a of /) { }"}],[2399,{"text":"if ($total_adjust and $debug >= 3)"}],[2411,{"text":"if $ValClass[0] eq \"f\" and $ValPerl[0] eq \"delete\""}],[2414,{"text":"if $ValClass[0] =~ /[Cc]/ and 1 <= $#ValClass and $ValClass[1] eq \"(\""}],[2421,{"text":"if $sub_start == 0"}],[2424,{"text":"if $sub_start == 0"}],[2419,{"text":"if ($ValClass[$i] eq '@') { }"}],[2419,{"text":"elsif ($ValClass[$i] eq '(' and $ValPerl[$i] eq '(') { }"}],[2419,{"text":"elsif ($ValClass[$i] ne 'a') { }"}],[2428,{"text":"if $sub_start > $#ValClass"}],[2429,{"text":"if $ValPerl[$sub_start] ne \"[\" and $ValPerl[$sub_start] ne \"{\""}],[2431,{"text":"if $sub_end < 0"}],[2435,{"text":"if $ValClass[$j] eq \",\""}],[2436,{"text":"if $ValClass[$j] eq \"r\""}],[2440,{"text":"if (&Pythonizer::expr_type($sub_start + 1, $sub_end - 1, $CurSub) =~ /^a/)"}],[2438,{"text":"unless ($commas or $range)"}],[2446,{"text":"if $open eq \"{\""}],[2451,{"text":"if ($open eq '{') { }"}],[2467,{"text":"if ($debug > 3)"}],[2472,{"text":"if ($debug > 3)"}],[2449,{"text":"if ($commas >= 1)"}],[2417,{"text":"if (index(\"a\\@(\", $ValClass[$i]) != -1)"}],[2494,{"text":"if $to < 0"}],[2495,{"text":"if $ValClass[$i + 2] eq \"s\""}],[2496,{"text":"if $ValClass[$i + 2] eq \"i\""}],[2503,{"text":"if $ValClass[$i + 1] eq \"i\""}],[2492,{"text":"if ($i < $#ValClass and $ValClass[$i + 1] eq '(' and $ValPerl[$i + 1] eq '{') { }"}],[2492,{"text":"elsif ($i < $#ValClass and $ValClass[$i + 1] eq 's' and $i - 1 < 0 || index(')sdah\"iifx', $ValClass[$i - 1]) == -1) { }"}],[2512,{"text":"if $to < 0"}],[2514,{"text":"if (($j = index($TokenStr, \"A\", $i + 1)) > 0 and $j < $to)"}],[2521,{"text":"if $to < 0"}],[2522,{"text":"if $to + 3 > $#ValClass"}],[2523,{"text":"if $ValClass[$to + 1] ne \"(\""}],[2524,{"text":"if $ValPy[$to + 1] ne \"[\""}],[2491,{"text":"if ($ValClass[$i] eq '&' or $ValClass[$i] eq '@' or $ValClass[$i] eq '%') { }"}],[2491,{"text":"elsif ($ValClass[$i] eq '(' and $ValPerl[$i] eq '{') { }"}],[2491,{"text":"elsif ($ValClass[$i] eq 's' and $ValPerl[$i] eq '$' and $i + 3 <= $#ValClass and $ValClass[$i + 1] eq '(' and $ValPerl[$i + 1] eq '{' and $ValClass[$i + 2] ne '\"') { }"}],[2564,{"text":"if ($ValPerl[$i] eq 're') { }"}],[2564,{"text":"elsif ($ValPerl[$i] eq $ARRAY_INDEX_FUNCS{'~re'}) { }"}],[2563,{"text":"if ($ValClass[$i] eq \"f\")"}],[2561,{"text":"if ($q < 0)"}],[2574,{"text":"if $q < 0"}],[2576,{"text":"unless $ValPy[$q] =~ /re\\.[GE]/"}],[2596,{"text":"if $debug >= 5"}],[2602,{"text":"if $debug >= 5"}],[2606,{"text":"if $#ValClass > 0"}],[2578,{"text":"if ($ValPy[$q] =~ /re\\.E/)"}],[2610,{"text":"unless $ValPy[$q] =~ /re\\.G/"}],[2627,{"text":"if $debug"}],[2615,{"text":"if ($ValClass[0] eq 'c' and $ValPerl[0] eq 'while') { }"}],[2640,{"text":"if scalar @ValClass < 3"}],[2641,{"text":"if $ValClass[-1] ne \"f\""}],[2642,{"text":"if $ValPerl[-1] ne \"undef\""}],[2643,{"text":"if $ValClass[-2] ne \"=\""}],[2644,{"text":"if $ValClass[-3] ne \"s\""}],[2646,{"text":"if ($ValClass[0] eq \"t\")"}],[2654,{"text":"if $ValClass[$i] eq \"=\""}],[2656,{"text":"if $ValClass[-1] eq \",\""}],[2669,{"text":"unless $adjust"}],[2676,{"text":"if ($ValPerl[$pos] eq '||=' or $ValPerl[$pos] eq '&&=') { }"}],[2687,{"text":"if ($ValPerl[$pos] eq 'cmp' or $ValPerl[$pos] eq '<=>') { }"}],[2698,{"text":"if $adjust < 0"}],[2708,{"text":"if ($pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq 'i' and not $LocalSub{$ValPy[$pos + 1]} and not $Constants{$ValPy[$pos + 1]} and $pos == 0 || !($ValClass[$pos - 1] =~ /[s)]/)) { }"}],[2720,{"text":"if ($oorp >= 0 and exists $VarType{$ValPy[$oorp]} and exists $VarType{$ValPy[$oorp]}{$CurSub} and $VarType{$ValPy[$oorp]}{$CurSub} eq \"H\" and $ValPerl[$oorp + 2] eq 'read' || $ValPerl[$oorp + 2] eq 'sysread')"}],[2749,{"text":"if ($func eq 'open') { }"}],[2749,{"text":"elsif ($func eq 'fdopen') { }"}],[2737,{"text":"if ($ValPerl[$oop + 2] eq 'write') { }"}],[2735,{"text":"if ($oop >= 0 and exists $VarType{$ValPy[$oop]} and exists $VarType{$ValPy[$oop]}{$CurSub} and $VarType{$ValPy[$oop]}{$CurSub} eq 'H' and $ValPerl[$oop + 2] eq 'open' || $ValPerl[$oop + 2] eq 'fdopen' || $ValPerl[$oop + 2] eq 'binmode' || $ValPerl[$oop + 2] eq 'write') { }"}],[2735,{"text":"elsif ($oop >= 0 and $ValPerl[$oop + 2] eq 'isa') { }"}],[2772,{"text":"if ($ValPy[$pos] eq \".read\" or $ValPy[$pos] eq \".sysread\")"}],[2792,{"text":"if ($ValPerl[$pos] eq \"eval\")"}],[2798,{"text":"if $st > $limit"}],[2809,{"text":"if $arrow == -1"}],[2805,{"text":"if ($pos + 1 <= $limit and $ValClass[$pos + 1] eq \"(\" and $ValPerl[$pos + 1] eq \"(\")"}],[2815,{"text":"if $st > $limit"}],[2821,{"text":"if ($pos - 1 >= 0 and $pos + 1 <= $limit and $ValPy[$pos] =~ /\\.split\\(\\)$/ and $ValClass[$pos - 1] eq \"(\" and $ValPerl[$pos - 1] eq \"[\" and $ValClass[$pos + 1] eq \")\" and $ValPerl[$pos + 1] eq \"]\")"}],[2829,{"text":"if $st > $limit"}],[2836,{"text":"$ValClass[$pos] eq 'a' ? :"}],[2837,{"text":"$ValClass[$pos] eq 'a' ? :"}],[2838,{"text":"if ($ValPerl[$pos - 1] eq $open and $ValPerl[$pos + 1] eq $close and $pos - 2 < 0 || !($ValClass[$pos - 2] =~ /[sahG\\)]/))"}],[2835,{"text":"if ($pos - 1 >= 0 and $pos + 1 <= $limit)"}],[2847,{"text":"if $st > $limit"}],[2860,{"text":"if ($open != 0 and $ValClass[$open - 1] eq '(') { }"}],[2860,{"text":"elsif (not $autovivification) { }"}],[2870,{"text":"if $nlet >= 0"}],[2871,{"text":"if ($add_closing_bracket)"}],[2856,{"text":"unless (&Pythonizer::expr_type($open, $pos - 1, $CurSub) =~ /^a/)"}],[2855,{"text":"if ($open >= 0)"}],[2853,{"text":"if ($ValPerl[$pos] eq \"x\" and $pos != 0 and $ValClass[$pos - 1] eq \")\" and $ValPerl[$pos - 1] eq \")\")"}],[2882,{"text":"if $st > $limit"}],[2889,{"text":"if ($#ValClass != 0 and $ValClass[$#ValClass] eq \"k\" and $ValPerl[$#ValClass] eq \"sub\")"}],[2920,{"text":"if $deferred_statement < 2 and not defined $split_multiple_assignment"}],[2924,{"text":"scalar @eval_stack == 0 ? :"}],[2935,{"text":"if ($debug >= 5)"}],[2939,{"text":"if $line =~ /^\\s*}(;)$/"}],[2940,{"text":"if $line =~ /^\\s*}(;?\\s*#.*)$/"}],[2947,{"text":"if ($debug >= 5)"}],[2953,{"text":"if ($debug >= 5)"}],[2944,{"text":"if (rindex($prev_line, $line) != -1) { }"}],[2944,{"text":"elsif (substr($line, 0, 2) eq '},' and rindex($prev_line, '}' . substr($line, 2)) != -1) { }"}],[2941,{"text":"if (not $comment and &Perlscan::could_be_anonymous_sub_close() and $line ne \"}\" and $line ne \"};\")"}],[2962,{"text":"if ($last_c eq \"}\" and $ValClass[-1] ne ')' || $prev_lno == $.)"}],[2967,{"text":"if (substr($prev_line, -2, 2) eq \"};\" and $prev_lno == $. and $line =~ /};/)"}],[2971,{"text":"if ($last_c eq ';') { }"}],[2984,{"text":"if (exists $eval_stack[-1]{'assignment'})"}],[2997,{"text":"if ($prev_line =~ /unshift\\s*\\(?([^,]+),/)"}],[3006,{"text":"$ValClass[1] eq '(' ? :"}],[2982,{"text":"if (scalar @eval_stack != 0) { }"}],[2982,{"text":"elsif ($ValPerl[0] eq 'undef' and $#ValClass >= 1) { }"}],[2982,{"text":"elsif ($ValPerl[0] eq 'unshift') { }"}],[2982,{"text":"elsif ($Perlscan::PythonCode[0] =~ /^(?:(?:raise )|(?:return ))/) { }"}],[2982,{"text":"elsif ($Perlscan::PythonCode[0] =~ /^[\\w.]+\\s*=/) { }"}],[3012,{"text":"if $return"}],[3017,{"text":"unless $prev_line =~ /\\) =/"}],[3020,{"text":"if ($prev_line =~ s/^\\s*(?:(?:\\+\\+)|(?:--))//) { }"}],[3020,{"text":"elsif ($prev_line =~ /\\+\\+\\s*;/ or $prev_line =~ /\\+\\+\\s*$/ or $prev_line =~ /\\+\\+\\s+#/) { }"}],[3020,{"text":"elsif ($prev_line =~ /\\+\\+\\s*}/) { }"}],[3020,{"text":"elsif ($prev_line =~ /--\\s*;/ or $prev_line =~ /--\\s*$/ or $prev_line =~ /--\\s+#/) { }"}],[3020,{"text":"elsif ($prev_line =~ /--\\s*}/) { }"}],[3019,{"text":"if ($p < 0) { }"}],[2958,{"text":"if ($generated_code == 0 and index('fds\"(-a', $ValClass[0]) != -1) { }"}],[2958,{"text":"elsif ($ValClass[0] eq 'f' or $ValClass[0] eq 'i' and $LocalSub{$ValPy[0]} or ok_to_insert_return()) { }"}],[2958,{"text":"elsif (not $ValClass[0] =~ /[cCk]/ and index($TokenStr, '=') > 0) { }"}],[3052,{"text":"if ($debug >= 5)"}],[2925,{"text":"if ($CurSub ne '__main__' || scalar @eval_stack != 0 || $nested_sub_at_level > 0 and defined $line and $line eq '}' || $line =~ /^}\\s*#/ || $line eq '};' || substr($line, 0, 1) eq '}' && &Perlscan::could_be_anonymous_sub_close() || $line =~ /^\\s*}\\s*$/ || $line =~ /^\\s*};\\s*$/ || $line =~ /^\\s*};\\s*#/ and $ValPerl[0] ne \"return\" and $Perlscan::nesting_level == 1 || $Pythonizer::CurNest == $eval_nest + 1 || $Perlscan::nesting_level == $nested_sub_at_level)"}],[3059,{"text":"if (defined $TrStatus and $TrStatus < 0)"}],[3056,{"text":"if ($reparse_with_return) { }"}],[3066,{"text":"scalar @eval_stack == 0 ? :"}],[3067,{"text":"if ($debug >= 3 and scalar @eval_stack)"}],[3072,{"text":"if (exists $SpecialVarsUsed{'$@'})"}],[3080,{"text":"if (exists $SpecialVarsUsed{'$@'}) { }"}],[3077,{"text":"if (exists $eval_stack[-1]{'had_return'})"}],[3087,{"text":"if (exists $SpecialVarsUsed{'$@'}) { }"}],[3093,{"text":"if $traceback"}],[3094,{"text":"if (exists $SpecialVarsUsed{'$@'}) { }"}],[3108,{"text":"$ValClass[0] eq 't' ? :"}],[3105,{"text":"if ($ValClass[0] eq 's' and $ValPy[0] eq $ValPy[2]) { }"}],[3103,{"text":"if (exists $eval_stack[-1]{'assignment'})"}],[3070,{"text":"if ($eval_nest == $Pythonizer::CurNest and not $Perlscan::PREV_HAD_COLON)"}],[3115,{"text":"if ($debug >= 3)"}],[3114,{"text":"if ($context_manager_nest == $Pythonizer::CurNest - 1 and $ValClass[0] ne \"c\")"}],[3122,{"text":"if ($Perlscan::nesting_level < $nested_sub_at_level)"}],[3132,{"text":"if ($ValClass[$i] eq \"s\" and $ValClass[$i + 1] eq \"(\")"}],[3144,{"text":"if (exists $new_state_var_name{$name})"}],[3156,{"text":"if (exists $VarType{$ValPy[$i]} and exists $VarType{$ValPy[$i]}{$CurSub})"}],[3154,{"text":"if (defined $ValClass[$i] and $ValClass[$i] =~ /[sah]/ and exists $new_state_var_name{$ValPy[$i]}) { }"}],[3154,{"text":"elsif (defined $ValClass[$i] and $ValClass[$i] =~ /[\"qx]/ || $ValClass[$i] eq 'f' && $ValPerl[$i] eq 're' and $ValPy[$i] =~ /\\br?f['\"]/) { }"}],[3170,{"text":"if ($debug >= 3)"}],[3173,{"text":"unless scalar @state_var and defined $state_var[0]"}],[3182,{"text":"if ($val eq \"\\$flag\")"}],[3180,{"text":"if (exists $new_state_var_init{$sv}) { }"}],[3180,{"text":"elsif (exists $VarType{$sv}{$sv_sub}) { }"}],[3202,{"text":"if ($start + 1 <= $#ValClass and $ValClass[$start + 1] eq \"(\")"}],[3209,{"text":"if ($k <= $#ValClass and $ValClass[$k] eq ',' || $ValClass[$k] eq 'D') { }"}],[3209,{"text":"elsif ($ValClass[$start + 1] eq 's' and $end_pos == $start + 1 || $ValClass[$start + 2] eq '(') { }"}],[3209,{"text":"elsif ($ValClass[$start + 1] eq 's' and $start + 3 >= $#ValClass and $ValClass[$start + 2] eq '.') { }"}],[3209,{"text":"elsif ($ValClass[$start + 1] eq 'i' and $LocalSub{$ValPy[$start + 1]} or not $Constants{$ValPy[$start + 1]} and $start + 3 < $#ValClass and $ValClass[$start + 2] eq '(') { }"}],[3226,{"text":"if scalar @_ >= 2"}],[3206,{"text":"if ($start + 1 <= $#ValClass and $ValClass[$start + 1] =~ /[is]/) { }"}],[3229,{"text":"if ($debug >= 3)"}],[3234,{"text":"if ($debug >= 3)"}],[3232,{"text":"if ($begin != 0 and $ValClass[$begin - 1] eq \"(\" and $ValClass[-1] eq \")\")"}],[3253,{"text":"if $comma < 0"}],[3257,{"text":"if $TrStatus < 0"}],[3263,{"text":"if ($comma + 1 <= $end_pos)"}],[3258,{"text":"if ($ValClass[$k] eq 'a' and $comma == $end_pos + 1) { }"}],[3251,{"text":"if ($ValPerl[$begin] eq 'printf') { }"}],[3273,{"text":"if $TrStatus < 0"}],[3275,{"text":"$ValPerl[$begin] eq 'print' || $ValPerl[$begin] eq 'printf' ? :"}],[3277,{"text":"if ($ValPerl[$begin] eq \"printf\")"}],[3280,{"text":"if (length $handle > 0) { }"}],[3249,{"text":"if ($end_pos >= $k) { }"}],[3290,{"text":"if ($Perlscan::PythonCode[-1] =~ qr/\\\\n[\"']$/ and not $Perlscan::PythonCode[-1] =~ qr/\\\\\\\\n[\"']$/) { }"}],[3289,{"text":"if ($ValPerl[$begin] eq 'print' || $ValPerl[$begin] eq 'printf' and $ValClass[-1] eq '\"') { }"}],[3289,{"text":"elsif ($ValPerl[$begin] eq 'print' or $ValPerl[$begin] eq 'printf') { }"}],[3299,{"text":"if ($handle)"}],[3318,{"text":"if ($start < 0 or $TrStatus < 0)"}],[3321,{"text":"scalar @_ > 1 ? :"}],[3322,{"text":"if ($debug >= 3)"}],[3330,{"text":"if (exists $SpecialVarR2L{$ValPy[$k]})"}],[3341,{"text":"if ($ValPerl[$#ValClass] eq '++') { }"}],[3339,{"text":"if ($ValPy[$k] =~ /^\\(len\\((.*)\\)-1\\)$/) { }"}],[3354,{"text":"if ($debug >= 3)"}],[3338,{"text":"if ($#ValClass - $start == 1) { }"}],[3337,{"text":"if ($ValClass[$#ValClass] eq \"^\")"}],[3370,{"text":"if (handle_assign_eval($split + 1))"}],[3369,{"text":"if ($split + 1 <= $#ValClass and $ValClass[$split + 1] eq \"C\")"}],[3380,{"text":"if ($ValClass[$x] =~ /[if]/ and $ValPerl[$x + 1] ne \"(\")"}],[3389,{"text":"if ($ValPy[$split] ne \"=\" and $ValPy[$split] ne \":=\")"}],[3385,{"text":"if ($extra >= 0)"}],[3377,{"text":"if ($extra >= 0 and $extra < $limit) { }"}],[3405,{"text":"if ($ValPy[$split] ne \"=\" and $ValPy[$split] ne \":=\")"}],[3419,{"text":"if ($ValPerl[$k] eq \"\\$?\" and substr($CurSub, 0, 7) eq \"__END__\")"}],[3404,{"text":"if ($ValPy[$k] =~ /^\\(len\\((.*)\\)-1\\)$/) { }"}],[3449,{"text":"unless $ValClass[$y] eq \"y\""}],[3451,{"text":"if $ValClass[$open] eq \"f\""}],[3470,{"text":"if $ValClass[$open] eq \"f\""}],[3467,{"text":"if ($ValClass[$open] eq 'q') { }"}],[3486,{"text":"if ($ValClass[$k] eq 'f' and $ValPerl[$k] eq 'undef') { }"}],[3486,{"text":"elsif ($ValClass[$k] eq 'G') { }"}],[3486,{"text":"elsif ($ValClass[$k] eq 's' and $ValClass[$k + 1] eq '(') { }"}],[3503,{"text":"if ($ValClass[$k] eq 'f' and $ValPerl[$k] eq 'undef') { }"}],[3503,{"text":"elsif ($ValClass[$k] eq 'G') { }"}],[3503,{"text":"elsif ($ValClass[$k] eq 's' and $ValClass[$k + 1] eq '(') { }"}],[3502,{"text":"if (substr($TokenStr, $k, 1) =~ /^[shafG]/)"}],[3538,{"text":"$import_perllib ? :"}],[3536,{"text":"if ($autovivification) { }"}],[3533,{"text":"if (substr($TokenStr, $k) =~ /^s\\([si\"]\\)=\\(\\)$/ and $ValPerl[$k + 1] eq \"{\" and $ValPy[$k + 5] eq \"(\")"}],[3549,{"text":"if ($ValClass[$k + 2] eq 'd') { }"}],[3547,{"text":"if ($ValClass[$k] eq \"s\" and $ValPerl[$k] eq \"\\$ARGV\" and $ValClass[$k + 1] eq \"(\")"}],[3559,{"text":"if $k < 0"}],[3403,{"text":"if ($split - $k == 1) { }"}],[3403,{"text":"elsif ($ValPerl[$k] eq '(' and $ValPerl[$k + 1] eq ')') { }"}],[3403,{"text":"elsif ($k + 2 < $split and $ValPerl[$k] eq '(' and $ValClass[$k + 1] eq 'a' and $ValPerl[$k + 2] eq ')') { }"}],[3403,{"text":"elsif ($ValPy[$k] eq '[' and $k + 7 < $#ValClass and $ValClass[$k + 1] eq 'f' and $ValClass[$k + 3] =~ /[as]/ and $ValClass[$k + 7] eq 'y' && $ValPerl[$k + 7] eq 'multi' || $k + 12 < $#ValClass && $ValClass[$k + 10] eq 'y' && $ValPerl[$k + 10] eq 'multi') { }"}],[3403,{"text":"elsif ($ValPy[$k] eq '[' and $k + 3 < $#ValClass and $ValClass[$k + 1] =~ /[as]/ and $ValClass[$k + 2] eq 'y' and $ValPerl[$k + 2] eq 'multi' and $ValPy[$k + 2] =~ /\\.get\\(/ and $ValPy[$k + 3] eq '[' || $ValClass[$k + 3] eq 'q' && $ValPy[$k + 3] =~ /\\.split\\(\\)$/ || $ValClass[$k + 3] eq 'f' && $ValPy[$k + 3] eq $CONVERTER_MAP{'a of S'} && $ValPy[$k + 5] eq '[') { }"}],[3403,{"text":"elsif ($ValPerl[$k] eq '(') { }"}],[3403,{"text":"elsif ($ValClass[$k] eq 'a' and $k + 1 <= $#ValClass and $ValClass[$k + 1] eq '(' and $ValPerl[$k + 1] eq '{') { }"}],[3562,{"text":"unless $skip_assign_op == 1"}],[3564,{"text":"if (defined $number_of_elements and rhs_has_same_number_of_elements($number_of_elements, $split + 1, $limit))"}],[3567,{"text":"if (defined $number_of_elements)"}],[3574,{"text":"if ($debug >= 3)"}],[3580,{"text":"if ($context != 1)"}],[3606,{"text":"if (exists $SubAttributes{$ValPy[$limit]}{'wantarray'} and list_or_scalar_context($start, $limit) == 1) { }"}],[3604,{"text":"if ($LocalSub{$ValPy[$limit]}) { }"}],[3604,{"text":"elsif ($Constants{$ValPy[$limit]}) { }"}],[3622,{"text":"if $ValPy[$limit] =~ /\\bre\\.G/"}],[3623,{"text":"if ($g_flag)"}],[3632,{"text":"if $debug >= 5"}],[3633,{"text":"if ($context == 1) { }"}],[3633,{"text":"elsif ($context == 0) { }"}],[3640,{"text":"if $g_flag"}],[3577,{"text":"if ($ValClass[$limit] eq 'x') { }"}],[3577,{"text":"elsif ($ValClass[$limit] eq 'f') { }"}],[3577,{"text":"elsif ($ValClass[$limit] eq 'i') { }"}],[3577,{"text":"elsif (defined $number_of_elements and $ValClass[$limit] eq 'h') { }"}],[3577,{"text":"elsif ($ValClass[$limit] eq 'q' and index($ValPy[$limit], ':=') > 0) { }"}],[3645,{"text":"if defined $number_of_elements"}],[3646,{"text":"if $add_right_paren"}],[3653,{"text":"if ($autovivification) { }"}],[3660,{"text":"if ($autovivification) { }"}],[3652,{"text":"if ($ValPerl[$k] eq '{') { }"}],[3667,{"text":"if defined $number_of_elements"}],[3668,{"text":"if $add_right_paren"}],[3669,{"text":"if ($extra >= 0)"}],[3682,{"text":"if $to < 0"}],[3680,{"text":"if ($ValClass[$split + 1] eq '(') { }"}],[3694,{"text":"if $k < 0"}],[3698,{"text":"if $k < 0"}],[3692,{"text":"if ($colon_pos > -1) { }"}],[3709,{"text":"if $k < 0"}],[3703,{"text":"if ($to == $k + 2) { }"}],[3713,{"text":"if $k < 0"}],[3702,{"text":"if ($bracketed) { }"}],[3718,{"text":"if $k < 0"}],[3715,{"text":"if ($colon_pos > -1)"}],[3720,{"text":"if defined $number_of_elements"}],[3721,{"text":"if $add_right_paren"}],[3726,{"text":"if ($k < 0 or $ValClass[$k] ne '=') { }"}],[3723,{"text":"if ($extra >= 0)"}],[3742,{"text":"if $ValPerl[$split + 1] eq \"{\""}],[3734,{"text":"if ($autovivification and $ValClass[$start] =~ /[ah]/) { }"}],[3734,{"text":"elsif ($autovivification and $ValClass[$split + 1] eq '(' and $ValPerl[$split + 1] ne '(' and not defined $number_of_elements) { }"}],[3749,{"text":"if ($ValClass[$start] eq \"h\" and &Pythonizer::expr_type($split + 1, $limit, $CurSub) =~ /^a/)"}],[3755,{"text":"if $k < 0"}],[3756,{"text":"if defined $number_of_elements"}],[3676,{"text":"if (index($TokenStr, '?', $split) != -1) { }"}],[3572,{"text":"if ($limit - $split == 1) { }"}],[3572,{"text":"elsif ($limit - $split == 2 and $ValClass[$split + 1] eq '(' and $ValClass[$split + 2] eq ')') { }"}],[3765,{"text":"if $k < 0"}],[3772,{"text":"if ($debug >= 1)"}],[3368,{"text":"if (($split = next_same_level_token('=', $k, $#ValClass)) != -1) { }"}],[3368,{"text":"elsif (($split = index($TokenStr, '~', $k)) > -1 and $ValPerl[$split] ne '~') { }"}],[3368,{"text":"elsif (index($TokenStr, 'D') != -1) { }"}],[3368,{"text":"elsif ($CurSub ne '__main__') { }"}],[3368,{"text":"elsif (scalar @ValClass == 1) { }"}],[3777,{"text":"if ($ValClass[0] eq \"s\" and $ValPerl[0] eq \"\\$|\")"}],[3785,{"text":"if ($k < 0 or $ValClass[$k] ne '=') { }"}],[3782,{"text":"if ($extra >= 0)"}],[3805,{"text":"unless $was_block"}],[3808,{"text":"if ($exp != $#ValClass)"}],[3811,{"text":"if ($was_block)"}],[3824,{"text":"if (exists $eval_suffix{$.}) { }"}],[3832,{"text":"if $debug"}],[3833,{"text":"if ($need_result)"}],[3841,{"text":"if exists $SpecialVarsUsed{'$@'}"}],[3842,{"text":"if ($need_result)"}],[3846,{"text":"if ($ep == $#ValClass) { }"}],[3857,{"text":"if (exists $SpecialVarsUsed{'$@'}) { }"}],[3863,{"text":"if $traceback"}],[3864,{"text":"if (exists $SpecialVarsUsed{'$@'}) { }"}],[3881,{"text":"if $semi >= 0"}],[3882,{"text":"if ($need_result) { }"}],[3876,{"text":"if ($end_pos < 0) { }"}],[3897,{"text":"if $semi >= 0"}],[3898,{"text":"if ($need_result) { }"}],[3838,{"text":"if ($ep < $#ValClass and $ValClass[$ep + 1] eq '(' and $ValPerl[$ep + 1] eq '(' or $ep == $#ValClass and defined $line and $line =~ /eval;/) { }"}],[3838,{"text":"elsif ($ep < $#ValClass and $ValClass[$ep + 1] eq '(' and $ValPerl[$ep + 1] eq '{') { }"}],[3838,{"text":"elsif ($ep < $#ValClass) { }"}],[3915,{"text":"if $debug >= 3"}],[3935,{"text":"if $debug >= 3"}],[3946,{"text":"if (scalar @{$package->{'type'};} >= $from + $howmany)"}],[3965,{"text":"if ($pos == scalar @{$package->{'class'};})"}],[3972,{"text":"if ($pos <= $#{$$package{'type'};}) { }"}],[3998,{"text":"if $debug >= 3"}],[4012,{"text":"if ($ValPy[$split + 1] =~ /,flags=([a-z]+)/)"}],[4018,{"text":"if ($flags eq 'r') { }"}],[4018,{"text":"elsif ($flags eq '' and $eq_ok) { }"}],[4018,{"text":"elsif ($flags =~ /r/) { }"}],[4018,{"text":"elsif ($eq_ok) { }"}],[4038,{"text":"if $k < 0"}],[4043,{"text":"if $k < 0"}],[4036,{"text":"if ($eq_ok) { }"}],[4035,{"text":"if ($eq != -1) { }"}],[4057,{"text":"if ($ValClass[$eq + 1] eq 'f' and $ValPy[$eq + 1] eq $CONVERTER_MAP{'S'}) { }"}],[4057,{"text":"elsif ($ValClass[$eq + 1] eq '(' and ($eq2 = next_same_level_token('=', $eq + 2, $split - 2)) != -1) { }"}],[4065,{"text":"if $k < 0"}],[4050,{"text":"if (tr_count_only($args)) { }"}],[4071,{"text":"unless $eq_ok"}],[4077,{"text":"if $k < 0"}],[4080,{"text":"if $k < 0"}],[4085,{"text":"if $k < 0"}],[4090,{"text":"if $k < 0"}],[4083,{"text":"if ($eq_ok) { }"}],[4074,{"text":"if ($flags =~ /r/) { }"}],[4094,{"text":"unless ($flags eq \"\" or $flags eq \"r\")"}],[4099,{"text":"if $k < 0"}],[4100,{"text":"if ($flags eq \"\" or $flags eq \"r\")"}],[4105,{"text":"if not $eq_ok or $flags =~ /r/"}],[4115,{"text":"if ($ValPy[$start] eq $CONVERTER_MAP{'S'}) { }"}],[4114,{"text":"unless ($flags =~ /r/)"}],[4128,{"text":"unless ($flags eq \"\" or $flags eq \"r\")"}],[4133,{"text":"if $k < 0"}],[4134,{"text":"if $ValPy[$start] eq $CONVERTER_MAP{'S'}"}],[4135,{"text":"if ($flags eq \"\" or $flags eq \"r\")"}],[4140,{"text":"unless $flags =~ /r/"}],[4143,{"text":"if ($ValClass[$start] eq 'f' and $ValPy[$start] eq $CONVERTER_MAP{'S'}) { }"}],[4149,{"text":"if $k < 0"}],[4142,{"text":"unless ($flags =~ /r/)"}],[4152,{"text":"unless ($flags eq \"\" or $flags eq \"r\")"}],[4157,{"text":"if ($flags eq \"\" or $flags eq \"r\")"}],[4016,{"text":"if ($split - $k == 1 and $flags =~ /r/ || $eq_ok) { }"}],[4016,{"text":"elsif (($eq = next_same_level_token('=', $start, $split - 1)) != -1 or not $eq_ok and end_of_variable($start) + 1 == $split) { }"}],[4016,{"text":"elsif ($ValClass[$start] eq '(' and ($eq = next_same_level_token('=', $start + 1, $split - 2)) != -1) { }"}],[4016,{"text":"elsif ($ValClass[$start] eq 'f' and $ValPy[$start] eq '_assign_global' || $ValPy[$start] eq $CONVERTER_MAP{'S'} && $ValPy[$start + 2] eq '_assign_global') { }"}],[4169,{"text":"if $split + 1 > $#ValClass"}],[4172,{"text":"if $ValPerl[$split] eq \"!~\""}],[4175,{"text":"if $k < 0"}],[4179,{"text":"if $ValPy[$split + 1] =~ /\\bre\\.G/"}],[4183,{"text":"if ($ValPy[$split + 1] =~ /\\($DEFAULT_MATCH:=re\\.search/) { }"}],[4180,{"text":"if ($g_flag)"}],[4191,{"text":"if ($eq_ok and $ValPy[$split + 1] =~ /^\\($DEFAULT_MATCH:=/)"}],[4197,{"text":"if $k < 0"}],[4201,{"text":"if $debug >= 5"}],[4202,{"text":"if ($context == 1) { }"}],[4202,{"text":"elsif ($context == 0) { }"}],[4211,{"text":"if $two_close_parens"}],[4198,{"text":"if (index($ValPy[$split + 1], ':=') != -1) { }"}],[4213,{"text":"if $g_flag"}],[4173,{"text":"if (substr($ValPy[$split + 1], 0, 1) eq '.') { }"}],[4225,{"text":"if ($eq_ok) { }"}],[4221,{"text":"if ($flags =~ /replace/) { }"}],[4231,{"text":"if (substr($ValPy[$split + 1], 0, 1) eq '.') { }"}],[4241,{"text":"if $import_perllib"}],[4247,{"text":"if $k < 0"}],[4252,{"text":"if $k < 0"}],[4245,{"text":"if ($eq_ok) { }"}],[4244,{"text":"if ($eq != -1) { }"}],[4261,{"text":"if ($ValClass[$eq + 1] eq 'f' and $ValPy[$eq + 1] eq $CONVERTER_MAP{'S'}) { }"}],[4267,{"text":"if $k < 0"}],[4260,{"text":"unless ($flags =~ /replace/)"}],[4273,{"text":"unless $eq_ok"}],[4281,{"text":"if $k < 0"}],[4284,{"text":"if $k < 0"}],[4290,{"text":"if $k < 0"}],[4295,{"text":"if $k < 0"}],[4288,{"text":"if ($eq_ok) { }"}],[4277,{"text":"if ($flags =~ /replace/) { }"}],[4301,{"text":"if $k < 0"}],[4302,{"text":"if $flags"}],[4304,{"text":"unless $eq_ok"}],[4314,{"text":"if ($flags =~ /replace/)"}],[4319,{"text":"if ($ValPy[$start] eq $CONVERTER_MAP{'S'}) { }"}],[4330,{"text":"if ($replace)"}],[4333,{"text":"if $ValPy[$start] eq $CONVERTER_MAP{'S'}"}],[4335,{"text":"if $k < 0"}],[4336,{"text":"if $ValPy[$start] eq $CONVERTER_MAP{'S'}"}],[4338,{"text":"if $flags"}],[4342,{"text":"if $ValPy[$start] eq $CONVERTER_MAP{'S'}"}],[4344,{"text":"if $ValPy[$start] eq $CONVERTER_MAP{'S'}"}],[4345,{"text":"if $flags"}],[4337,{"text":"if ($replace) { }"}],[4353,{"text":"if ($ValClass[$start] eq 'f' and $ValPy[$start] eq $CONVERTER_MAP{'S'}) { }"}],[4359,{"text":"if $k < 0"}],[4360,{"text":"if ($eq_ok) { }"}],[4350,{"text":"if ($flags =~ /replace/) { }"}],[4368,{"text":"if $k < 0"}],[4373,{"text":"if $k < 0"}],[4375,{"text":"if $flags"}],[4366,{"text":"if (substr($ValPy[$split + 1], 0, 1) eq '.') { }"}],[4220,{"text":"if ($split - $k == 1 and $flags =~ /replace/ || $eq_ok) { }"}],[4220,{"text":"elsif (($eq = next_same_level_token('=', $start, $split - 1)) != -1 or not $eq_ok and end_of_variable($start) + 1 == $split) { }"}],[4220,{"text":"elsif ($ValClass[$start] eq '(' and ($eq = next_same_level_token('=', $start + 1, $split - 2)) != -1) { }"}],[4220,{"text":"elsif ($ValClass[$start] eq 'f' and $ValPy[$start] eq '_assign_global' || $ValPy[$start] eq $CONVERTER_MAP{'S'} && $ValPy[$start + 2] eq '_assign_global') { }"}],[4384,{"text":"if $end_pos < 0"}],[4393,{"text":"if ($ValClass[$pat_s] eq \"f\" and $ValPy[$pat_s] eq $CONVERTER_MAP{'S'})"}],[4397,{"text":"if $ValPerl[$split] eq \"!~\""}],[4400,{"text":"if $k < 0"}],[4403,{"text":"if $k < 0"}],[4408,{"text":"if $k < 0"}],[4411,{"text":"if $ValPerl[$split] eq \"!~\""}],[4414,{"text":"if $k < 0"}],[4415,{"text":"if $ValPerl[$split] eq \"!~\""}],[4418,{"text":"if $k < 0"}],[4388,{"text":"if (exists $SpecialVarsUsed{'qr'} || !$implicit_global_my and $ValClass[$split + 1] ne '\"') { }"}],[4170,{"text":"if ($ValClass[$split + 1] eq 'q') { }"}],[4170,{"text":"elsif ($ValClass[$split + 1] eq 'f' and $ValPerl[$split + 1] eq 're') { }"}],[4008,{"text":"if ($split + 1 <= $#ValClass and $ValClass[$split + 1] eq 'f' and $ValPerl[$split + 1] eq 'tr') { }"}],[4008,{"text":"elsif (($split = index($TokenStr, '~', $k)) > -1) { }"}],[4438,{"text":"if $at eq \"a\""}],[4439,{"text":"if $at =~ /[sIFNm]/"}],[4437,{"text":"if (defined $at)"}],[4441,{"text":"if in_sub_call($start)"}],[4444,{"text":"if ($pos + 2 <= $#ValClass and $ValClass[$pos + 1] eq \")\" and $ValPerl[$pos + 1] eq \")\" and $ValClass[$pos + 2] eq \"(\" and $ValPerl[$pos + 2] eq \"[\")"}],[4453,{"text":"if ($ValClass[0] eq \"c\" and $ValPy[0] eq \"for\")"}],[4451,{"text":"if ($eq < 0)"}],[4457,{"text":"if $eq <= 0"}],[4458,{"text":"if $ValClass[$eq - 1] =~ /[ah]/ or $ValClass[$eq - 1] eq \")\" and $ValPerl[$eq - 1] eq \")\""}],[4460,{"text":"if $ValClass[$sv] eq \"s\""}],[4472,{"text":"scalar @_ >= 2 ? :"}],[4474,{"text":"if ($debug >= 3)"}],[4478,{"text":"if $assign_end < 0"}],[4487,{"text":"if ($ValClass[$assign_start + 1] eq \"(\" and matching_br($assign_start + 1) == $assign_end - 1)"}],[4479,{"text":"if ($ValClass[$assign_start + 1] =~ /[n!]/)"}],[4497,{"text":"if ($ValPerl[$begin] eq 'chop' || $ValPerl[$begin] eq 'chomp' and $begin == 2)"}],[4503,{"text":"if fixup_complex_assignment_in_control(2, $#ValClass - 1, $leave_lists) != -1"}],[4500,{"text":"if ($ValPerl[$begin] =~ /^(?:for|foreach|while|until)$/)"}],[4506,{"text":"if ($ValPy[$from] eq \":=\")"}],[4519,{"text":"if ($ValClass[$i] eq \"q\" and $ValPy[$i] =~ /$DEFAULT_MATCH:=/)"}],[4526,{"text":"if ($howmany > 0)"}],[4534,{"text":"if scalar @_ >= 2"}],[4535,{"text":"if ($ValClass[$assign_start + 1] eq \"t\")"}],[4542,{"text":"if ($comma > $assign_start and $comma < $end) { }"}],[4553,{"text":"if ($ValClass[$assign_start + 1] eq \"f\" and $ValPerl[$assign_start + 1] eq \"undef\")"}],[4550,{"text":"if ($use_default_match) { }"}],[4541,{"text":"if ($end > 0)"}],[4538,{"text":"if ($ValClass[$assign_start + 1] eq \"(\")"}],[4569,{"text":"if ($debug >= 3)"}],[4572,{"text":"if ($begin < 0 or $TrStatus < 0)"}],[4582,{"text":"if (index(substr($TokenStr, $start), \")=\") != -1)"}],[4592,{"text":"if ($debug >= 3)"}],[4587,{"text":"if ($ValPerl[$start] eq \"(\" and $ValClass[-1] eq \")\" and $ValPerl[$begin] eq 'for' || $ValPerl[$begin] eq 'foreach' || !($TokenStr =~ /=/))"}],[4596,{"text":"if scalar @_ >= 2"}],[4617,{"text":"unless $pat1"}],[4618,{"text":"if $2"}],[4612,{"text":"if ($ValClass[1] eq 'd') { }"}],[4622,{"text":"unless $pat2"}],[4624,{"text":"unless $var"}],[4626,{"text":"if $3"}],[4602,{"text":"if ($TokenStr eq 'cj') { }"}],[4602,{"text":"elsif ($TokenStr eq 'cqrq' or $TokenStr eq 'cdrq') { }"}],[4631,{"text":"if ($ValPerl[$begin] eq \"unless\")"}],[4633,{"text":"if $k < 0"}],[4634,{"text":"if ($ValPerl[$begin] eq \"unless\")"}],[4640,{"text":"if (defined $Perlscan::nesting_last and $Perlscan::nesting_last->{'type'} eq \"do\")"}],[4666,{"text":"if ($ValClass[$start] eq '(') { }"}],[4649,{"text":"if ($TokenStr eq 'cs=j') { }"}],[4649,{"text":"elsif (substr($TokenStr, $start) eq 'd' and $ValPy[$start] eq '1') { }"}],[4649,{"text":"elsif (substr($TokenStr, $start) eq 'j') { }"}],[4649,{"text":"elsif (substr($TokenStr, $start) eq 'g') { }"}],[4672,{"text":"if ($in_do) { }"}],[4713,{"text":"if $k < 0"}],[4716,{"text":"if $k < 0"}],[4721,{"text":"if $k < 0"}],[4710,{"text":"if (($range = next_same_level_token('r', $begin + 2, $limit - 1)) != -1) { }"}],[4684,{"text":"if ($ValPerl[-1] eq '++' and $ValClass[-2] eq 's' and $ValClass[-3] eq ';') { }"}],[4684,{"text":"elsif ($ValPerl[-1] eq '--' and $ValClass[-2] eq 's' and $ValClass[-3] eq ';') { }"}],[4684,{"text":"elsif (($k = index($TokenStr, ';((s=s+d)-d)')) > 0 and $k + 11 == $#ValClass) { }"}],[4684,{"text":"elsif (($k = index($TokenStr, ';((s=s-d)+d)')) > 0 and $k + 11 == $#ValClass) { }"}],[4684,{"text":"elsif (($k = index($TokenStr, ';((s=f(s)+d)-d)')) > 0 and $k + 14 == $#ValClass) { }"}],[4684,{"text":"elsif (($k = index($TokenStr, ';((s=f(s)-d)+d)')) > 0 and $k + 14 == $#ValClass) { }"}],[4684,{"text":"elsif (($k = index($TokenStr, ';s=d')) > 0 and $ValPerl[$k + 2] eq '+=' and $k + 3 == $#ValClass) { }"}],[4684,{"text":"elsif (($k = index($TokenStr, ';s=d')) > 0 and $ValPerl[$k + 2] eq '-=' and $k + 3 == $#ValClass) { }"}],[4684,{"text":"elsif (($k = index($TokenStr, ';s=f(s)+d')) > 0 and $ValPerl[$k + 1] eq $ValPerl[$k + 5] and $ValPy[$k + 3] eq $CONVERTER_MAP{'N'} and $k + 8 == $#ValClass) { }"}],[4684,{"text":"elsif (($k = index($TokenStr, ';s=f(s)-d')) > 0 and $ValPerl[$k + 1] eq $ValPerl[$k + 5] and $ValPy[$k + 3] eq $CONVERTER_MAP{'N'} and $k + 8 == $#ValClass) { }"}],[4684,{"text":"elsif (index($TokenStr, ';', $begin + 1) == -1) { }"}],[4684,{"text":"elsif ($TokenStr eq 'c;;') { }"}],[4735,{"text":"if $Perlscan::line_contains_for_loop_with_modified_counter{$.}"}],[4742,{"text":"if ($semi1 < 0 or $semi2 < 0)"}],[4755,{"text":"if $eq != -1 and $ValPy[$eq] eq \":=\""}],[4753,{"text":"if (next_same_level_token(',', 0, $#ValClass) == -1) { }"}],[4746,{"text":"if ($semi1 - $start != 1)"}],[4764,{"text":"if ($semi1 + 1 <= $semi2 - 1) { }"}],[4737,{"text":"if ($gen_while)"}],[4782,{"text":"if ($ValClass[$start + 2] eq \"f\" and $loop_ctr eq $CONVERTER_MAP{'N'} || $loop_ctr eq $CONVERTER_MAP{'I'})"}],[4797,{"text":"if ($start == -1)"}],[4807,{"text":"if ($TrStatus < -1)"}],[4780,{"text":"if ($ValClass[$start + 1] eq ';') { }"}],[4815,{"text":"if ($start == -1)"}],[4817,{"text":"if ($ValPerl[$start] eq '<=') { }"}],[4817,{"text":"elsif ($ValPerl[$start] eq '>=') { }"}],[4825,{"text":"if ($end_pos == -1)"}],[4834,{"text":"if $TrStatus < 0"}],[4836,{"text":"if ($inc)"}],[4840,{"text":"if ($increment) { }"}],[4848,{"text":"if ($ValClass[$start] eq 's') { }"}],[4854,{"text":"if ($hadparens == 1) { }"}],[4854,{"text":"elsif ($start + 1 > $#ValClass) { }"}],[4854,{"text":"elsif ($ValClass[$start + 1] ne '(') { }"}],[4881,{"text":"if $ValPerl[$start] eq \"keys\""}],[4883,{"text":"if $ValPerl[$start] eq \"keys\""}],[4876,{"text":"if ($ValPerl[$start] eq 'keys' or $ValPerl[$start] eq 'values') { }"}],[4876,{"text":"elsif ($ValPerl[$start] eq 'sort') { }"}],[4905,{"text":"$ValClass[$start + 2] eq '(' ? :"}],[4906,{"text":"$ValClass[$start + 2] eq '(' ? :"}],[4908,{"text":"if $range < 0"}],[4911,{"text":"if $k < 0"}],[4914,{"text":"if $k < 0"}],[4919,{"text":"if $k < 0"}],[4922,{"text":"if $k < 0"}],[4926,{"text":"if ($ValPerl[$start] ne '(' or $ValPerl[-1] ne ')' or index(substr($TokenStr, $start), ',') != -1) { }"}],[4932,{"text":"if $k < 0"}],[4866,{"text":"if (substr($TokenStr, $start) eq '(a)' or substr($TokenStr, $start) eq '(s)') { }"}],[4866,{"text":"elsif (substr($TokenStr, $start) eq '(h)') { }"}],[4866,{"text":"elsif (substr($TokenStr, $start) =~ /^\\(f\\(?h\\)/) { }"}],[4866,{"text":"elsif (substr($TokenStr, $start) eq '(q)' and $ValPy[$start + 1] =~ /\\.split\\(\\)$/ || $ValPy[$start + 1] =~ /re\\.finditer/) { }"}],[4866,{"text":"elsif (substr($TokenStr, $start) eq '((q))' and $ValPy[$start + 2] =~ /\\.split\\(\\)$/ || $ValPy[$start + 2] =~ /re\\.finditer/) { }"}],[4866,{"text":"elsif (substr($TokenStr, $start) =~ /^\\((['\"qds](,['\"qds])*)\\)/) { }"}],[4866,{"text":"elsif (substr($TokenStr, $start) =~ /^\\(f\\(?.*r/ and $ValPerl[$start + 1] eq 'reverse') { }"}],[4866,{"text":"elsif (($range = next_same_level_token('r', $start + 1, $#ValClass - 1)) != -1) { }"}],[4940,{"text":"if $k < 0"}],[4599,{"text":"if ($ValPerl[$begin] eq 'if' or $ValPerl[$begin] eq 'unless') { }"}],[4599,{"text":"elsif ($ValPerl[$begin] eq 'while' or $ValPerl[$begin] eq 'until') { }"}],[4599,{"text":"elsif ($ValPerl[$begin] eq 'for' || $ValPerl[$begin] eq 'foreach' and $hadparens == 1 and not $ValClass[$begin + 1] =~ /[ahf]/) { }"}],[4599,{"text":"elsif ($ValPerl[$begin] eq 'for' or $ValPerl[$begin] eq 'foreach') { }"}],[4599,{"text":"elsif ($ValPerl[$begin] eq 'assert') { }"}],[4599,{"text":"elsif ($ValPerl[$begin] eq 'package' and $start <= $#ValClass) { }"}],[4961,{"text":"if (scalar @_ > 1)"}],[4964,{"text":"if ($debug >= 3)"}],[4969,{"text":"if (substr($TokenStr, $begin, $limit + 1 - $begin) eq \"f(C(kis>d,\\\",\\\";ki\\\";s&\\\"))\" and $ValPerl[$begin] eq \"length\" and $ValPerl[$limit - 2] eq \"\")"}],[4976,{"text":"if ($ValPerl[$begin] eq \"%SIG\" and $ValClass[$begin + 1] eq \"(\")"}],[4987,{"text":"if ($ValClass[$limit] eq \")\")"}],[4994,{"text":"if $debug >= 3"}],[4995,{"text":"if $k < $end_pos"}],[4997,{"text":"if $end_pos < $start"}],[4981,{"text":"if ($begin == $#ValClass or scalar @_ > 1 and $begin == $limit) { }"}],[4981,{"text":"elsif ($begin < $#ValClass and $ValClass[$begin + 1] eq '(' and $ValPy[$begin + 1] eq '(') { }"}],[5012,{"text":"if scalar @_ < 2 and $begin != 0"}],[5016,{"text":"if ($end_pos < $begin)"}],[5023,{"text":"if ($mb < $begin)"}],[5021,{"text":"if ($ValClass[$end_pos] eq \")\")"}],[4999,{"text":"if (do {\n\t$ValClass[$begin - 1] eq '(' if scalar @_ < 2 and $begin != 0\n}) { }"}],[4999,{"text":"elsif (scalar @_ < 2) { }"}],[5028,{"text":"if ($debug >= 3)"}],[5032,{"text":"if ($begin < 0 or $TrStatus < 0)"}],[5038,{"text":"if ($perl_name eq \"die\" and $py_name =~ /^raise / and $begin != 0)"}],[5046,{"text":"if substr($py_name, 0, 1) eq \"_\""}],[5045,{"text":"if ($import_perllib) { }"}],[5045,{"text":"elsif (exists $PYF_CALLS{$py_name}) { }"}],[5043,{"text":"if (-e \"$Pyf_dir/$py_name.py\") { }"}],[5042,{"text":"unless (exists $Pyf{$py_name})"}],[5074,{"text":"if (length $1 >= 2 and substr($1, 0, 1) eq \"-\")"}],[5075,{"text":"if (length $2 >= 2 and substr($2, 0, 1) eq \"-\")"}],[5079,{"text":"if $arg1 < 0"}],[5077,{"text":"if (do {\n\t-$arg1 >= $arg2 if $arg1 < 0\n}) { }"}],[5077,{"text":"elsif ($arg2 >= 0) { }"}],[5077,{"text":"elsif ($arg2 < 0) { }"}],[5094,{"text":"if ($comma < 0)"}],[5101,{"text":"if ($this_p + 1 != $comma) { }"}],[5101,{"text":"elsif (index($ValPy[$this_p], '.') != -1) { }"}],[5070,{"text":"if (substr($TokenStr, $start, $end_pos - $start + 1) =~ /^s,([-]?d),([-]?d)$/) { }"}],[5070,{"text":"elsif ($comma3 != -1 and $comma2 != -1 and $comma1 != -1) { }"}],[5122,{"text":"if ($split == -1)"}],[5126,{"text":"if $k < 0"}],[5116,{"text":"if (substr($TokenStr, $start + 1, 1) eq ',') { }"}],[5133,{"text":"length $1 == 1 ? :"}],[5132,{"text":"if (substr($TokenStr, $split, 4) =~ /^,(\\-?)d[),]/)"}],[5142,{"text":"if $k < 0"}],[5143,{"text":"if $temp"}],[5158,{"text":"if $arg2 != 0 and $arg1 >= 0 || $arg2 < 0"}],[5154,{"text":"if ($arg1 == 0) { }"}],[5152,{"text":"if (defined $arg1) { }"}],[5180,{"text":"if $k < 0"}],[5183,{"text":"if $k < 0"}],[5174,{"text":"if (defined $arg1) { }"}],[5144,{"text":"if ($end_pos - $split2 == 1 and $ValClass[$end_pos] eq 'd') { }"}],[5144,{"text":"elsif ($end_pos - $split2 == 2 and substr($TokenStr, $split2, 3) eq ',-d') { }"}],[5190,{"text":"if $k < 0"}],[5138,{"text":"if ($split2 > -1) { }"}],[5206,{"text":"if $k < 0"}],[5197,{"text":"if ($ValClass[$start + 1] eq ',') { }"}],[5218,{"text":"if $k < 0"}],[5214,{"text":"if ($split + 2 == $split2) { }"}],[5222,{"text":"if $k < 0"}],[5228,{"text":"if $k < 0"}],[5212,{"text":"if ($split2 > -1) { }"}],[5250,{"text":"if $TrStatus < 0"}],[5245,{"text":"if ($split - $start == 1) { }"}],[5254,{"text":"if (&Pythonizer::expr_type($split + 1, $end_pos, $CurSub) eq \"a of S\")"}],[5257,{"text":"if $mapped"}],[5263,{"text":"if $TrStatus < 0"}],[5258,{"text":"if ($end_pos - $split == 1) { }"}],[5266,{"text":"if $mapped"}],[5236,{"text":"if ($split < 0) { }"}],[5271,{"text":"if $TrStatus < 0"}],[5274,{"text":"if $TrStatus < 0"}],[5281,{"text":"if $ValClass[$end_pos] ne \")\""}],[5283,{"text":"if ($debug > 4)"}],[5297,{"text":"if $k < 0"}],[5300,{"text":"if $k < 0"}],[5278,{"text":"if ($ValClass[$k] eq 's') { }"}],[5315,{"text":"if ($py_name =~ /_s$/) { }"}],[5311,{"text":"if ($bracketed == -1 or $k > $#ValClass or $bracketed == 1 and $ValPerl[$k] eq \")\")"}],[5325,{"text":"if ($arg1type eq \"f\" and $arg1 eq $CONVERTER_MAP{'S'} and $ValClass[$k + 2] eq \"q\")"}],[5335,{"text":"if $flag eq \"g\""}],[5332,{"text":"if ($arg1type ne \"\\\"\" and $k + 1 <= $#ValClass and $ValClass[$k + 1] eq \"i\")"}],[5344,{"text":"if $arg1 eq \"' '\""}],[5345,{"text":"if ($py_name =~ /_s$/) { }"}],[5343,{"text":"if ($arg1type eq '\"') { }"}],[5340,{"text":"if ($k + 1 > $#ValClass or $ValPerl[$k + 1] ne \",\")"}],[5365,{"text":"if $arg1 eq \"' '\""}],[5366,{"text":"if ($py_name =~ /_s$/) { }"}],[5364,{"text":"if ($arg1type eq '\"') { }"}],[5378,{"text":"if ($py_name =~ /_s$/)"}],[5383,{"text":"if ($arg1 eq q[' ']) { }"}],[5391,{"text":"if $k < 0"}],[5377,{"text":"if ($arg1type eq '\"') { }"}],[5395,{"text":"if $k < 0"}],[5397,{"text":"if $flags"}],[5399,{"text":"if ($py_name =~ /_s$/)"}],[5404,{"text":"if $arg1 eq \"' '\""}],[5409,{"text":"if $flags"}],[5359,{"text":"if ($k == $end_pos) { }"}],[5359,{"text":"elsif (($split = next_same_level_token(',', $k + 1, $end_pos)) > -1) { }"}],[5359,{"text":"elsif ($arg1type eq '\"') { }"}],[5411,{"text":"if $add_paren"}],[5415,{"text":"if ($TrStatus < 0)"}],[5437,{"text":"if ($ValClass[$s + 1] eq '-' and $ValClass[$e - 1] eq 'd' and $e - 1 - ($s + 1) == 1) { }"}],[5437,{"text":"elsif ($ValClass[$s + 1] eq 'd' and $e - 1 - ($s + 1) == 0) { }"}],[5447,{"text":"unless ($is_const)"}],[5426,{"text":"if ($ValClass[$s - 1] eq 's' and $ValPerl[$s - 1] eq '$_') { }"}],[5426,{"text":"elsif ($autovivification) { }"}],[5422,{"text":"if ($ValClass[$e] eq ')' and $ValPerl[$e] eq ']') { }"}],[5477,{"text":"if $ValPerl[$k + 2] eq \"autoflush\""}],[5485,{"text":"if $j != 0"}],[5473,{"text":"if (substr($ValPy[$k], 0, 4) eq 'sys.') { }"}],[5473,{"text":"elsif ($k + 2 <= $#ValClass and $ValClass[$k + 1] eq 'D' and $ValClass[$k + 2] eq 'i') { }"}],[5473,{"text":"elsif (index($ValPy[$k], '.') != -1) { }"}],[5494,{"text":"$bracketed == 1 ? :"}],[5502,{"text":"if (exists $PyFuncType{$ValPy[$k]}) { }"}],[5502,{"text":"elsif (exists $FuncType{$ValPerl[$k]}) { }"}],[5511,{"text":"if (-e \"$Pyf_dir/$ValPy[$k].py\")"}],[5510,{"text":"unless (exists $Pyf{$ValPy[$k]})"}],[5509,{"text":"if ($arg0_type eq ':' or $arg0_type eq '') { }"}],[5507,{"text":"if (defined $ft) { }"}],[5523,{"text":"if ($ValPy[$k] eq \"$DEFAULT_MATCH.group(0)\" or $ValPy[$k] =~ /$DEFAULT_MATCH\\.string/) { }"}],[5523,{"text":"elsif ($ValPy[$k] =~ /$DEFAULT_MATCH\\.(?:group|start|end)\\((\\d)\\)/) { }"}],[5528,{"text":"$bracketed == 1 ? :"}],[5534,{"text":"if ($bracketed == 1 and $end_pos + 2 <= $#ValClass and $ValClass[$end_pos + 2] eq 'y') { }"}],[5534,{"text":"elsif (end_of_variable($k) == $end_pos) { }"}],[5420,{"text":"if ($k + 1 <= $#ValClass and $ValClass[$k + 1] eq '(' and $ValPerl[$k + 1] ne '(') { }"}],[5420,{"text":"elsif ($bracketed == -1) { }"}],[5420,{"text":"elsif ($ValClass[$k] =~ /[ah]/) { }"}],[5420,{"text":"elsif ($ValClass[$k] eq 'i' and $k + 1 > $#ValClass || $ValClass[$k + 1] ne '(') { }"}],[5420,{"text":"elsif ($ValClass[$k] eq 'f' and $k + 1 > $end_pos || $ValClass[$k + 1] ne '(') { }"}],[5420,{"text":"elsif ($ValClass[$k] eq 's' and substr($ValPy[$k], 0, length($DEFAULT_MATCH) + 1) eq \"$DEFAULT_MATCH.\") { }"}],[5420,{"text":"elsif ($ValClass[$k] eq 's' and $ValPerl[$k] eq '$_' and $ValPy[$k] =~ /^(\\w+)\\[(\\d+)\\]$/) { }"}],[5545,{"text":"$k + 1 <= $#ValPerl && $ValPerl[$k + 1] eq ')' ? :"}],[5553,{"text":"if $comma < 0"}],[5554,{"text":"if ($debug > 4)"}],[5559,{"text":"if ($k == $comma - 1 and substr($ValPy[$k], -4, 4) eq \"[1:]\")"}],[5564,{"text":"if $t < 0"}],[5565,{"text":"if ($ValClass[$comma + 1] eq 'a') { }"}],[5565,{"text":"elsif ($ValClass[$comma + 1] eq '(') { }"}],[5565,{"text":"elsif (index('sd-\"', $ValClass[$comma + 1]) != -1 or $ValClass[$comma + 1] eq 'i' and $comma + 1 == $#ValClass or $ValClass[$comma + 1] eq '\\\\') { }"}],[5586,{"text":"if $bracketed != -1 and index(\">0o+-*/\", $ValClass[$start]) != -1"}],[5590,{"text":"if ($perl_name eq 'shift') { }"}],[5589,{"text":"if ($CurSub eq '__main__' or substr($CurSub, 0, 7) eq '__END__') { }"}],[5602,{"text":"if $bracketed == 1"}],[5607,{"text":"if $bracketed == 1"}],[5587,{"text":"if ($bracketed == -1) { }"}],[5587,{"text":"elsif ($ValPerl[$start] eq '@ARGV') { }"}],[5616,{"text":"if ($bracketed == -1)"}],[5622,{"text":"if $k < 0"}],[5626,{"text":"$perl_name eq 'oct' ? :"}],[5627,{"text":"if ($bracketed == -1)"}],[5633,{"text":"if $k < 0"}],[5640,{"text":"if ($begin == 0) { }"}],[5639,{"text":"if ($bracketed == -1)"}],[5647,{"text":"if ($begin == 0) { }"}],[5653,{"text":"if $k < 0"}],[5655,{"text":"if $begin != 0"}],[5671,{"text":"if ($Pythonizer::CurNest) { }"}],[5670,{"text":"if ($begin == 0) { }"}],[5680,{"text":"if ($ValPy[$start] eq \"sys.stdout\")"}],[5686,{"text":"if $k < 0"}],[5690,{"text":"if $k < 0"}],[5683,{"text":"if ($begin == 0) { }"}],[5669,{"text":"if ($bracketed == -1) { }"}],[5707,{"text":"if ($ValClass[$limit] eq \")\")"}],[5703,{"text":"if ($bracketed == 0 and $ValClass[$begin + 1] eq \"(\")"}],[5712,{"text":"if ($py_name =~ /_s$/) { }"}],[5724,{"text":"if ($Perlscan::PythonCode[-1] eq \"*\")"}],[5720,{"text":"if ($ValClass[0] eq 'c' && ($ValPerl[0] eq 'if' || $ValPerl[0] eq 'unless') || $ValClass[0] eq 'C' && $ValPerl[0] eq 'elsif' and $begin == 0 || $ValClass[$begin - 1] ne '=') { }"}],[5718,{"text":"if ($context == 0)"}],[5736,{"text":"if (($pA = next_same_level_token(\"A\", $start, $end_pos)) != -1)"}],[5732,{"text":"if ($perl_name eq 'map' and index(substr($TokenStr, $start, $end_pos + 1 - $start), 'A') != -1) { }"}],[5750,{"text":"if substr($ValPy[$start], 0, 1) eq \"_\""}],[5749,{"text":"if ($bracketed == 0 || $ValPerl[$begin + 1] eq '(' and $ValClass[$start] eq \"f\" and substr($ValPy[$start], 0, 1) ne \".\")"}],[5747,{"text":"if ($perl_name eq \"map\")"}],[5757,{"text":"if ($ValClass[$start] eq '\"' and $ValPy[$start] =~ /^$ANONYMOUS_SUB\\d+[a-z]?$/) { }"}],[5763,{"text":"if $comma < 0"}],[5764,{"text":"if $need_bracket"}],[5769,{"text":"if (substr($ValPy[$start], 0, 3) eq 're.' or substr($ValPy[$start], 0, 6 + length($DEFAULT_MATCH)) eq \"(${DEFAULT_MATCH}:=re.\") { }"}],[5766,{"text":"if (index('sd\"', $ValClass[$start]) != -1) { }"}],[5766,{"text":"elsif ($ValClass[$start] eq 'q') { }"}],[5785,{"text":"if $k < 0"}],[5765,{"text":"if ($start == $comma - 1 and $perl_name eq 'grep') { }"}],[5765,{"text":"elsif ($start == $comma - 1 and $ValClass[$start] eq 'f' and substr($ValPy[$start], 0, 1) eq '.') { }"}],[5765,{"text":"elsif ($start == $comma - 1 and $ValClass[$start] eq 'i' and $LocalSub{$ValPy[$start]} and $perl_name eq 'map') { }"}],[5787,{"text":"if $need_bracket"}],[5756,{"text":"if ($need_lambda) { }"}],[5756,{"text":"elsif ($bracketed == 1 and $ValPerl[$begin + 1] eq '(') { }"}],[5795,{"text":"if scalar @_ > 1"}],[5797,{"text":"if $ValClass[$end_pos + 2] eq \"(\" and $ValPerl[$end_pos + 2] eq \"(\" and next_same_level_token(\",\", $end_pos + 3, $limit - 1) != -1"}],[5803,{"text":"if $ValClass[$comma + 1] eq \"(\" and $ValPerl[$comma + 1] eq \"(\" and next_same_level_token(\",\", $end_pos + 3, $limit - 1) != -1"}],[5806,{"text":"if $ValPerl[$limit] ne \")\""}],[5792,{"text":"if ($bracketed == 1 and $ValPerl[$begin + 1] eq '{') { }"}],[5809,{"text":"if $add_close_paren"}],[5821,{"text":"if ($ValClass[$limit] eq \")\")"}],[5817,{"text":"if ($bracketed == 0 and $ValClass[$begin + 1] eq \"(\")"}],[5830,{"text":"if $TrStatus < 0"}],[5825,{"text":"if (not $bracketed == 1 && $ValPerl[$begin + 1] eq '{' and $ValClass[$k] ne 'i' || $k + 1 < $#ValClass && $ValClass[$k + 1] eq '(')"}],[5839,{"text":"if scalar @_ > 1"}],[5841,{"text":"if ($end_pos + 2 == $limit and $ValClass[$limit] eq 'h') { }"}],[5836,{"text":"if ($bracketed == 1 and $ValPerl[$begin + 1] eq '{') { }"}],[5836,{"text":"elsif ($start + 1 == $limit and $ValClass[$limit] eq 'h') { }"}],[5859,{"text":"if $k < 0"}],[5854,{"text":"if ($bracketed == 0 and $ValClass[$start] eq 'i' and $LocalSub{$ValPy[$start]}) { }"}],[5862,{"text":"if $ValPerl[$limit] ne \")\""}],[5870,{"text":"if $comma < 0"}],[5871,{"text":"if ($debug > 4)"}],[5875,{"text":"if $t < 0"}],[5876,{"text":"if $comma + 1 > $#ValClass"}],[5882,{"text":"unless substr($type, 0, 1) =~ /[ah]/"}],[5883,{"text":"if $ValPerl[$comma + 1] eq \"[\" or $ValPerl[$comma + 1] eq \"{\""}],[5877,{"text":"if ($ValClass[$comma + 1] eq 'a') { }"}],[5877,{"text":"elsif ($ValClass[$comma + 1] eq '(') { }"}],[5877,{"text":"elsif (index('isd-\"', $ValClass[$comma + 1]) != -1 and $comma + 1 == $end_pos or $ValClass[$comma + 1] eq '\\\\') { }"}],[5909,{"text":"if $k + 1 > $#ValClass"}],[5918,{"text":"if ($k + 3 <= $#ValClass and $ValClass[$k + 2] eq \"f\" and $ValPerl[$k + 2] eq \"keys\" and $ValClass[$k + 3] eq \"h\" and $ValPerl[$k])"}],[5924,{"text":"if $kk < 0"}],[5925,{"text":"if $gen_close"}],[5911,{"text":"if ($ValClass[$k + 1] eq 'q') { }"}],[5938,{"text":"if $s < 0"}],[5940,{"text":"if $kk < 0"}],[5943,{"text":"if $kk < 0"}],[5936,{"text":"if ($ValClass[$k] eq ')') { }"}],[5905,{"text":"if ($ValClass[$k] eq 't' and $ValPerl[$k] eq 'local') { }"}],[5905,{"text":"elsif ($ValClass[$k] eq 'a') { }"}],[5968,{"text":"if $k < 0"}],[5972,{"text":"if $k < 0"}],[5966,{"text":"if ($e == $end_pos) { }"}],[5963,{"text":"if ($k + 1 <= $end_pos)"}],[5980,{"text":"if ($begin != 0)"}],[5984,{"text":"if (index(\"?:,)\", $ValClass[$start]) != -1)"}],[5993,{"text":"if $ValClass[$i] ne \",\""}],[5999,{"text":"if (exists $VarType{$u} and exists $VarType{$u}{$CurSub})"}],[6002,{"text":"if (defined $val and $sval ne $val)"}],[6015,{"text":"if (exists $VarType{$u} and exists $VarType{$u}{$CurSub})"}],[6008,{"text":"if (defined $val) { }"}],[5979,{"text":"if ($bracketed == -1) { }"}],[6024,{"text":"if ($py_name =~ /_s$/)"}],[6030,{"text":"if ($debug >= 3)"}],[6033,{"text":"if $ValClass[$begin] ne \"f\""}],[6027,{"text":"if (index($TokenStr, \"=\") > 0)"}],[6040,{"text":"if ($ValClass[$start] eq 'a') { }"}],[6038,{"text":"if ($ValClass[$start] eq 'a' or $ValClass[$start] eq 'h') { }"}],[6055,{"text":"if ($ValClass[$start + 2] eq 'f' and $ValPy[$start + 2] eq '_assign_global' || $ValPy[$start + 2] eq '_set_element') { }"}],[6071,{"text":"if ($ValClass[$i] eq 'f' and $ValPy[$i] eq $CONVERTER_MAP{'S'}) { }"}],[6035,{"text":"if ($bracketed == -1) { }"}],[6035,{"text":"elsif ($start == $end_pos) { }"}],[6035,{"text":"elsif ($ValClass[$start] eq 'f' and $ValPy[$start] eq $CONVERTER_MAP{'S'} and matching_br($start + 1) == $end_pos) { }"}],[6035,{"text":"elsif (index($TokenStr, ',') > 0) { }"}],[6091,{"text":"if $comma != -1"}],[6098,{"text":"if $comma != -1"}],[6100,{"text":"if ($of0 == $of1 and $ValClass[$of0] eq 'a' and not $ValPerl[$of0] =~ /^len\\(/) { }"}],[6109,{"text":"if $comma != -1"}],[6116,{"text":"if ($ls0 == $ls1 and $ValClass[$ls0] eq 'a') { }"}],[6112,{"text":"if ($comma != -1)"}],[6105,{"text":"if ($comma != -1)"}],[6094,{"text":"if ($comma != -1)"}],[6131,{"text":"if ($1 eq 'a') { }"}],[6131,{"text":"elsif ($1 eq 's') { }"}],[6143,{"text":"if ($ValClass[$start] ne \"(\" and next_same_level_token(\",\", $start, $end_pos) >= 0)"}],[6148,{"text":"if $TrStatus < 0"}],[6149,{"text":"if $make_tuple"}],[6128,{"text":"if ($bracketed == -1) { }"}],[6128,{"text":"elsif ($start == $end_pos and $ValClass[$start] =~ /([as])/) { }"}],[6160,{"text":"if $TrStatus < 0"}],[6153,{"text":"if ($bracketed == -1) { }"}],[6153,{"text":"elsif ($start == $end_pos and $ValClass[$start] eq 'h') { }"}],[6126,{"text":"if (substr($py_name, 0, 1) eq '_' or $py_name eq \"$PERLLIB.reverse_scalar\") { }"}],[6174,{"text":"$fh + 2 <= $#ValClass ? :"}],[6175,{"text":"if (not defined $ly or $ValClass[$ly] ne '\"') { }"}],[6181,{"text":"if $layer eq \":raw\" or $layer eq \":bytes\""}],[6184,{"text":"if $layer =~ /:encoding\\((.*)\\)/"}],[6185,{"text":"if ($layer eq \":utf8\")"}],[6190,{"text":"if ($begin == 0) { }"}],[6190,{"text":"elsif (index($ValPy[$fh], '.') == -1) { }"}],[6208,{"text":"if ($begin == 0) { }"}],[6208,{"text":"elsif (index($ValPy[$fh], '.') == -1) { }"}],[6221,{"text":"if $comma < 0"}],[6224,{"text":"if $TrStatus < 0"}],[6236,{"text":"if $end_pos >= $start"}],[6237,{"text":"if $TrStatus < 0"}],[6228,{"text":"if ($bracketed == -1) { }"}],[6247,{"text":"if $TrStatus < 0"}],[6252,{"text":"if $TrStatus < 0"}],[6256,{"text":"if $TrStatus < 0"}],[6263,{"text":"if $TrStatus < 0"}],[6266,{"text":"if (substr($perl_name, 0, 1) eq \".\")"}],[6277,{"text":"if $comma1 < 0"}],[6281,{"text":"if $comma2 < 0"}],[6288,{"text":"if ($comma3 < 0) { }"}],[6295,{"text":"if $perl_name eq \"sysread\""}],[6301,{"text":"if $TrStatus < 0"}],[6305,{"text":"if $TrStatus < 0"}],[6310,{"text":"if $TrStatus < 0"}],[6314,{"text":"if $TrStatus < 0"}],[6311,{"text":"if (defined $of0)"}],[6321,{"text":"if $TrStatus < 0"}],[6326,{"text":"if $TrStatus < 0"}],[6329,{"text":"if $TrStatus < 0"}],[6334,{"text":"if $TrStatus < 0"}],[6339,{"text":"if $TrStatus < 0"}],[6318,{"text":"if (defined $of0) { }"}],[6297,{"text":"if ($begin == 0) { }"}],[6344,{"text":"if ($import_perllib) { }"}],[6349,{"text":"if (substr($ValPy[$start], 0, 1) eq \"*\")"}],[6358,{"text":"if ($ValClass[$start] eq 'f' and $ValPy[$start] eq $CONVERTER_MAP{'S'}) { }"}],[6365,{"text":"if ($text_s == $text_e and index($ValPy[$text_s], '.') == -1) { }"}],[6365,{"text":"elsif ($text_s == $text_e) { }"}],[6354,{"text":"if ($bracketed == -1) { }"}],[6390,{"text":"if $flags"}],[6392,{"text":"if ($flags =~ /replace/) { }"}],[6401,{"text":"if $import_perllib"}],[6391,{"text":"if ($begin == 0) { }"}],[6409,{"text":"if ($ValPy[$begin] =~ /,flags=([a-z]+)/)"}],[6416,{"text":"if ($flags) { }"}],[6414,{"text":"if ($flags =~ /r/) { }"}],[6414,{"text":"elsif ($flags) { }"}],[6413,{"text":"if ($begin == 0) { }"}],[6436,{"text":"if ($py_name =~ /_s$/)"}],[6440,{"text":"if $bracketed == 1"}],[6441,{"text":"if ($start > $end_pos)"}],[6445,{"text":"if $perl_name eq \"keys\" and $ValPy[0] eq \"for\""}],[6446,{"text":"if $context == 1"}],[6448,{"text":"if $TrStatus < 0"}],[6450,{"text":"if $perl_name eq \"keys\" and $ValPy[0] eq \"for\""}],[6451,{"text":"if $context == 1"}],[6455,{"text":"if $TrStatus < 0"}],[6462,{"text":"if $end < 0"}],[6463,{"text":"if ($begin == 0 and $ValClass[$start] eq \"s\" and end_of_variable($start) == $end)"}],[6472,{"text":"if $TrStatus < 0"}],[6474,{"text":"if ($comma + 1 == $end_pos and $ValClass[$end_pos] eq \"\\\"\" and substr($ValPy[$end_pos], 0, 1) eq \"'\")"}],[6478,{"text":"if $TrStatus < 0"}],[6481,{"text":"if $TrStatus < 0"}],[6470,{"text":"if ($comma != -1) { }"}],[6488,{"text":"if $py_name eq \"lens\""}],[6489,{"text":"if ($py_name eq '_ref' and $ValClass[$start] eq '\\\\' || expression_uses_builtin_types($begin)) { }"}],[6489,{"text":"elsif ($py_name eq \"$PERLLIB.ref\" and $ValClass[$start] eq '\\\\' || expression_uses_builtin_types($begin)) { }"}],[6504,{"text":"if $py_name ne \"len\" and $perl_name ne \"ref\" and $perl_name ne \"each\" and $py_name ne \"_get_element\" and need_splat($start)"}],[6508,{"text":"if $TrStatus < 0"}],[6513,{"text":"if $TrStatus < 0"}],[6496,{"text":"if ($bracketed == -1 or $end_pos < $start) { }"}],[5064,{"text":"if ($perl_name eq 'substr') { }"}],[5064,{"text":"elsif ($perl_name eq 'index' or $perl_name eq 'rindex') { }"}],[5064,{"text":"elsif ($perl_name eq 'join') { }"}],[5064,{"text":"elsif ($perl_name eq 'open') { }"}],[5064,{"text":"elsif ($perl_name eq 'opendir') { }"}],[5064,{"text":"elsif ($perl_name eq 'exists') { }"}],[5064,{"text":"elsif (substr($perl_name, 0, 1) eq '-') { }"}],[5064,{"text":"elsif ($perl_name eq 'split') { }"}],[5064,{"text":"elsif ($perl_name eq 'print' or $perl_name eq 'printf') { }"}],[5064,{"text":"elsif ($perl_name eq 'defined') { }"}],[5064,{"text":"elsif ($perl_name eq 'unshift') { }"}],[5064,{"text":"elsif ($perl_name eq 'shift' or $perl_name eq 'pop') { }"}],[5064,{"text":"elsif ($perl_name eq 'mkdir' and $bracketed == -1) { }"}],[5064,{"text":"elsif ($perl_name eq 'ord' or $perl_name eq 'chr' or $perl_name eq 'quotemeta') { }"}],[5064,{"text":"elsif ($perl_name eq 'oct' or $perl_name eq 'hex') { }"}],[5064,{"text":"elsif ($perl_name eq 'stat' || $perl_name eq 'lstat' and not $uses_file_stat) { }"}],[5064,{"text":"elsif ($perl_name eq 'pos') { }"}],[5064,{"text":"elsif ($perl_name eq 'select') { }"}],[5064,{"text":"elsif ($perl_name eq 'grep' or $perl_name eq 'map') { }"}],[5064,{"text":"elsif ($perl_name eq 'sort') { }"}],[5064,{"text":"elsif ($perl_name eq 'push') { }"}],[5064,{"text":"elsif ($perl_name eq 'delete') { }"}],[5064,{"text":"elsif ($perl_name eq 'sprintf') { }"}],[5064,{"text":"elsif ($perl_name eq 'undef') { }"}],[5064,{"text":"elsif ($perl_name eq 'chomp' or $perl_name eq 'chop') { }"}],[5064,{"text":"elsif ($perl_name eq 'splice') { }"}],[5064,{"text":"elsif ($perl_name eq 'reverse') { }"}],[5064,{"text":"elsif ($perl_name eq 'getopt' or $perl_name eq 'getopts') { }"}],[5064,{"text":"elsif ($perl_name eq 'GetOptions' and $bracketed == 1 and my $type = GetOptionsHandled($start, $end_pos)) { }"}],[5064,{"text":"elsif ($perl_name eq 'binmode') { }"}],[5064,{"text":"elsif ($perl_name eq 'IOFile_open' or $perl_name eq 'fdopen') { }"}],[5064,{"text":"elsif ($perl_name eq 'caller') { }"}],[5064,{"text":"elsif ($perl_name eq 'seek') { }"}],[5064,{"text":"elsif ($perl_name eq 'tell') { }"}],[5064,{"text":"elsif ($py_name eq '.read' or $py_name eq '.sysread') { }"}],[5064,{"text":"elsif ($perl_name eq 'stat_cando') { }"}],[5064,{"text":"elsif (exists $PYF_OUT_PARAMETERS{$orig_py_name}) { }"}],[5064,{"text":"elsif ($perl_name eq 're') { }"}],[5064,{"text":"elsif ($perl_name eq 'tr') { }"}],[5064,{"text":"elsif (substr($py_name, 0, 1) eq '.') { }"}],[5064,{"text":"elsif ($py_name eq '_last_ndx') { }"}],[5064,{"text":"elsif ($py_name eq 'math.exp' and $ValClass[$start] eq 'd' and $ValPy[$start] >= 710) { }"}],[5064,{"text":"elsif ($perl_name eq 'bless') { }"}],[6517,{"text":"unless defined $limit"}],[6524,{"text":"if $debug >= 3"}],[6531,{"text":"if $k > $#ValClass"}],[6532,{"text":"if $ValClass[$k] eq \"a\" and substr($ValPy[$k], 0, 4) ne \"len(\""}],[6542,{"text":"if $k + 2 <= $#ValClass and $ValClass[$k + 1] eq \"~\" and $ValClass[$k + 2] eq \"q\""}],[6533,{"text":"if ($ValClass[$k] eq 'f' and substr(&Pythonizer::func_type($ValPerl[$k], $ValPy[$k]), 0, 1) eq 'a') { }"}],[6533,{"text":"elsif ($ValClass[$k] eq 's') { }"}],[6533,{"text":"elsif ($ValClass[$k] eq 'q' and $ValPy[$k] =~ /\\.split\\(\\)$/) { }"}],[6555,{"text":"if ($ValClass[$start] ne \"\\\"\" or substr($ValPy[$start], 0, 1) eq \"f\")"}],[6564,{"text":"if (index($ValPerl[$start], chr $o) != -1) { }"}],[6569,{"text":"if $o eq 90"}],[6561,{"text":"if ($which eq 'getopt') { }"}],[6588,{"text":"if $c eq \":\""}],[6591,{"text":"unless exists $Perlscan::NameMap{\"opt_$c\"} and exists $Perlscan::NameMap{\"opt_$c\"}{'$'}"}],[6589,{"text":"if ($which eq \"getopt\")"}],[6594,{"text":"if (exists $Perlscan::NameMap{\"opt_$c\"}{'$'})"}],[6597,{"text":"if (substr($options, $i + 1, 1) eq ':') { }"}],[6576,{"text":"if ($ValClass[$end_pos] eq 'h') { }"}],[6619,{"text":"if $ValClass[$i] ne \",\""}],[6620,{"text":"if $ValClass[$i + 1] ne \"\\\"\""}],[6625,{"text":"if $ValClass[$i] ne \"\\\"\""}],[6626,{"text":"if $ValClass[$i + 1] ne \"A\""}],[6627,{"text":"if $ValClass[$i + 2] ne \"\\\\\""}],[6628,{"text":"if $ValClass[$i + 3] ne \"s\" and $ValClass[$i + 3] ne \"a\""}],[6629,{"text":"if $ValClass[$i + 4] ne \",\" and $ValClass[$i + 4] ne \")\""}],[6617,{"text":"if ($ValClass[$start] eq '\\\\' and $ValClass[$start + 1] eq 'h') { }"}],[6642,{"text":"if (length $keys[$i] == 1) { }"}],[6648,{"text":"unless defined $op"}],[6649,{"text":"unless defined $typ"}],[6650,{"text":"unless defined $arr"}],[6652,{"text":"if exists $TypeMap{$typ}"}],[6672,{"text":"if $typ eq \"int\" or $typ eq \"float\""}],[6673,{"text":"if ($typ =~ /\\d+/) { }"}],[6673,{"text":"elsif ($typ) { }"}],[6680,{"text":"if ($arr eq \"%\")"}],[6685,{"text":"if ($op eq ':') { }"}],[6685,{"text":"elsif ($op eq '=') { }"}],[6700,{"text":"if ($1 eq $2) { }"}],[6691,{"text":"if ($arr eq '@') { }"}],[6691,{"text":"elsif ($arr =~ /{(\\d+)}/) { }"}],[6691,{"text":"elsif ($arr =~ /{,\\d+}/ or $arr =~ /{,}/) { }"}],[6691,{"text":"elsif ($arr =~ /{0,\\d+}/) { }"}],[6691,{"text":"elsif ($arr =~ /{(\\d+),(\\d+)}/) { }"}],[6691,{"text":"elsif ($op eq ':') { }"}],[6690,{"text":"if ($nargs)"}],[6709,{"text":"if ($op eq \"+\")"}],[6712,{"text":"if ($op eq \"!\" or $op eq \"\")"}],[6719,{"text":"if length $key == 2"}],[6716,{"text":"if ($op eq '!') { }"}],[6716,{"text":"elsif ($op ne '') { }"}],[6739,{"text":"if $typ eq \"int\" or $typ eq \"float\""}],[6740,{"text":"if ($typ =~ /\\d+/) { }"}],[6740,{"text":"elsif ($typ) { }"}],[6749,{"text":"if ($arr eq \"%\" or $ValClass[$i + 3] eq \"h\")"}],[6754,{"text":"if ($op eq ':') { }"}],[6754,{"text":"elsif ($op eq '=') { }"}],[6769,{"text":"if ($1 eq $2) { }"}],[6760,{"text":"if ($arr eq '@') { }"}],[6760,{"text":"elsif ($arr =~ /{(\\d+)}/) { }"}],[6760,{"text":"elsif ($arr =~ /{,\\d+}/ or $arr =~ /{,}/) { }"}],[6760,{"text":"elsif ($arr =~ /{0,\\d+}/) { }"}],[6760,{"text":"elsif ($arr =~ /{(\\d+),(\\d+)}/) { }"}],[6760,{"text":"elsif ($ValClass[$i + 3] eq 'a') { }"}],[6760,{"text":"elsif ($op eq ':') { }"}],[6759,{"text":"if ($nargs)"}],[6780,{"text":"if ($op eq \"+\")"}],[6783,{"text":"if ($op eq \"!\" or $op eq \"\")"}],[6790,{"text":"if length $key == 2"}],[6787,{"text":"if ($op eq '!') { }"}],[6787,{"text":"elsif ($op ne '') { }"}],[6664,{"text":"if ($type == 1) { }"}],[6824,{"text":"$ValPerl[$start + 1] eq '(' ? :"}],[6827,{"text":"$ValPerl[$start + 1] eq '(' ? :"}],[6829,{"text":"unless ($ValClass[$k] =~ /[is]/)"}],[6832,{"text":"if $ValClass[$k] eq \"i\""}],[6840,{"text":"if $ValPerl[$k + 1] eq \",\""}],[6846,{"text":"if (substr($open_mode, -1, 1) eq \"&\")"}],[6843,{"text":"if ($ValClass[$k] eq '\"') { }"}],[6843,{"text":"elsif ($ValClass[$k] eq 's') { }"}],[6857,{"text":"if ($ValClass[$k] eq '\"' or $ValClass[$k] eq 's') { }"}],[6857,{"text":"elsif ($ValClass[$k] eq 'i' and $LocalSub{$ValPy[$k]}) { }"}],[6872,{"text":"if ($open_mode eq '<-') { }"}],[6872,{"text":"elsif ($open_mode eq '->') { }"}],[6881,{"text":"if ($pipe)"}],[6865,{"text":"if ($ValPy[$k] =~ /^(f?['\"]+)\\s*([<>+|-]*)([&]?)\\s*(.*?)\\s*([|]?)\\s*(['\"]+)$/)"}],[6887,{"text":"if (defined $open_mode and $open_mode eq \"\" and $ValPy[$k] =~ /^['\"]/)"}],[6896,{"text":"if ($k == $end_pos) { }"}],[6842,{"text":"if ($k + 1 <= $#ValClass and $ValClass[$k + 1] eq ',') { }"}],[6842,{"text":"elsif ($ValClass[$k] eq '\"') { }"}],[6842,{"text":"elsif ($ValClass[$k] eq 's') { }"}],[6842,{"text":"elsif ($ValClass[$k] eq 'i' and $LocalSub{$ValPy[$k]}) { }"}],[6842,{"text":"elsif (($expr_mode_end = next_same_level_token(',', $k, $end_pos)) >= 0) { }"}],[6916,{"text":"if $ext eq \"raw\" or $ext eq \"bytes\""}],[6917,{"text":"if ($ext =~ /encoding\\((.*)\\)/) { }"}],[6917,{"text":"elsif ($ext eq 'utf8') { }"}],[6914,{"text":"if (index($open_mode, \":\") != -1)"}],[6924,{"text":"if (exists $PyOpen{$open_mode}) { }"}],[6913,{"text":"if (defined $open_mode)"}],[6939,{"text":"if $variable_mode"}],[6943,{"text":"unless $implicit_global_my"}],[6942,{"text":"if (index($ValPy[$k], \".\") == -1)"}],[6940,{"text":"if ($k == $end_pos and $ValClass[$k] eq \"i\")"}],[6948,{"text":"if ($dup)"}],[6934,{"text":"if (not defined $open_mode) { }"}],[6956,{"text":"if ($mode ne \"s\" and not $handle =~ /^[A-Za-z0-9_]+$/)"}],[6968,{"text":"if (defined $expr_mode_start)"}],[6963,{"text":"if (defined $target) { }"}],[6975,{"text":"if $ValPerl[$start + 1] eq \"(\""}],[6986,{"text":"if (defined $expr_mode_start)"}],[6980,{"text":"if (defined $target) { }"}],[6999,{"text":"if (defined $expr_mode_start)"}],[6993,{"text":"if (defined $target) { }"}],[6960,{"text":"if ($mode eq 'f') { }"}],[6960,{"text":"elsif ($mode eq 's') { }"}],[6960,{"text":"elsif ($mode eq 'c') { }"}],[7011,{"text":"if ($orig_mode eq 'f') { }"}],[7007,{"text":"if ($mode ne $orig_mode)"}],[7030,{"text":"$ValPerl[$start + 1] eq '(' ? :"}],[7033,{"text":"$ValPerl[$start + 1] eq '(' ? :"}],[7035,{"text":"unless ($ValClass[$k] =~ /[is]/)"}],[7038,{"text":"if $ValClass[$k] eq \"i\""}],[7039,{"text":"if $ValPerl[$k + 1] eq \",\""}],[7041,{"text":"if ($k == $end_pos) { }"}],[7040,{"text":"if ($ValClass[$k] eq 's') { }"}],[7040,{"text":"elsif ($ValClass[$k] eq 'i' and $LocalSub{$ValPy[$k]}) { }"}],[7053,{"text":"if ($mode ne \"s\" and not $handle =~ /^[A-Za-z0-9_]+$/)"}],[7059,{"text":"if (defined $target) { }"}],[7066,{"text":"if $ValClass[$k + 1] eq \")\""}],[7072,{"text":"if (defined $target) { }"}],[7101,{"text":"if (defined $target) { }"}],[7057,{"text":"if ($mode eq 'f') { }"}],[7057,{"text":"elsif ($mode eq 's') { }"}],[7057,{"text":"elsif ($mode eq 'c') { }"}],[7134,{"text":"if ($orig_mode eq 'f') { }"}],[7131,{"text":"if ($mode ne $orig_mode)"}],[7159,{"text":"unless (defined $begin)"}],[7165,{"text":"if ($begin < 0 or $TrStatus < 0) { }"}],[7165,{"text":"elsif ($begin > $#ValClass) { }"}],[7173,{"text":"scalar @_ > 2 ? :"}],[7181,{"text":"if ($limit < 0)"}],[7177,{"text":"if (scalar @_ > 1) { }"}],[7177,{"text":"elsif ($ValClass[$begin] eq '(') { }"}],[7186,{"text":"if $ValClass[$begin] eq \"(\" and matching_br($begin) == $limit"}],[7188,{"text":"if ($RecursionLevel > $MAX_DEPTH)"}],[7194,{"text":"if ($debug >= 3)"}],[7205,{"text":"if (need_splat($i))"}],[7212,{"text":"if (need_splat($i))"}],[7202,{"text":"if ($ValClass[$begin] eq '(' and $ValPerl[$begin] eq '(') { }"}],[7202,{"text":"elsif (need_splat($begin)) { }"}],[7200,{"text":"if ($mode == 2 or $mode == 3)"}],[7225,{"text":"if ($ValClass[$begin] eq \"=\")"}],[7228,{"text":"if $ValClass[$begin] eq \"(\" and matching_br($begin) == $limit"}],[7220,{"text":"if ($ValClass[$begin] eq \"(\" and $ValPerl[$begin] eq \"(\" and matching_br($begin) == $begin + 1 and $begin + 1 != $#ValClass and $ValClass[$begin + 2] ne \":\" and $begin == 0 || !($ValClass[$begin - 1] =~ /[fi]/))"}],[7238,{"text":"if $l < 0"}],[7242,{"text":"if ($autovivification)"}],[7239,{"text":"if ($l - $i == 1)"}],[7249,{"text":"if index($TokenStr, \"=\") > $l"}],[7250,{"text":"if ($f = index($TokenStr, \"f\")) != -1 and $ValPerl[$f] =~ /keys|values/ || $ValPerl[$f] =~ /push|unshift/ && $l < next_same_level_token(',', $f, $#ValClass)"}],[7254,{"text":"if $autovivification and not last_subscript($i, $l)"}],[7255,{"text":"if $autovivification and in_x_element_call($i)"}],[7256,{"text":"if $autovivification and $ValClass[0] eq \"c\" and $ValPy[0] eq \"for\""}],[7257,{"text":"if $autovivification and same_as_lhs($l)"}],[7258,{"text":"if ($i == $begin and end_of_variable($i + 1) == $l - 1)"}],[7263,{"text":"unless (substr($TokenStr, $i, $l + 1 - $i) =~ /[,A]/)"}],[7234,{"text":"if ($ValClass[$i] eq \"(\" and $ValPy[$i] eq \"[\" and $ValPerl[$i] eq \"{\" and $i - 1 != 0 and $ValClass[$i - 1] ne \"f\")"}],[7275,{"text":"if ($mode == 1 and $bracketed == 0) { }"}],[7275,{"text":"elsif ($mode == -1 and $ValClass[$begin] eq '(' and $ValClass[$limit] eq ')') { }"}],[7283,{"text":"if (substr($TokenStr, $begin) =~ /^d\\*d\\*d/ and $ValPy[$begin] == 9 and $ValPy[$begin + 1] eq \"**\" and $ValPy[$begin + 2] == 9 and $ValPy[$begin + 3] eq \"**\" and $ValPy[$begin + 4] == 9)"}],[7292,{"text":"if ($cur_pos < 0 or $TrStatus < 0)"}],[7295,{"text":"unless (defined $ValClass[$cur_pos])"}],[7302,{"text":"if ($ValClass[$pos] eq \"~\" and $ValPerl[$pos] ne \"~\")"}],[7301,{"text":"if ($pos != -1)"}],[7309,{"text":"if ($match + 1 <= $#ValClass and $ValClass[$cur_pos + 1] eq \"f\" and $ValPerl[$cur_pos + 1] eq \"ref\" and $ValClass[$match + 1] eq \"D\")"}],[7317,{"text":"if ($autovivification) { }"}],[7326,{"text":"unless $cur_pos == $begin and $mode == -1"}],[7328,{"text":"if ($match < 0)"}],[7336,{"text":"if $i < 0"}],[7332,{"text":"if ($ValClass[$i] eq 'A') { }"}],[7332,{"text":"elsif ($ValClass[$i] eq '(') { }"}],[7330,{"text":"if ($ValPy[$cur_pos] ne \"{\")"}],[7341,{"text":"if $cur_pos < 0"}],[7316,{"text":"if ($match == $cur_pos + 1 and $ValPy[$cur_pos] eq '(') { }"}],[7359,{"text":"if ($context != 1)"}],[7369,{"text":"if $pos < 0"}],[7376,{"text":"$bracketed == 1 ? :"}],[7376,{"text":"$pos > -1 ? :"}],[7378,{"text":"if ($cur_pos + 1 <= $end_pos and $ValClass[$cur_pos + 1] eq \"=\" and exists $SpecialVarR2L{$ValPy[$cur_pos]})"}],[7385,{"text":"if (inParens($cur_pos) and $ValPy[$cur_pos + 1] eq '=') { }"}],[7399,{"text":"if $cur_pos < 0"}],[7382,{"text":"if ($end_pos - $cur_pos >= 2 and $ValClass[$cur_pos] eq 's' and $ValClass[$cur_pos + 1] eq '=' and $ValClass[$cur_pos + 2] eq 'f') { }"}],[7382,{"text":"elsif ($end_pos - $cur_pos > 1 and ($split = next_same_level_token('~', $cur_pos, $end_pos)) > -1 and $split <= $end_pos and $ValPerl[$split] ne '~') { }"}],[7382,{"text":"elsif ($ValClass[$cur_pos] eq 'f') { }"}],[7407,{"text":"if ($end_pos < 0)"}],[7429,{"text":"if need_splat($cur_pos)"}],[7432,{"text":"if ($ValClass[$cur_pos] eq 'f') { }"}],[7439,{"text":"if $cur_pos <= $end_pos - 1"}],[7431,{"text":"if ($comma != -1) { }"}],[7420,{"text":"if ($ValPerl[$cur_pos + 1] eq '{') { }"}],[7444,{"text":"if (exists $SubAttributes{$ValPy[$sub_pos]}{'wantarray'} and list_or_scalar_context($sub_pos, $limit) == 1) { }"}],[7454,{"text":"if $cur_pos + 2 <= $end_pos - 1"}],[7456,{"text":"if ($cur_pos + 2 <= $end_pos - 1) { }"}],[7455,{"text":"if (exists $SubAttributes{$ValPy[$sub_pos]}{'wantarray'} and list_or_scalar_context($sub_pos, $limit) == 1) { }"}],[7467,{"text":"if (index($ValPy[$cur_pos], \".\") == -1)"}],[7466,{"text":"if ($cur_pos == 0 or $ValClass[$cur_pos - 1] ne \"D\")"}],[7472,{"text":"if ($ValClass[$cur_pos + 1] eq \"(\" and $ValPerl[$cur_pos + 1] ne \"(\")"}],[7478,{"text":"if $gen_close"}],[7480,{"text":"if ($Perlscan::PythonCode[-2] eq '(') { }"}],[7479,{"text":"if (exists $SubAttributes{$ValPy[$cur_pos]}{'wantarray'} and list_or_scalar_context($cur_pos, $limit) == 1)"}],[7415,{"text":"if ($LocalSub{$ValPy[$cur_pos]}) { }"}],[7415,{"text":"elsif ($ValClass[$cur_pos + 2] eq 'f') { }"}],[7408,{"text":"if ($end_pos + 1 <= $limit and $ValClass[$end_pos + 1] eq '~' and $ValPerl[$end_pos + 1] ne '~') { }"}],[7492,{"text":"$bracketed == 1 ? :"}],[7492,{"text":"$pos > -1 ? :"}],[7508,{"text":"if ($limit < 0)"}],[7505,{"text":"if ($cur_pos + 1 <= $end_pos and $ValClass[$cur_pos + 1] eq \"(\" and $ValPerl[$cur_pos + 1] eq \"(\")"}],[7500,{"text":"if ($cur_pos + 1 <= $end_pos and $ValClass[$cur_pos + 1] eq 'i' and not $LocalSub{$ValPy[$cur_pos + 1]} and not $Constants{$ValPy[$cur_pos + 1]}) { }"}],[7517,{"text":"if $cur_pos != 0 and $ValClass[$cur_pos - 1] eq \"\\\\\""}],[7518,{"text":"unless $skip_parens"}],[7523,{"text":"if need_splat($cur_pos + 1)"}],[7528,{"text":"if ($k < 0)"}],[7524,{"text":"if (index('^*~/%+-.HI>&|0or?:=,A', $ValClass[$cur_pos + 1]) != -1) { }"}],[7521,{"text":"if ($cur_pos + 1 <= $end_pos)"}],[7534,{"text":"unless $skip_parens"}],[7531,{"text":"if (not $skip_parens and exists $SubAttributes{$ValPy[$cur_pos]}{'wantarray'} and list_or_scalar_context($cur_pos, $limit) == 1) { }"}],[7537,{"text":"if $bracketed == 1"}],[7543,{"text":"if $ValClass[$last_i] ne \"i\" and $ValClass[$last_i] ne \"D\""}],[7547,{"text":"if ($last_i <= $#ValClass and $ValClass[$last_i] eq 'i') { }"}],[7493,{"text":"if ($pos > -1 and $ValClass[$pos] eq '~' and $ValPerl[$pos] ne '~') { }"}],[7493,{"text":"elsif ($LocalSub{$ValPy[$cur_pos]} || $ValPerl[$cur_pos] =~ /::/ || in_boolean_context($cur_pos) && !$Constants{$ValPy[$cur_pos]} && substr($ValPerl[$cur_pos], 0, 1) ne '-' || $cur_pos + 1 <= $#ValClass && $ValClass[$cur_pos + 1] =~ /[ahsd\"]/ and $cur_pos + 1 > $#ValClass || $ValPerl[$cur_pos + 1] ne '=>') { }"}],[7493,{"text":"elsif ($Constants{$ValPy[$cur_pos]}) { }"}],[7493,{"text":"elsif ($cur_pos + 1 <= $#ValClass and $ValClass[$cur_pos + 1] eq 'i') { }"}],[7558,{"text":"if (exists $SubAttributes{$ValPy[$cur_pos]}{'wantarray'} and list_or_scalar_context($cur_pos, $limit) == 1) { }"}],[7566,{"text":"if (inSubscript($cur_pos)) { }"}],[7576,{"text":"if ($cur_pos + 2 > $#ValClass or $ValClass[$cur_pos + 2] ne '(') { }"}],[7590,{"text":"if ($ValClass[$i] eq 'f' and $ValPerl[$i] eq 'die') { }"}],[7590,{"text":"elsif ($ValClass[$i] eq '=') { }"}],[7603,{"text":"if ($end_pos < 0)"}],[7605,{"text":"if $ValClass[$e] eq \";\""}],[7606,{"text":"if $walrus"}],[7609,{"text":"if ($k < 0)"}],[7607,{"text":"if ($s + 1 <= $e) { }"}],[7613,{"text":"if $walrus"}],[7622,{"text":"if ($cur_pos + 1 <= $end_pos and $ValClass[$cur_pos + 1] eq 'i') { }"}],[7643,{"text":"if $add_paren"}],[7637,{"text":"if ($cur_pos != $end_pos) { }"}],[7659,{"text":"if $add_paren"}],[7655,{"text":"if ($cur_pos != $end_pos) { }"}],[7636,{"text":"if (scalar @eval_stack != 0) { }"}],[7636,{"text":"elsif (&Perlscan::in_BEGIN() and not &Perlscan::in_sub()) { }"}],[7616,{"text":"if ($ValPerl[$cur_pos] eq 'next' or $ValPerl[$cur_pos] eq 'last') { }"}],[7616,{"text":"elsif ($ValPerl[$cur_pos] eq 'return') { }"}],[7616,{"text":"elsif ($ValPerl[$cur_pos] eq 'use' or $ValPerl[$cur_pos] eq 'require' or $ValPerl[$cur_pos] eq 'no') { }"}],[7307,{"text":"if ($ValClass[$cur_pos] eq '(') { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq '<') { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq ')') { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] =~ /[0o]/) { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq 'x') { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] =~ /[ahs]/ and $cur_pos + 1 < $limit and $ValPy[$cur_pos + 1] eq ':=' and $mode != 1 and not +($cur_pos == 0 || $ValPy[$cur_pos - 1] eq '(') && ($limit + 1 > $#ValPy || $ValPy[$limit + 1] eq ')')) { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] =~ /[sf]/) { }"}],[7307,{"text":"elsif ($cur_pos < $#ValClass and $ValClass[$cur_pos] eq 'i' and $ValClass[$cur_pos + 1] eq '(') { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq 'i' and not inDotOp($cur_pos)) { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq 'i' and $cur_pos != 0 and $ValClass[$cur_pos - 1] eq 'D' and $cur_pos + 1 > $#ValClass || $ValClass[$cur_pos + 1] ne '(' && $ValClass[$cur_pos + 1] ne 'D') { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq 'r') { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq '&' and $cur_pos + 1 <= $#ValClass and $ValClass[$cur_pos + 1] eq 's' and $cur_pos == 0 || index('difs)', $ValClass[$cur_pos - 1]) == -1) { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq '+' and $cur_pos == 0 || $ValClass[$cur_pos - 1] eq '(' || $ValClass[$cur_pos - 1] eq 'f' && $ValPy[$cur_pos - 1] eq 'print') { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq 'k' and $ValPerl[$cur_pos] eq 'sub') { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq 'k' and $cur_pos != 0) { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq '=' and $ValPy[$cur_pos] eq '=' and inParens($cur_pos)) { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq ',' and $cur_pos == $#ValClass) { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq 'q' and substr($ValPy[$cur_pos], 0, 9) eq 're.search' and $ValPy[$cur_pos] =~ /re\\.G/) { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq '\\\\' and $cur_pos + 1 <= $#ValClass and $ValClass[$cur_pos + 1] eq 's') { }"}],[7307,{"text":"elsif ($ValClass[$cur_pos] eq '\"' and $cur_pos + 1 <= $#ValClass and $ValClass[$cur_pos + 1] eq 'D') { }"}],[7694,{"text":"if ($cur_pos eq $prev_k)"}],[7702,{"text":"if ($mode == 1 and $bracketed == 0)"}],[7707,{"text":"if ($cur_pos > $limit)"}],[7710,{"text":"if ($debug >= 3)"}],[7722,{"text":"if $ValClass[$pos - 1] eq \"D\""}],[7721,{"text":"if ($pos != 0)"}],[7725,{"text":"if $ValClass[$pos + 1] eq \"D\""}],[7724,{"text":"if ($pos != $#ValClass)"}],[7735,{"text":"if $close_p < 0"}],[7736,{"text":"if $ValPy[$close_p] ne \"]\""}],[7738,{"text":"if $open_p < 0"}],[7739,{"text":"if $open_p < $pos"}],[7748,{"text":"if $close_p < 0"}],[7750,{"text":"if $open_p < 0"}],[7751,{"text":"if $open_p < $pos"}],[7763,{"text":"$ValPerl[$op_pos] eq '||=' ? :"}],[7764,{"text":"$op eq '||' ? :"}],[7765,{"text":"if ($debug >= 3)"}],[7775,{"text":"if ($debug >= 3)"}],[7788,{"text":"$ValPerl[$op_pos] eq '++' ? :"}],[7789,{"text":"$ValPerl[$op_pos] eq '++' ? :"}],[7793,{"text":"if ($debug >= 3)"}],[7796,{"text":"if $ValPerl[$op_pos] eq \"^\""}],[7798,{"text":"if $debug >= 3"}],[7801,{"text":"if $debug >= 3"}],[7797,{"text":"if ($op_pos == 0 and not has_comma_operator($start, $limit)) { }"}],[7797,{"text":"elsif ($ValClass[$op_pos - 1] eq ';') { }"}],[7812,{"text":"if ($debug >= 3)"}],[7823,{"text":"if $debug >= 3"}],[7821,{"text":"if ($lvalue_start == 0 && $lvalue_end == 0 || $ValClass[$lvalue_end - 1] eq ';' and $op_pos == $limit)"}],[7804,{"text":"if ($op_pos + 1 <= $#ValClass and $ValClass[$op_pos + 1] eq 's') { }"}],[7804,{"text":"elsif ($op_pos == 0) { }"}],[7827,{"text":"if ($debug >= 3)"}],[7835,{"text":"$pos > -1 ? :"}],[7831,{"text":"if ($lvalue_start != 0 and $ValClass[$lvalue_start - 1] eq \"i\" and $ValClass[$lvalue_start] ne \"(\" and $LocalSub{$ValPy[$lvalue_start - 1]})"}],[7848,{"text":"if ($op eq '+') { }"}],[7856,{"text":"unless ($pre_op)"}],[7859,{"text":"if ($debug >= 3)"}],[7845,{"text":"if ($ValPy[$lvalue_start] =~ /^\\(len\\((.*)\\)-1\\)$/)"}],[7873,{"text":"if ($debug >= 3)"}],[7889,{"text":"if ($debug >= 3)"}],[7864,{"text":"if ($pre_op) { }"}],[7909,{"text":"if ($debug >= 3)"}],[7916,{"text":"if ($debug >= 3)"}],[7905,{"text":"if ($pre_op and $op_pos == 0 and $lvalue_end == $#ValClass) { }"}],[7905,{"text":"elsif (not $pre_op and $lvalue_start == 0 and $op_pos == $#ValClass) { }"}],[7946,{"text":"$op eq '+' ? :"}],[7930,{"text":"if ($pre_op) { }"}],[7844,{"text":"if ($lvalue_start == $lvalue_end) { }"}],[8024,{"text":"if ($ValClass[$a_start] eq ')') { }"}],[8024,{"text":"elsif (index('&|^o0r:A?=,n(', $ValClass[$a_start]) != -1) { }"}],[8033,{"text":"if ($ValClass[$b_end] eq '(') { }"}],[8033,{"text":"elsif (index('&|^o0r:A?=,n)', $ValClass[$b_end]) != -1) { }"}],[8047,{"text":"if ($debug >= 3)"}],[8060,{"text":"if $c_pos < 0"}],[8069,{"text":"if ($ValClass[$cond_start] eq ')') { }"}],[8069,{"text":"elsif (index('(=,:kc', $ValClass[$cond_start]) != -1) { }"}],[8076,{"text":"if ($debug >= 3)"}],[8092,{"text":"if ($debug >= 3)"}],[8117,{"text":"if $end_pos < 0"}],[8119,{"text":"if ($ValClass[$end_pos] eq \"D\")"}],[8135,{"text":"if $pos == 0"}],[8138,{"text":"if substr($ValPerl[$begin], 0, 1) eq \".\""}],[8140,{"text":"if $ValPerl[$begin] eq \"sysread\""}],[8145,{"text":"if $limit < 0"}],[8143,{"text":"if ($pos <= $#ValClass and $ValClass[$pos] eq \"(\")"}],[8151,{"text":"if $comma < 0"}],[8155,{"text":"if $comma < 0"}],[8164,{"text":"if $lower != -1"}],[8162,{"text":"unless ($bracketed)"}],[8161,{"text":"if ($comma < 0) { }"}],[8173,{"text":"if (defined $of0 and $ValClass[$of0] eq \"d\" and $ValPy[$of0] eq 0)"}],[8197,{"text":"if (defined $of0)"}],[8186,{"text":"unless ($bracketed)"}],[8217,{"text":"if $debug >= 3"}],[8231,{"text":"if (defined $of0)"}],[8251,{"text":"if (defined $of0)"}],[8255,{"text":"if $debug >= 3"}],[8265,{"text":"if scalar @_ > 0"}],[8267,{"text":"if $ValClass[0] eq \"t\""}],[8269,{"text":"if $eq1 < 0 or $ValClass[$eq1] ne \"=\""}],[8271,{"text":"if $eq2 < 0 or $ValClass[$eq2] ne \"=\""}],[8278,{"text":"if $eqn < 0 or $ValClass[$eqn] ne \"=\""}],[8282,{"text":"if $eqn >= 0 and $ValClass[$eqn] ne \"=\""}],[8288,{"text":"if (not defined $type) { }"}],[8288,{"text":"elsif ($type ne $ValClass[$i]) { }"}],[8287,{"text":"if ($ValClass[$i] =~ /[asG]/ and $ValClass[$i + 1] eq '=') { }"}],[8287,{"text":"elsif ($ValClass[$i] eq '(' and $ValClass[$i + 1] eq ')' and $ValClass[$i + 2] eq '=') { }"}],[8302,{"text":"if $debug"}],[8301,{"text":"if ($yup or $TokenStr =~ /=\\(\\)=/)"}],[8305,{"text":"if $test_only"}],[8317,{"text":"if $debug"}],[8326,{"text":"if ($start == 0 or $ValClass[$start - 1] ne \"(\" or $ValPerl[$start - 1] ne \"(\" or $ValClass[$end_pos + 1] ne \")\" or $ValPerl[$end_pos + 1] ne \")\")"}],[8345,{"text":"if $pos < 0"}],[8349,{"text":"if $pos < 0"}],[8351,{"text":"if $pos < 0"}],[8353,{"text":"if $ValClass[$pos] eq \"i\" and $pos + 1 > $end || $ValClass[$pos + 1] ne '('"}],[8358,{"text":"if $pos < 0"}],[8354,{"text":"if ($ValClass[$pos] eq \"f\" and $pos + 1 <= $#ValClass and $ValPerl[$pos + 1] ne \"(\")"}],[8371,{"text":"if $pos == 1 and $ValClass[0] =~ /[ashG]/ and not has_comma_operator(2, $#ValClass)"}],[8372,{"text":"if $pos == 2 and $ValClass[0] eq \"t\" and $ValClass[1] =~ /[ashG]/ and not has_comma_operator(3, $#ValClass)"}],[8373,{"text":"if $pos >= 3 and $ValClass[$pos - 1] eq \")\" and reverse_matching_br($pos - 1) == 0"}],[8374,{"text":"if $pos >= 4 and $ValClass[$pos - 1] eq \")\" and reverse_matching_br($pos - 1) == 1 and $ValClass[0] eq \"t\""}],[8375,{"text":"if $ValClass[0] eq \"s\" and next_same_level_token(\"=\", 0, $#ValClass) == $pos and not has_comma_operator($pos + 1, $#ValClass)"}],[8377,{"text":"if $ValClass[0] eq \"a\" and next_same_level_token(\"=\", 0, $#ValClass) == $pos"}],[8378,{"text":"if $ValClass[0] eq \"c\" and $ValPerl[0] eq 'for' || $ValPerl[0] eq 'foreach' and index($TokenStr, \";\") > 0"}],[8379,{"text":"if $ValClass[0] eq \"f\" and $ValPerl[0] eq 'chomp' || $ValPerl[0] eq 'chop'"}],[8380,{"text":"if $ValClass[0] eq \"(\" and $ValClass[-1] eq \")\" and next_same_level_token(\"=\", 1, $#ValClass - 1) == $pos and not has_comma_operator($pos + 1, $#ValClass - 1)"}],[8382,{"text":"if $ValClass[$pos] eq \"~\" and $ValPerl[$pos] eq \"~\""}],[8383,{"text":"if $ValClass[$pos] eq \"~\" and $pos + 1 > $#ValClass || $ValClass[$pos + 1] ne 'f' || $ValPerl[$pos + 1] ne 're' && $ValPerl[$pos + 1] ne 'tr'"}],[8384,{"text":"if $pos >= 5 and $ValClass[0] eq \"t\" and $ValClass[1] eq \"s\" and $ValClass[2] eq \"(\" and end_of_variable(1) + 1 == $pos"}],[8386,{"text":"if $ValClass[0] eq \"t\""}],[8390,{"text":"if (not $ValClass[$i] =~ /[ashG]/ or $ValClass[$i + 1] ne \"=\")"}],[8395,{"text":"if $yup"}],[8387,{"text":"if ($ValClass[$p] =~ /[ashG]/ and $ValClass[$pos] eq \"=\" and not has_comma_operator($pos + 1, $#ValClass))"}],[8397,{"text":"if split_up_multiple_assignment(1)"}],[8399,{"text":"if $start < 0"}],[8400,{"text":"unless $ValClass[$start] =~ /[ashG]/"}],[8402,{"text":"if $start != 0 and $ValClass[$start - 1] eq \"(\""}],[8409,{"text":"if ($fi != -1 and $ValClass[$fi + 1] ne \"(\")"}],[8407,{"text":"if ($ValClass[$lower] eq \",\")"}],[8415,{"text":"if $lower != -1"}],[8404,{"text":"if ($lower >= 0)"}],[8418,{"text":"if $close >= $pos and $close <= $end_pos"}],[8419,{"text":"if $debug >= 5"}],[8436,{"text":"if ($ValClass[$start] eq \"s\" and $ValPerl[$start] eq \"\\$_\" and $ValPy[$start] =~ /^$PERL_ARG_ARRAY\\[(\\d+)\\]$/)"}],[8447,{"text":"if ($ValPy[$pos] eq \"=\")"}],[8451,{"text":"if ($ValClass[$pos] eq \"=\" and $ValPy[$pos] ne \":=\")"}],[8468,{"text":"if $debug"}],[8467,{"text":"if ($op eq \"~\" and $ValPerl[$pos + 1] eq \"re\" and $ValPy[$pos + 1] =~ /re\\.R/)"}],[8477,{"text":"if ($ValPerl[$pos + 3] eq 're') { }"}],[8476,{"text":"if ($op eq \"~\")"}],[8461,{"text":"if (index($ValPy[$start], \".\") != -1)"}],[8496,{"text":"if $rev < 0"}],[8499,{"text":"if $op eq \"=\" or $op eq \":\""}],[8500,{"text":"unless exists $ARRAY_INDEX_FUNCS{$op}"}],[8502,{"text":"if ($ValPerl[$pos + 1] eq 'tr') { }"}],[8497,{"text":"if ($ValClass[$pos] eq '=') { }"}],[8446,{"text":"if ($ValClass[$start] =~ /[ashG]/ and $pos - $start == 1) { }"}],[8446,{"text":"elsif ($ValClass[$pos - 1] eq ')' and $ValPerl[$pos - 1] eq '}' || $ValPerl[$pos - 1] eq ']') { }"}],[8526,{"text":"if $debug"}],[8536,{"text":"if $pos == 0 and $#ValClass == 0 || $ValClass[1] eq '('"}],[8537,{"text":"if $pos == 2 and $ValClass[0] eq \"s\" and $ValClass[1] eq \"=\" and $#ValClass == 2 || $ValClass[3] eq '('"}],[8539,{"text":"if $pos == 3 and $ValClass[0] eq \"t\" and $ValClass[1] eq \"s\" and $ValClass[2] eq \"=\" and $#ValClass == 3 || $ValClass[4] eq '('"}],[8541,{"text":"if ($saved_eval_tokens)"}],[8545,{"text":"exists $eval_suffix{$.} ? :"}],[8559,{"text":"if $debug >= 5"}],[8562,{"text":"if ($pos == 0) { }"}],[8570,{"text":"if (($fc = substr($ValPy[$pos + 1], 0, 1)) ne \"'\" and $fc ne \"\\\"\")"}],[8580,{"text":"if (substr($ValPy[$pos + 1], 0, 1) eq 'f') { }"}],[8586,{"text":"if $debug >= 5"}],[8598,{"text":"if $close < 0"}],[8600,{"text":"if $close != $#ValClass"}],[8605,{"text":"if $close > 0"}],[8607,{"text":"if $end_pos != $#ValClass"}],[8568,{"text":"if ($pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq '\"') { }"}],[8568,{"text":"elsif ($pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq '(') { }"}],[8614,{"text":"if $pos != 0"}],[8610,{"text":"if ($pos == 0) { }"}],[8618,{"text":"if $debug"}],[8631,{"text":"if ($py =~ /,flags=([a-z]+)/)"}],[8638,{"text":"if (exists $flag_map{$flag})"}],[8642,{"text":"if (@args)"}],[8645,{"text":"if $debug >= 3"}],[8655,{"text":"if $py =~ /^str.maketrans\\('(.+)','(.+)'\\)$/ and $1 eq $2"}],[8656,{"text":"if $py =~ /^str.maketrans\\(\"(.+)\",\"(.+)\"\\)$/ and $1 eq $2"}],[8657,{"text":"if $py =~ /^str.maketrans\\(\"\"\"(.+)\"\"\",\"\"\"(.+)\"\"\"\\)$/ and $1 eq $2"}],[8658,{"text":"if $py =~ /^str.maketrans\\('''(.+)''','''(.+)'''\\)$/ and $1 eq $2"}],[8661,{"text":"if $py =~ /maketrans_c\\(.+,''\\),complement=True$/"}],[8673,{"text":"if ($ValPy[$pos] =~ /re\\.G/)"}],[8679,{"text":"if ($ValPy[$pos] =~ /re\\.R/)"}],[8745,{"text":"if $end - $start >= 10"}],[8748,{"text":"if (index(\"\\\"ds+-*()\", $ValClass[$i]) == -1)"}],[8761,{"text":"if $quote3 eq \"\\\"\\\"\\\"\" or $quote3 eq \"'''\""}],[8767,{"text":"if ($ch1 eq \"\\\\\" or $ch1 eq \"\\\"\" or $ch1 eq \"'\")"}],[8765,{"text":"if ($ch eq '\\\\') { }"}],[8765,{"text":"elsif ($ch eq $quote) { }"}],[8765,{"text":"elsif (length $quote == 3 and substr($string, $i, 3) eq $quote) { }"}],[8779,{"text":"if $debug >= 5"}],[8792,{"text":"if ($ch eq \"\\\\\" or $ch eq $delim)"}],[8822,{"text":"if $debug >= 3"}],[8828,{"text":"if (exists $STAT_SUB{$ValPerl[$pos + 1]})"}],[8832,{"text":"if (exists $LSTAT_SUB{$ValPerl[$pos + 1]})"}],[8838,{"text":"if ($import_perllib) { }"}],[8844,{"text":"$ValPerl[$pos] eq 'no' ? :"}],[8836,{"text":"if ($ValPerl[$pos + 1] eq 'autodie') { }"}],[8836,{"text":"elsif ($ValPerl[$pos + 1] eq 'autovivification') { }"}],[8846,{"text":"if ($pos != 0) { }"}],[8846,{"text":"elsif ($Pythonizer::CurNest) { }"}],[8853,{"text":"if $debug >= 3"}],[8824,{"text":"if ($pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq 'd' || $ValClass[$pos + 1] eq '\"' && substr($ValPy[$pos + 1], 0, 3) eq q['\\\\x] || $ValClass[$pos + 1] eq 'i' && exists $BUILTIN_LIBRARY_SET{$ValPerl[$pos + 1]})"}],[8857,{"text":"if ($pos != 0) { }"}],[8857,{"text":"elsif ($Pythonizer::CurNest) { }"}],[8864,{"text":"if $debug >= 3"}],[8856,{"text":"if ($ValPerl[$pos] eq 'no') { }"}],[8856,{"text":"elsif ($ValPerl[$pos] eq 'require' and $implicit_global_my) { }"}],[8876,{"text":"if (index(q['\"], substr($ValPy[$i], 0, 1)) != -1) { }"}],[8882,{"text":"if ($ValPerl[$i] eq 'dirname' and $ValPerl[$i + 1] eq '$0') { }"}],[8882,{"text":"elsif ($ValPerl[$i] eq 'dirname' and $ValPerl[$i + 1] eq '(' and $ValPerl[$i + 2] eq '$0') { }"}],[8873,{"text":"if ($ValClass[$i] eq '\"') { }"}],[8873,{"text":"elsif ($ValClass[$i] eq 'q') { }"}],[8873,{"text":"elsif ($ValClass[$i] eq 'f') { }"}],[8893,{"text":"if $debug"}],[8895,{"text":"if ($pos == 0) { }"}],[8901,{"text":"if $debug >= 3"}],[8917,{"text":"if $ValClass[$i] eq \")\" and $ValPerl[$i] eq \"}\""}],[8922,{"text":"if $comma < 0"}],[8908,{"text":"if ($ValClass[$pos + 2] eq 'i' and $ValClass[$pos + 3] eq 'A') { }"}],[8908,{"text":"elsif ($ValClass[$pos + 2] eq '(') { }"}],[8931,{"text":"if $debug >= 3"}],[8945,{"text":"if ($ValClass[$pos + 2] eq \"(\")"}],[8952,{"text":"if $ValClass[$i] eq \")\" and $ValPerl[$i] eq \"}\""}],[8956,{"text":"if $ValClass[$comma] ne \")\""}],[8954,{"text":"if ($comma < 0)"}],[8966,{"text":"if $ValClass[$comma - 1] ne \"i\""}],[8971,{"text":"if (exists $ovm->{'converter'})"}],[8977,{"text":"if (exists $ovm->{'unary'}) { }"}],[8977,{"text":"elsif (exists $ovm->{'modulo'}) { }"}],[8985,{"text":"if (exists $ovm->{'unary'}) { }"}],[8985,{"text":"elsif (exists $ovm->{'assign'}) { }"}],[8975,{"text":"if ($their_routine ne $normal)"}],[8999,{"text":"if (exists $ovm->{'modulo'}) { }"}],[8996,{"text":"if (exists $ovm->{'reversed'})"}],[8958,{"text":"if ($ValClass[$i] ne '\"' or not exists $OVERLOAD_MAP{$ValPerl[$i]}) { }"}],[9017,{"text":"if (exists $overloads{'<=>'}) { }"}],[9023,{"text":"unless (exists $overloads{$op})"}],[9014,{"text":"if (exists $overloads{'<=>'} or exists $overloads{'cmp'})"}],[9035,{"text":"if $debug >= 3"}],[9052,{"text":"$import_perllib ? :"}],[9057,{"text":"if ($do_std)"}],[9073,{"text":"if ($ValPerl[$i] eq ':std') { }"}],[9073,{"text":"elsif ($scope eq 'IO') { }"}],[9073,{"text":"elsif ($scope eq 'IN') { }"}],[9054,{"text":"if ($ValClass[$i] eq 'i') { }"}],[9054,{"text":"elsif ($ValClass[$i] eq '\"') { }"}],[9054,{"text":"elsif ($ValClass[$i] eq 'q') { }"}],[9097,{"text":"if $debug >= 3"}],[8869,{"text":"if ($pos + 1 <= $#ValClass and $ValClass[$pos + 1] eq 'i' and $ValPerl[$pos + 1] eq 'lib') { }"}],[8869,{"text":"elsif ($pos + 4 <= $#ValClass and $ValClass[$pos + 1] eq 'i' and $ValPerl[$pos + 1] eq 'constant') { }"}],[8869,{"text":"elsif ($pos + 4 <= $#ValClass and $ValClass[$pos + 1] eq 'i' and $ValPerl[$pos + 1] eq 'overload') { }"}],[8869,{"text":"elsif ($pos + 2 <= $#ValClass and $ValClass[$pos + 1] eq 'i' and $ValPerl[$pos + 1] eq 'open') { }"}],[9111,{"text":"if $opp >= $pos"}],[9113,{"text":"if $close >= $pos"}],[9122,{"text":"if ($ValPerl[$pos] eq 'use') { }"}],[9132,{"text":"if ($ValPerl[$pos] eq 'use') { }"}],[9141,{"text":"if $path eq \".\""}],[9143,{"text":"if (not $modules_path_added and $pos == 0)"}],[9142,{"text":"if ($path eq $MODULES_DIR or $path eq \"./$MODULES_DIR\")"}],[9149,{"text":"if (substr($ValPy[$pos + 1], -4, 3) eq \".pl\")"}],[9160,{"text":"if ($exports) { }"}],[9160,{"text":"elsif ($has_var_imports) { }"}],[9171,{"text":"if ($path) { }"}],[9176,{"text":"if ($exports)"}],[9158,{"text":"if ($pos == 0 and not $path and $file =~ /^[A-Za-z._][A-Za-z0-9._]*\\.py$/ and $CurSub eq '__main__' || !$exports) { }"}],[9128,{"text":"if (substr($ValPy[$pos + 1], 0, 1) eq 'f') { }"}],[9191,{"text":"if ($path eq $lpath)"}],[9189,{"text":"if ($path and @places)"}],[9197,{"text":"if $inLib"}],[9198,{"text":"if $path eq \".\""}],[9200,{"text":"if (not $modules_path_added and $pos == 0)"}],[9199,{"text":"if ($path eq $MODULES_DIR or $path eq \"./$MODULES_DIR\")"}],[9208,{"text":"if ($exports) { }"}],[9208,{"text":"elsif ($has_var_imports) { }"}],[9221,{"text":"if ($path) { }"}],[9226,{"text":"if ($exports)"}],[9206,{"text":"if ($pos == 0 and not $path and $ValPy[$pos + 1] =~ /^[A-Za-z._][A-Za-z0-9._]*$/ and $CurSub eq '__main__' || !$exports) { }"}],[9114,{"text":"if ($pos == $limit) { }"}],[9114,{"text":"elsif ($pos + 1 == $limit and $ValClass[$pos + 1] eq 's') { }"}],[9114,{"text":"elsif ($pos + 1 == $limit and $ValClass[$pos + 1] eq '\"') { }"}],[9114,{"text":"elsif ($pos + 1 <= $limit and $ValClass[$pos + 1] eq 'i') { }"}],[9114,{"text":"elsif ($ValPerl[$pos] eq 'require' and $pos + 1 <= $limit) { }"}],[9239,{"text":"if $debug >= 3"}],[9261,{"text":"if ($fromlist) { }"}],[9287,{"text":"unless $file =~ /[A-Za-z0-9_.-]/"}],[9292,{"text":"unless $file =~ /[A-Za-z0-9_.]/"}],[9285,{"text":"if ($ValClass[$pos + 1] eq '\"') { }"}],[9315,{"text":"if (index(q['\"], substr($ValPy[$i], 0, 1)) != -1) { }"}],[9308,{"text":"if ($ValClass[$i] eq 'i' and $ValPerl[$i] =~ /^v\\d/) { }"}],[9308,{"text":"elsif ($ValClass[$i] eq 'd') { }"}],[9308,{"text":"elsif ($ValClass[$i] eq '\"') { }"}],[9308,{"text":"elsif ($ValClass[$i] eq 'q') { }"}],[9322,{"text":"if $desired_version and substr($desired_version, 0, 1) eq \"v\""}],[9335,{"text":"if (-f $fullfile) { }"}],[9330,{"text":"if (file_name_is_absolute($file)) { }"}],[9345,{"text":"unless (-f $fullfile)"}],[9355,{"text":"if (index($UseRequireOptionsPassed{$fullfile}, $UseRequireOptionsDesired{$fullfile}) == -1)"}],[9354,{"text":"if (exists $UseRequireOptionsPassed{$fullfile}) { }"}],[9353,{"text":"if (exists $UseRequireOptionsDesired{$fullfile})"}],[9368,{"text":"if $debug"}],[9366,{"text":"if (-f $fp2)"}],[9362,{"text":"unless (-f $fullpy)"}],[9380,{"text":"if ($dir =~ /$d/)"}],[9385,{"text":"if $canwrite"}],[9392,{"text":"if (index($srcdir, $MODULES_DIR) == -1)"}],[9406,{"text":"if (index($file, \"/\") != -1)"}],[9416,{"text":"if $debug"}],[9415,{"text":"if (not -f $fullpy or -M $fullpy >= -M $fullfile)"}],[9386,{"text":"if ($canwrite) { }"}],[9386,{"text":"elsif ($pythonize_standard_library) { }"}],[9424,{"text":"unless ($canwrite or $pythonize_standard_library)"}],[9433,{"text":"if $debug"}],[9435,{"text":"unless $import_perllib"}],[9436,{"text":"if $pythonize_standard_library"}],[9437,{"text":"if $output_dir and $canwrite"}],[9441,{"text":"if ($interpreter =~ /perl/)"}],[9445,{"text":"if ($stat) { }"}],[9432,{"text":"if (!(-f $fullpy) || -M $fullpy >= -M $fullfile || $rerun_flags and lock_it($fullpy))"}],[9374,{"text":"if (not -f $fullpy or -M $fullpy >= -M $fullfile or $rerun_flags)"}],[9469,{"text":"if ($stat)"}],[9482,{"text":"unless (open PYTHON, \"<\", $fullpy)"}],[9529,{"text":"if $line =~ /^(?:[A-Za-z][A-Za-z0-9_]*[.])+([A-Za-z][A-Za-z0-9_]*) = ([A-Za-z][A-Za-z0-9_]*)/ and $1 eq $2"}],[9530,{"text":"if $line =~ /^\\s*#/"}],[9544,{"text":"if $esc eq $python_name"}],[9541,{"text":"if (substr($python_name, -1, 1) eq \"_\")"}],[9561,{"text":"if $debug"}],[9563,{"text":"if $debug"}],[9559,{"text":"if (exists $Packages{$package_name})"}],[9539,{"text":"if ($sig eq '') { }"}],[9534,{"text":"if ($line =~ /($pat)/)"}],[9577,{"text":"if $debug"}],[9571,{"text":"if ($debug)"}],[9659,{"text":"if $debug"}],[9668,{"text":"if ($desired_version > $version)"}],[9667,{"text":"if ($desired_version and $version)"}],[9689,{"text":"if (index($export, '.') == -1) { }"}],[9742,{"text":"if -f $fullfile"}],[9743,{"text":"if $debug"}],[9766,{"text":"if ($e =~ /^\\$package='(.*)';$/) { }"}],[9766,{"text":"elsif ($e =~ /^\\$version='(.*)';$/) { }"}],[9766,{"text":"elsif ($e =~ m[^\\@export=qw/(.*)/;$]) { }"}],[9766,{"text":"elsif ($e =~ m[^\\@export_ok=qw/(.*)/;$]) { }"}],[9766,{"text":"elsif ($e =~ /^%export_tags=\\((.*)\\);$/) { }"}],[9766,{"text":"elsif ($e =~ m[^\\@export_fail=qw/(.*)/;$]) { }"}],[9766,{"text":"elsif ($e =~ /^\\$has_export_fail_sub=(.);$/) { }"}],[9766,{"text":"elsif ($e =~ m[^\\@global_vars=qw/(.*)/;$]) { }"}],[9766,{"text":"elsif ($e =~ /^\\@overloads=qw'(.*)';$/) { }"}],[9766,{"text":"elsif ($e =~ m[^\\@wantarrays=qw/(.*)/;$]) { }"}],[9766,{"text":"elsif ($e =~ /^\\$\\@=\"(.*)\";$/) { }"}],[9758,{"text":"if ($py) { }"}],[9797,{"text":"if $debug"}],[9799,{"text":"if $@ and $debug"}],[9803,{"text":"if ($@ =~ /you may need to install the (.*?) module/)"}],[9816,{"text":"if ($ValClass[-1] eq ')' and $ValClass[-2] eq '(') { }"}],[9815,{"text":"unless (@{$desired_imports;})"}],[9825,{"text":"if ($message)"}],[9829,{"text":"if ($desired eq $desired_imports->[0])"}],[9837,{"text":"if (exists $export_tags{$tag})"}],[9846,{"text":"if ($e =~ /$pat/)"}],[9835,{"text":"if ($ch2 eq ':') { }"}],[9835,{"text":"elsif ($ch2 eq '/') { }"}],[9854,{"text":"if ($message)"}],[9859,{"text":"if (exists $export_tags{$tag}) { }"}],[9859,{"text":"elsif ($tag eq 'DEFAULT') { }"}],[9869,{"text":"if ($message)"}],[9876,{"text":"if ($e =~ /$pat/)"}],[9824,{"text":"if ($ch eq '!') { }"}],[9824,{"text":"elsif ($ch eq ':') { }"}],[9824,{"text":"elsif ($ch eq '/') { }"}],[9884,{"text":"if $gen_message"}],[9887,{"text":"if (exists $OVERLOAD_MAP{$o} and $OVERLOAD_MAP{$o}{'normal'} eq $o)"}],[9898,{"text":"if (index('@$%', $sig) != -1) { }"}],[9898,{"text":"elsif ($sig ne '&' and $sig ne '*') { }"}],[9925,{"text":"if (defined $package)"}],[9923,{"text":"if (index(\"\\@\\$%\", $sig) != -1)"}],[9931,{"text":"if $debug"}],[9932,{"text":"if $version and substr($version, 0, 1) eq \"v\""}],[9954,{"text":"if ($p_dot)"}],[9951,{"text":"if (exists $mapref->{$perl_name})"}],[9947,{"text":"if ($sig eq '&') { }"}],[9947,{"text":"elsif (index('@$%', $sig) != -1) { }"}],[9965,{"text":"if $debug >= 3"}],[9990,{"text":"if ($days_old > \"0.00347222222222222\")"}],[9988,{"text":"if (-f $lockfile)"}],[9994,{"text":"if (-f $lockfile)"}],[9998,{"text":"if $debug"}],[10013,{"text":"if (-s $lockfile)"}],[10019,{"text":"if $debug"}],[10031,{"text":"if ($TokenStr eq \"((s=f(s)+d)-d)\" or $TokenStr eq \"((s=f(s)-d)+d)\" or $TokenStr eq \"((s=s+d)-d)\" or $TokenStr eq \"((s=s-d)+d)\")"}],[10040,{"text":"if $eq != -1 and $ValPy[$eq] eq \":=\""}],[10038,{"text":"if ($ValClass[0] eq 's' and next_same_level_token(',', 0, $#ValClass) == -1) { }"}],[10029,{"text":"if ($tokens = &Perlscan::needs_implicit_continue(1))"}],[10058,{"text":"if $extra > $orig_limit"}],[10062,{"text":"if ($k < 0 or $ValClass[$k] ne '=') { }"}],[10081,{"text":"if ($equal_pos == -1)"}],[10098,{"text":"if ($close_paren != -1)"}],[10095,{"text":"if ($ValClass[1] eq \"(\")"}],[10103,{"text":"if $comma3 != -1"}],[10105,{"text":"if $comma2 != -1"}],[10106,{"text":"if $debug"}],[10107,{"text":"if ($ValClass[$start] eq 'f' and $ValPy[$start] eq $CONVERTER_MAP{'S'}) { }"}],[10113,{"text":"if $k < 0"}],[10118,{"text":"if $k < 0"}],[10121,{"text":"if ($comma3 + 1 == $end_pos and $ValClass[$end_pos] eq '\"' and $ValPerl[$end_pos] eq '') { }"}],[10128,{"text":"if ($equal_pos + 1 == $#ValClass and $ValClass[-1] eq '\"' and $ValPerl[-1] eq '') { }"}],[10120,{"text":"if ($comma3 != -1) { }"}],[10135,{"text":"if $k < 0"}],[10140,{"text":"if ($ValClass[$comma1 + 1] eq '-' and $ValClass[$comma2 - 1] eq 'd' and $comma2 - 1 - ($comma1 + 1) == 1 and $ValClass[$comma2 + 1] eq 'd' and $end_len - ($comma2 + 1) == 0 and -$ValPy[$comma2 - 1] + $ValPy[$comma2 + 1] >= 0) { }"}],[10136,{"text":"if ($comma2 != -1)"}],[10163,{"text":"if ($ValClass[$pos] eq '(' or $ValClass[$pos] eq 'f' and $ValPerl[$pos] eq 'undef' or $ValClass[$pos] eq ')' or $ValClass[$pos] eq ',') { }"}],[10179,{"text":"if $sub_e == $#ValClass"}],[10180,{"text":"if $ValClass[$sub_e + 1] ne \"(\""}],[10189,{"text":"if $type =~ /^a/"}],[10190,{"text":"if $type =~ /^h/"}],[10199,{"text":"if $pos <= 1"}],[10200,{"text":"if $ValClass[$pos - 1] ne \"(\""}],[10201,{"text":"if $ValClass[$pos - 2] ne \"f\""}],[10202,{"text":"if $ValPy[$pos - 2] =~ /_element$/"}],[10213,{"text":"if $posrhs <= 1"}],[10216,{"text":"if $eq < 0"}],[10222,{"text":"if $endrhs - $posrhs != $endlhs - $poslhs"}],[10225,{"text":"if $ValClass[$i] ne $ValClass[$j]"}],[10226,{"text":"if $ValPerl[$i] ne $ValPerl[$j]"}],[10256,{"text":"if $debug >= 3"}],[10264,{"text":"if ($autovivification)"}],[10272,{"text":"if ($autovivification)"}],[10263,{"text":"if ($ValPy[$start] eq '{') { }"}],[10258,{"text":"if (exists $nested_subs{$cs} and $nested_subs{$cs} eq $DEFAULT_MATCH and &Pythonizer::expr_type($start, $end_pos, $cs) ne 'S') { }"}],[10258,{"text":"elsif ($ValClass[$start] eq '(' and $ValClass[$end_pos] eq ')' and next_same_level_token(',', $start + 1, $end_pos - 1) != -1) { }"}],[10297,{"text":"if $balance >= 0"}],[10292,{"text":"if ($ch eq '{') { }"}],[10292,{"text":"elsif ($ch eq '}') { }"}],[10308,{"text":"if next_matching_tokens(\"cCkW\", 0, $#ValClass) != -1"}],[10310,{"text":"if $k >= 0 and $ValPy[$k] ne \":=\""}],[10312,{"text":"if $code eq \"=\""}],[10314,{"text":"if scalar @Perlscan::PythonCode == 0"}],[10315,{"text":"if exists $PYTHON_KEYWORD_SET{$Perlscan::PythonCode[0]}"}],[10327,{"text":"if (defined $temp)"}],[10334,{"text":"if ($start + 2 <= $end_pos and $ValClass[$start + 1] eq 's' and $ValClass[$start + 2] eq '=' and $ValPy[$start + 2] eq ':=') { }"}],[10334,{"text":"elsif ($start + 3 <= $end_pos and $ValClass[$start + 1] eq '(' and $ValPerl[$start + 1] eq '(' and $ValClass[$start + 2] eq 's' and $ValClass[$start + 3] eq '=' and $ValPy[$start + 3] eq ':=' and $ValClass[$end_pos - 1] eq 'd' and $ValClass[$end_pos - 2] =~ /[+-]/) { }"}],[10333,{"text":"if (matching_br($start) == $end_pos)"}],[10332,{"text":"if ($ValClass[$start] eq \"(\" and $ValPerl[$start] eq \"(\")"}],[10359,{"text":"if ($ValClass[$i] eq \"f\" or $ValClass[$i] eq \"i\" and $LocalSub{$ValPy[$i]})"}],[10372,{"text":"if $pos - 2 >= 0 and $ValClass[$pos - 2] =~ /[Cc]/ and $pos + 1 > $#ValClass || !($ValClass[$pos + 1] =~ /[.<,]/)"}],[10373,{"text":"if $pos - 1 >= 0 and $ValClass[$pos - 1] =~ /[Cc]/ and $pos + 1 > $#ValClass || !($ValClass[$pos + 1] =~ /[.<,]/)"}],[10374,{"text":"if $pos != 0 and $ValClass[$pos - 1] =~ /[0o]/ and $pos + 1 > $#ValClass || !($ValClass[$pos + 1] =~ /[.<,]/)"}],[10375,{"text":"if $pos + 1 < $#ValClass and $ValClass[$pos + 1] =~ /[0o]/ and $pos == 0 || !($ValClass[$pos - 1] =~ /[.<,]/)"}],[10376,{"text":"if $pos + 1 < $#ValClass and $ValClass[$pos + 1] eq \":\" and $pos != 0 and $ValPerl[$pos - 1] eq \"?\""}],[10388,{"text":"if ($fpos - 2 >= 0 and $ValClass[$fpos - 1] eq '>') { }"}],[10388,{"text":"elsif ($eof + 2 <= $#ValClass and $ValClass[$eof + 1] eq '>') { }"}],[10393,{"text":"if (defined $comparator and $ValClass[$comparator] eq \"\\\"\" and $ValPerl[$comparator] =~ /^(?:HASH|ARRAY|SCALAR|REGEX)$/)"}],[10404,{"text":"if $number_of_elements == 1"}],[10406,{"text":"if ($start == $limit and $ValClass[$start] eq \"q\" and $ValPy[$start] =~ /\\.split\\(\\)$/)"}],[10413,{"text":"if $ValClass[$start] ne \"(\""}],[10415,{"text":"if $match != $limit"}],[10422,{"text":"if $match < 0"}],[10418,{"text":"if ($ValClass[$i] eq ',') { }"}],[10418,{"text":"elsif ($ValClass[$i] eq '(') { }"}],[10418,{"text":"elsif ($ValClass[$i] =~ /[ah]/) { }"}]],"start":{"10253":{"convert_return_expression":[{"pod":null,"statement":6050,"time":null,"subroutine":109,"branch":2046,"condition":968}]},"3152":{"rename_state_var":[{"branch":587,"pod":null,"condition":332,"statement":1821,"time":null,"subroutine":41}]},"6823":{"open_fun":[{"pod":null,"statement":4105,"branch":1433,"condition":671,"time":null,"subroutine":64}]},"8341":{"has_comma_operator":[{"subroutine":79,"time":null,"statement":5020,"condition":821,"branch":1727,"pod":null}]},"8055":{"handle_question_mark_colon":[{"statement":4827,"condition":802,"pod":null,"branch":1688,"subroutine":73,"time":null}]},"10176":{"last_subscript":[{"time":null,"subroutine":104,"branch":2033,"pod":null,"condition":968,"statement":6014}]},"6612":{"GetOptionsHandled":[{"pod":null,"statement":3977,"time":null,"subroutine":61,"branch":1380,"condition":661}]},"9665":{"import_version_check":[{"pod":null,"statement":5749,"branch":1956,"condition":942,"time":null,"subroutine":93}]},"10325":{"regenerate_expression":[{"statement":6089,"pod":null,"condition":973,"branch":2060,"subroutine":112,"time":null}]},"7732":{"inSubscript":[{"time":null,"subroutine":68,"pod":null,"branch":1642,"condition":790,"statement":4645}]},"6551":{"getopts_fun":[{"statement":3940,"pod":null,"subroutine":60,"time":null,"condition":659,"branch":1370}]},"9973":{"_lock_file":[{"condition":948,"branch":2005,"subroutine":97,"time":null,"statement":5912,"pod":null}]},"8786":{"escape_string":[{"time":null,"subroutine":88,"branch":1813,"pod":null,"condition":895,"statement":5285}]},"3981":{"p_append":[{"time":null,"subroutine":52,"pod":null,"branch":747,"condition":415,"statement":2322}]},"3168":{"initialize_globals_for_state_vars":[{"pod":null,"statement":1830,"time":null,"subroutine":42,"branch":590,"condition":338}]},"10055":{"gen_extra":[{"pod":null,"branch":2015,"condition":953,"statement":5954,"time":null,"subroutine":101}]},"8756":{"unquote_string":[{"subroutine":87,"time":null,"condition":891,"branch":1807,"statement":5266,"pod":null}]},"8670":{"process_re_flags":[{"branch":1803,"pod":null,"statement":5237,"condition":891,"time":null,"subroutine":84}]},"4471":{"pre_assign":[{"subroutine":55,"time":null,"condition":457,"branch":872,"statement":2641,"pod":null}]},"9984":{"lock_it":[{"time":null,"subroutine":98,"branch":2005,"pod":null,"statement":5915,"condition":948}]},"8652":{"tr_count_only":[{"subroutine":83,"time":null,"statement":5230,"condition":887,"branch":1798,"pod":null}]},"3953":{"p_replace":[{"condition":415,"statement":2301,"branch":745,"pod":null,"subroutine":50,"time":null}]},"9796":{"BEGIN":[{"condition":155,"branch":294,"subroutine":21,"time":null,"statement":945,"pod":null}]},"210":{"BEGIN":[{"statement":910,"condition":155,"branch":293,"pod":null,"subroutine":10,"time":null}]},"10308":{"ok_to_insert_return":[{"branch":2055,"pod":null,"statement":6081,"condition":972,"time":null,"subroutine":111}]},"196":{"BEGIN":[{"statement":886,"condition":155,"pod":null,"branch":293,"subroutine":2,"time":null}]},"9705":{"expand_extras":[{"condition":943,"branch":1959,"subroutine":95,"time":null,"statement":5765,"pod":null}]},"9682":{"filter_exports":[{"condition":943,"branch":1958,"subroutine":94,"time":null,"statement":5753,"pod":null}]},"3820":{"gen_eval":[{"subroutine":46,"time":null,"statement":2202,"condition":408,"pod":null,"branch":725}]},"1950":{"BEGIN":[{"time":null,"subroutine":17,"pod":null,"branch":294,"statement":933,"condition":155}]},"218":{"BEGIN":[{"branch":294,"pod":null,"condition":155,"statement":915,"time":null,"subroutine":11}]},"7029":{"open_dir":[{"time":null,"subroutine":65,"branch":1479,"pod":null,"condition":680,"statement":4232}]},"10356":{"capture_expression_value_if_needed":[{"statement":6104,"pod":null,"condition":984,"branch":2065,"subroutine":113,"time":null}]},"2104":{"BEGIN":[{"time":null,"subroutine":19,"pod":null,"branch":294,"condition":155,"statement":939}]},"209":{"BEGIN":[{"pod":null,"branch":293,"condition":155,"statement":907,"time":null,"subroutine":9}]},"10187":{"expr_type_to_token_type":[{"branch":2035,"condition":968,"time":null,"subroutine":105,"pod":null,"statement":6019}]},"10287":{"remove_unbalanced_curly_brackets":[{"time":null,"subroutine":110,"pod":null,"branch":2052,"statement":6069,"condition":972}]},"9277":{"import_it":[{"subroutine":92,"time":null,"statement":5567,"condition":932,"pod":null,"branch":1907}]},"7158":{"expression":[{"pod":null,"statement":4282,"time":null,"subroutine":66,"branch":1497,"condition":682}]},"8533":{"handle_eval_in_expression":[{"time":null,"subroutine":81,"branch":1775,"pod":null,"statement":5157,"condition":873}]},"8742":{"is_expression_simple":[{"condition":891,"statement":5260,"branch":1805,"pod":null,"subroutine":86,"time":null}]},"2037":{"get_converter":[{"time":null,"subroutine":31,"branch":359,"pod":null,"condition":192,"statement":1148}]},"10028":{"gen_implicit_continue":[{"time":null,"subroutine":100,"pod":null,"branch":2011,"condition":948,"statement":5939}]},"1717":{"handle_dynamic_state_variable_init":[{"subroutine":24,"time":null,"condition":155,"branch":294,"statement":948,"pod":null}]},"-1":{"__COVER__":[{"pod":null,"statement":6146,"time":null,"subroutine":117,"branch":2082,"condition":1007}]},"2488":{"remove_dereferences":[{"statement":1437,"condition":248,"branch":465,"pod":null,"subroutine":34,"time":null}]},"222":{"BEGIN":[{"statement":918,"pod":null,"condition":155,"branch":294,"subroutine":12,"time":null}]},"8625":{"tr_flags_to_args":[{"pod":null,"branch":1794,"statement":5214,"condition":887,"time":null,"subroutine":82}]},"1735":{"fixup_complex_assignment_in_control":[{"branch":294,"pod":null,"statement":957,"condition":155,"time":null,"subroutine":25}]},"3130":{"copy_partially_initialized_locals":[{"statement":1811,"pod":null,"subroutine":39,"time":null,"condition":331,"branch":585}]},"1962":{"expand_augmented_assignment":[{"branch":348,"condition":190,"time":null,"subroutine":30,"pod":null,"statement":1094}]},"197":{"BEGIN":[{"pod":null,"statement":889,"branch":293,"condition":155,"time":null,"subroutine":3}]},"241":{"BEGIN":[{"statement":924,"condition":155,"branch":294,"pod":null,"subroutine":14,"time":null}]},"4433":{"list_or_scalar_context":[{"branch":862,"pod":null,"condition":450,"statement":2623,"time":null,"subroutine":54}]},"194":{"BEGIN":[{"time":null,"subroutine":null,"branch":293,"condition":155,"pod":null,"statement":881}]},"7783":{"handle_incr_decr":[{"condition":790,"statement":4677,"pod":null,"branch":1653,"subroutine":71,"time":null}]},"200":{"BEGIN":[{"subroutine":6,"time":null,"condition":155,"statement":898,"branch":293,"pod":null}]},"1816":{"end_of_variable":[{"pod":null,"branch":308,"statement":1008,"condition":162,"time":null,"subroutine":27}]},"7757":{"handle_double_or_and_assignment":[{"subroutine":70,"time":null,"condition":790,"statement":4660,"pod":null,"branch":1649}]},"4568":{"control":[{"pod":null,"branch":890,"statement":2686,"condition":463,"time":null,"subroutine":56}]},"8265":{"split_up_multiple_assignment":[{"branch":1712,"condition":809,"time":null,"subroutine":77,"pod":null,"statement":4973}]},"10197":{"in_x_element_call":[{"time":null,"subroutine":106,"branch":2037,"pod":null,"statement":6023,"condition":968}]},"7720":{"inDotOp":[{"time":null,"subroutine":67,"branch":1638,"condition":790,"pod":null,"statement":4639}]},"1849":{"operator_type":[{"time":null,"subroutine":28,"pod":null,"branch":316,"condition":171,"statement":1026}]},"10008":{"unlock_it":[{"statement":5928,"condition":948,"pod":null,"branch":2009,"subroutine":99,"time":null}]},"199":{"BEGIN":[{"condition":155,"statement":895,"branch":293,"pod":null,"subroutine":5,"time":null}]},"201":{"BEGIN":[{"statement":901,"condition":155,"branch":293,"pod":null,"subroutine":7,"time":null}]},"6530":{"need_splat":[{"subroutine":59,"time":null,"statement":3931,"condition":654,"pod":null,"branch":1364}]},"6637":{"GetOptions_split":[{"time":null,"subroutine":62,"pod":null,"branch":1388,"statement":3991,"condition":664}]},"10078":{"left_hand_substr":[{"time":null,"subroutine":102,"pod":null,"branch":2017,"condition":954,"statement":5962}]},"202":{"BEGIN":[{"subroutine":8,"time":null,"condition":155,"statement":904,"pod":null,"branch":293}]},"1793":{"replace_incr_decr_stmt":[{"time":null,"subroutine":26,"branch":302,"pod":null,"condition":161,"statement":997}]},"10402":{"rhs_has_same_number_of_elements":[{"pod":null,"branch":2074,"condition":1005,"statement":6126,"time":null,"subroutine":116}]},"8013":{"handle_cmp_spaceship":[{"subroutine":72,"time":null,"statement":4801,"condition":802,"pod":null,"branch":1683}]},"198":{"BEGIN":[{"subroutine":4,"time":null,"condition":155,"branch":293,"statement":892,"pod":null}]},"10210":{"same_as_lhs":[{"statement":6030,"condition":968,"branch":2041,"pod":null,"subroutine":107,"time":null}]},"3198":{"print3":[{"pod":null,"branch":595,"statement":1847,"condition":339,"time":null,"subroutine":43}]},"3963":{"p_insert":[{"branch":745,"condition":415,"time":null,"subroutine":51,"pod":null,"statement":2306}]},"10234":{"parse_export_tags":[{"branch":2046,"pod":null,"condition":968,"statement":6043,"time":null,"subroutine":108}]},"1885":{"insert_converter":[{"statement":1047,"condition":182,"branch":331,"pod":null,"subroutine":29,"time":null}]},"204":{"__ANON__":[{"branch":294,"condition":155,"time":null,"subroutine":23,"pod":null,"statement":948}]},"2640":{"fix_undef":[{"condition":263,"statement":1516,"branch":493,"pod":null,"subroutine":36,"time":null}]},"195":{"BEGIN":[{"subroutine":1,"time":null,"statement":883,"condition":155,"pod":null,"branch":293}]},"3915":{"package_tokens":[{"time":null,"subroutine":47,"branch":742,"pod":null,"condition":415,"statement":2270}]},"10384":{"expression_uses_builtin_types":[{"condition":1001,"statement":6117,"branch":2071,"pod":null,"subroutine":115,"time":null}]},"8131":{"fixup_read_in_expression":[{"subroutine":76,"time":null,"statement":4866,"condition":806,"branch":1695,"pod":null}]},"2086":{"fix_type_issues":[{"subroutine":32,"time":null,"condition":196,"statement":1173,"branch":373,"pod":null}]},"6659":{"GetOptions_fun":[{"statement":4004,"pod":null,"subroutine":63,"time":null,"condition":664,"branch":1393}]},"3142":{"rsv":[{"time":null,"subroutine":40,"pod":null,"branch":586,"condition":332,"statement":1816}]},"8693":{"handle_anonymous_sub_in_expression":[{"pod":null,"branch":1805,"statement":5249,"condition":891,"time":null,"subroutine":85}]},"8113":{"start_of_var":[{"subroutine":75,"time":null,"condition":802,"statement":4857,"branch":1693,"pod":null}]},"6523":{"function":[{"subroutine":58,"time":null,"condition":654,"statement":3928,"branch":1363,"pod":null}]},"2915":{"finish":[{"pod":null,"statement":1671,"branch":534,"condition":300,"time":null,"subroutine":38}]},"8820":{"do_use_require":[{"pod":null,"statement":5294,"time":null,"subroutine":89,"branch":1814,"condition":896}]},"203":{"__ANON__":[{"time":null,"subroutine":22,"pod":null,"branch":294,"condition":155,"statement":948}]},"9249":{"gen_variable_import_pre":[{"time":null,"subroutine":90,"branch":1906,"pod":null,"condition":932,"statement":5561}]},"2411":{"fix_multi_subscripts":[{"subroutine":33,"time":null,"condition":242,"statement":1388,"branch":445,"pod":null}]},"3941":{"p_destroy":[{"time":null,"subroutine":49,"branch":744,"pod":null,"statement":2290,"condition":415}]},"9942":{"import_perl_to_python":[{"statement":5892,"pod":null,"subroutine":96,"time":null,"condition":948,"branch":2000}]},"10370":{"in_boolean_context":[{"statement":6110,"pod":null,"subroutine":114,"time":null,"condition":986,"branch":2066}]},"1913":{"BEGIN":[{"subroutine":15,"time":null,"condition":155,"statement":927,"branch":294,"pod":null}]},"3927":{"unpackage_tokens":[{"statement":2277,"condition":415,"branch":743,"pod":null,"subroutine":48,"time":null}]},"9574":{"BEGIN":[{"condition":155,"branch":294,"subroutine":20,"time":null,"statement":942,"pod":null}]},"9256":{"gen_variable_import_post":[{"condition":932,"statement":5563,"pod":null,"branch":1906,"subroutine":91,"time":null}]},"2661":{"fix_expression_issues":[{"subroutine":37,"time":null,"condition":263,"branch":501,"statement":1529,"pod":null}]},"10160":{"init_has_real_values":[{"time":null,"subroutine":103,"pod":null,"branch":2032,"condition":964,"statement":6009}]},"1923":{"BEGIN":[{"statement":930,"condition":155,"pod":null,"branch":294,"subroutine":16,"time":null}]},"4956":{"_function":[{"condition":508,"statement":2935,"pod":null,"branch":980,"subroutine":57,"time":null}]},"7745":{"inParens":[{"pod":null,"branch":1646,"statement":4653,"condition":790,"time":null,"subroutine":69}]},"239":{"BEGIN":[{"pod":null,"branch":294,"statement":921,"condition":155,"time":null,"subroutine":13}]},"8324":{"add_parens":[{"subroutine":78,"time":null,"condition":817,"statement":5011,"branch":1726,"pod":null}]},"2560":{"fix_global_and_eval_regex":[{"branch":480,"pod":null,"condition":262,"statement":1467,"time":null,"subroutine":35}]},"8369":{"handle_assignment_in_expression":[{"time":null,"subroutine":80,"branch":1733,"condition":828,"pod":null,"statement":5037}]},"2091":{"BEGIN":[{"statement":936,"pod":null,"condition":155,"branch":294,"subroutine":18,"time":null}]},"3317":{"assignment":[{"branch":619,"pod":null,"condition":359,"statement":1911,"time":null,"subroutine":44}]},"3994":{"regex_and_translate":[{"subroutine":53,"time":null,"condition":415,"statement":2331,"pod":null,"branch":747}]},"3801":{"handle_assign_eval":[{"statement":2191,"pod":null,"subroutine":45,"time":null,"condition":408,"branch":722}]},"8102":{"handle_negative_bareword":[{"statement":4852,"pod":null,"condition":802,"branch":1693,"subroutine":74,"time":null}]}},"subroutine":[[194,"BEGIN"],[195,"BEGIN"],[196,"BEGIN"],[197,"BEGIN"],[198,"BEGIN"],[199,"BEGIN"],[200,"BEGIN"],[201,"BEGIN"],[202,"BEGIN"],[209,"BEGIN"],[210,"BEGIN"],[218,"BEGIN"],[222,"BEGIN"],[239,"BEGIN"],[241,"BEGIN"],[1913,"BEGIN"],[1923,"BEGIN"],[1950,"BEGIN"],[2091,"BEGIN"],[2104,"BEGIN"],[9574,"BEGIN"],[9796,"BEGIN"],[203,"__ANON__"],[204,"__ANON__"],[1717,"handle_dynamic_state_variable_init"],[1735,"fixup_complex_assignment_in_control"],[1793,"replace_incr_decr_stmt"],[1816,"end_of_variable"],[1849,"operator_type"],[1885,"insert_converter"],[1962,"expand_augmented_assignment"],[2037,"get_converter"],[2086,"fix_type_issues"],[2411,"fix_multi_subscripts"],[2488,"remove_dereferences"],[2560,"fix_global_and_eval_regex"],[2640,"fix_undef"],[2661,"fix_expression_issues"],[2915,"finish"],[3130,"copy_partially_initialized_locals"],[3142,"rsv"],[3152,"rename_state_var"],[3168,"initialize_globals_for_state_vars"],[3198,"print3"],[3317,"assignment"],[3801,"handle_assign_eval"],[3820,"gen_eval"],[3915,"package_tokens"],[3927,"unpackage_tokens"],[3941,"p_destroy"],[3953,"p_replace"],[3963,"p_insert"],[3981,"p_append"],[3994,"regex_and_translate"],[4433,"list_or_scalar_context"],[4471,"pre_assign"],[4568,"control"],[4956,"_function"],[6523,"function"],[6530,"need_splat"],[6551,"getopts_fun"],[6612,"GetOptionsHandled"],[6637,"GetOptions_split"],[6659,"GetOptions_fun"],[6823,"open_fun"],[7029,"open_dir"],[7158,"expression"],[7720,"inDotOp"],[7732,"inSubscript"],[7745,"inParens"],[7757,"handle_double_or_and_assignment"],[7783,"handle_incr_decr"],[8013,"handle_cmp_spaceship"],[8055,"handle_question_mark_colon"],[8102,"handle_negative_bareword"],[8113,"start_of_var"],[8131,"fixup_read_in_expression"],[8265,"split_up_multiple_assignment"],[8324,"add_parens"],[8341,"has_comma_operator"],[8369,"handle_assignment_in_expression"],[8533,"handle_eval_in_expression"],[8625,"tr_flags_to_args"],[8652,"tr_count_only"],[8670,"process_re_flags"],[8693,"handle_anonymous_sub_in_expression"],[8742,"is_expression_simple"],[8756,"unquote_string"],[8786,"escape_string"],[8820,"do_use_require"],[9249,"gen_variable_import_pre"],[9256,"gen_variable_import_post"],[9277,"import_it"],[9665,"import_version_check"],[9682,"filter_exports"],[9705,"expand_extras"],[9942,"import_perl_to_python"],[9973,"_lock_file"],[9984,"lock_it"],[10008,"unlock_it"],[10028,"gen_implicit_continue"],[10055,"gen_extra"],[10078,"left_hand_substr"],[10160,"init_has_real_values"],[10176,"last_subscript"],[10187,"expr_type_to_token_type"],[10197,"in_x_element_call"],[10210,"same_as_lhs"],[10234,"parse_export_tags"],[10253,"convert_return_expression"],[10287,"remove_unbalanced_curly_brackets"],[10308,"ok_to_insert_return"],[10325,"regenerate_expression"],[10356,"capture_expression_value_if_needed"],[10370,"in_boolean_context"],[10384,"expression_uses_builtin_types"],[10402,"rhs_has_same_number_of_elements"]],"statement":[203,203,204,204,206,243,244,248,249,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,273,279,280,281,282,284,285,286,287,288,289,292,295,296,298,299,305,307,308,309,310,311,312,314,315,316,317,318,319,321,322,328,330,331,334,336,337,338,339,340,341,342,344,345,346,347,348,349,350,353,354,355,358,359,361,362,365,367,368,373,374,376,378,382,383,384,385,387,389,391,394,395,397,399,401,405,406,407,409,410,411,414,422,423,424,425,428,429,430,431,432,433,434,436,437,440,441,442,444,447,448,451,452,455,456,457,458,459,461,462,474,475,476,478,479,480,481,482,483,484,485,486,487,488,490,491,500,501,501,507,508,509,510,511,513,514,516,517,519,520,521,523,524,525,526,528,547,549,550,553,554,555,558,559,560,560,560,561,561,561,562,562,562,563,563,563,564,564,564,565,566,570,571,572,573,574,575,576,578,579,580,582,585,586,587,588,589,591,592,593,594,595,596,597,599,600,601,602,603,604,608,609,610,611,617,618,620,623,624,625,626,627,629,631,632,633,634,635,636,637,638,639,641,647,648,649,650,652,653,654,655,656,657,661,665,670,671,673,675,677,677,678,679,682,683,684,685,687,688,689,690,693,695,696,697,699,700,702,703,705,708,709,710,712,713,714,715,716,717,718,719,721,722,723,724,725,726,728,730,731,733,734,735,736,737,738,741,742,745,746,748,749,750,751,752,753,755,760,762,765,766,767,768,770,772,773,779,781,785,788,789,790,791,792,794,795,796,797,799,800,801,802,804,805,808,810,811,813,815,816,818,819,822,823,826,827,829,831,832,834,835,836,837,838,839,840,841,842,843,846,848,849,850,852,854,855,856,857,860,861,863,865,866,869,870,871,872,875,876,877,878,879,881,882,883,884,885,886,888,891,892,894,895,898,899,900,901,905,907,909,911,912,914,915,916,918,921,922,924,925,926,927,929,932,934,937,939,940,941,943,944,946,947,948,950,951,952,953,954,955,956,958,960,963,964,967,968,969,970,973,975,978,980,983,986,987,990,992,993,994,1000,1002,1004,1005,1006,1007,1010,1011,1014,1015,1016,1017,1019,1021,1024,1025,1026,1027,1028,1030,1031,1032,1034,1036,1037,1038,1039,1041,1042,1043,1045,1048,1050,1051,1052,1053,1054,1056,1057,1058,1059,1061,1063,1064,1069,1070,1071,1072,1077,1079,1080,1081,1083,1085,1086,1087,1093,1094,1098,1102,1103,1105,1106,1107,1109,1115,1116,1117,1118,1119,1120,1121,1122,1123,1125,1127,1128,1130,1133,1134,1135,1137,1138,1139,1141,1142,1143,1145,1146,1147,1148,1149,1151,1155,1156,1158,1159,1160,1161,1163,1164,1165,1166,1168,1169,1172,1173,1174,1176,1177,1181,1182,1183,1185,1187,1188,1190,1191,1192,1194,1196,1197,1200,1201,1203,1205,1206,1207,1209,1210,1211,1215,1216,1217,1218,1219,1220,1222,1223,1224,1226,1227,1229,1230,1231,1234,1235,1236,1237,1240,1243,1245,1247,1249,1250,1253,1254,1255,1257,1259,1260,1263,1264,1265,1267,1269,1270,1271,1272,1276,1277,1278,1279,1280,1281,1282,1284,1285,1286,1287,1289,1291,1293,1294,1295,1296,1297,1298,1299,1301,1302,1303,1307,1308,1309,1311,1313,1314,1316,1317,1319,1320,1321,1323,1324,1325,1328,1330,1331,1332,1333,1336,1338,1340,1342,1343,1345,1349,1350,1351,1352,1354,1355,1356,1358,1361,1362,1365,1367,1370,1371,1372,1373,1374,1380,1384,1385,1386,1387,1387,1389,1390,1391,1393,1395,1399,1400,1402,1404,1408,1409,1410,1411,1413,1414,1415,1416,1417,1418,1419,1421,1423,1424,1426,1427,1429,1430,1432,1433,1438,1439,1441,1442,1444,1454,1455,1457,1460,1462,1464,1465,1468,1473,1474,1475,1476,1492,1498,1502,1503,1504,1505,1506,1513,1514,1515,1516,1517,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1532,1533,1534,1536,1537,1538,1539,1540,1542,1545,1546,1547,1548,1549,1551,1553,1554,1555,1557,1558,1560,1561,1563,1564,1565,1567,1568,1569,1571,1573,1574,1577,1579,1581,1582,1584,1587,1588,1589,1590,1592,1594,1595,1600,1601,1605,1606,1611,1612,1613,1615,1616,1617,1618,1620,1621,1622,1626,1627,1628,1629,1630,1637,1640,1641,1643,1644,1647,1648,1649,1652,1653,1657,1658,1659,1661,1663,1664,1666,1667,1670,1673,1675,1676,1677,1678,1679,1680,1681,1684,1685,1686,1690,1691,1692,1693,1694,1695,1696,1698,1704,1705,1706,1708,1709,1710,1711,194,194,195,195,195,196,196,196,197,197,197,198,198,198,199,199,199,200,200,200,201,201,201,202,202,202,209,209,209,210,211,212,213,215,218,218,218,222,222,222,239,239,224,241,241,241,1913,1913,1913,1923,1923,1923,1950,1950,1950,2091,2091,2091,2104,2104,2104,9574,9574,9574,9796,9796,9796,1717,1718,1719,1720,1721,1722,1723,1724,1725,1735,1736,1737,1739,1740,1741,1743,1746,1747,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1772,1773,1774,1775,1778,1780,1781,1782,1785,1793,1794,1795,1796,1797,1799,1800,1802,1805,1806,1807,1816,1818,1820,1821,1822,1824,1825,1826,1829,1830,1831,1832,1833,1835,1837,1839,1841,1843,1849,1850,1852,1853,1854,1855,1856,1858,1860,1862,1863,1865,1867,1868,1869,1870,1871,1873,1875,1877,1879,1885,1886,1887,1888,1889,1891,1892,1894,1895,1898,1899,1903,1904,1905,1906,1907,1909,1910,1911,1912,1914,1917,1918,1920,1921,1922,1924,1925,1926,1927,1928,1930,1933,1934,1936,1937,1938,1939,1940,1943,1944,1945,1947,1948,1949,1951,1953,1962,1963,1965,1968,1969,1970,1971,1972,1973,1974,1975,1977,1978,1979,1980,1983,1984,1985,1986,1987,1994,1995,1996,1997,1998,2000,2001,2002,2003,2004,2005,2006,2007,2008,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2030,2031,2037,2038,2039,2041,2042,2043,2044,2045,2046,2048,2049,2050,2051,2052,2054,2055,2056,2059,2060,2063,2064,2065,2067,2068,2072,2086,2087,2088,2090,2092,2094,2095,2097,2098,2099,2100,2101,2102,2103,2105,2106,2108,2109,2110,2112,2114,2115,2116,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2137,2138,2139,2140,2141,2142,2144,2145,2147,2149,2151,2152,2153,2154,2156,2158,2160,2161,2162,2163,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2180,2181,2182,2183,2184,2191,2192,2194,2195,2197,2199,2201,2202,2203,2204,2205,2207,2208,2209,2211,2213,2214,2218,2219,2220,2221,2222,2223,2224,2225,2227,2228,2229,2230,2231,2232,2234,2236,2237,2238,2239,2241,2242,2243,2244,2245,2246,2247,2249,2250,2252,2253,2254,2255,2256,2257,2258,2259,2260,2262,2264,2265,2269,2271,2272,2273,2274,2275,2276,2277,2278,2280,2282,2283,2285,2286,2287,2288,2290,2291,2292,2293,2294,2295,2300,2322,2323,2324,2325,2326,2327,2328,2329,2333,2334,2335,2336,2337,2339,2341,2342,2343,2344,2345,2346,2348,2357,2358,2359,2360,2361,2362,2363,2364,2366,2367,2369,2370,2371,2372,2373,2374,2375,2376,2380,2381,2382,2383,2384,2385,2386,2387,2389,2391,2392,2393,2394,2397,2398,2399,2400,2402,2411,2413,2414,2416,2417,2418,2419,2420,2421,2423,2424,2426,2428,2429,2430,2431,2432,2433,2434,2435,2436,2438,2440,2441,2444,2445,2446,2447,2448,2449,2450,2451,2452,2456,2457,2458,2459,2460,2461,2462,2463,2464,2466,2467,2468,2470,2471,2472,2473,2488,2490,2491,2492,2493,2494,2495,2496,2497,2498,2499,2502,2503,2504,2505,2511,2512,2513,2514,2515,2516,2520,2521,2522,2523,2524,2525,2526,2527,2528,2560,2561,2562,2563,2564,2565,2566,2568,2569,2574,2576,2578,2580,2581,2582,2583,2585,2586,2588,2589,2590,2591,2592,2593,2594,2595,2596,2598,2599,2600,2601,2602,2603,2605,2606,2607,2608,2610,2615,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2640,2641,2642,2643,2644,2645,2646,2647,2651,2652,2653,2654,2656,2661,2662,2663,2664,2667,2668,2669,2670,2671,2674,2675,2676,2677,2678,2679,2681,2685,2686,2687,2688,2689,2690,2692,2696,2697,2698,2699,2700,2706,2707,2708,2710,2711,2712,2714,2719,2720,2726,2727,2728,2729,2730,2731,2734,2735,2737,2740,2746,2747,2748,2749,2750,2751,2753,2755,2756,2757,2761,2762,2763,2764,2765,2766,2770,2771,2772,2773,2774,2775,2777,2781,2782,2783,2784,2785,2786,2790,2791,2792,2793,2794,2795,2797,2798,2802,2803,2805,2806,2807,2808,2809,2810,2811,2814,2815,2819,2820,2821,2824,2825,2826,2828,2829,2833,2834,2835,2836,2837,2838,2841,2842,2843,2846,2847,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2863,2864,2865,2866,2867,2869,2870,2871,2872,2873,2875,2876,2877,2881,2882,2889,2890,2915,2917,2918,2919,2920,2923,2924,2925,2935,2936,2938,2939,2940,2941,2944,2945,2946,2947,2948,2951,2952,2953,2954,2958,2959,2960,2961,2962,2963,2964,2965,2967,2968,2968,2969,2971,2972,2974,2976,2977,2981,2982,2983,2984,2985,2986,2987,2990,2991,2992,2993,2994,2995,2997,2998,2999,3000,3002,3004,3006,3007,3008,3009,3010,3012,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024,3028,3029,3030,3032,3033,3037,3038,3039,3041,3042,3045,3046,3048,3049,3050,3052,3053,3056,3057,3059,3060,3063,3064,3066,3067,3068,3070,3071,3072,3073,3074,3075,3077,3078,3079,3080,3081,3083,3085,3087,3088,3090,3092,3093,3094,3095,3097,3098,3100,3102,3103,3104,3105,3108,3110,3112,3114,3115,3116,3118,3119,3121,3122,3123,3130,3131,3132,3133,3134,3142,3143,3144,3145,3147,3152,3153,3154,3155,3156,3157,3159,3162,3162,3168,3170,3171,3173,3174,3175,3176,3177,3178,3180,3181,3182,3183,3184,3185,3188,3190,3198,3199,3200,3202,3203,3204,3206,3207,3208,3209,3210,3211,3213,3214,3216,3217,3220,3221,3224,3225,3226,3229,3230,3232,3233,3234,3235,3238,3246,3247,3249,3251,3252,3253,3254,3255,3256,3257,3258,3260,3263,3264,3265,3266,3269,3271,3273,3275,3276,3277,3278,3280,3282,3285,3287,3289,3290,3292,3294,3297,3299,3301,3305,3309,3317,3318,3319,3321,3322,3323,3325,3329,3330,3331,3337,3338,3339,3340,3341,3342,3344,3347,3349,3351,3352,3353,3354,3355,3362,3363,3364,3365,3366,3368,3369,3370,3371,3373,3375,3377,3379,3380,3381,3382,3385,3386,3387,3388,3389,3391,3392,3393,3394,3395,3396,3398,3401,3403,3404,3405,3406,3407,3408,3409,3410,3412,3413,3414,3415,3418,3419,3420,3424,3425,3427,3428,3446,3447,3448,3449,3450,3451,3452,3453,3454,3455,3456,3464,3465,3466,3467,3468,3470,3471,3472,3474,3475,3476,3484,3485,3486,3487,3489,3491,3492,3493,3495,3497,3498,3499,3502,3503,3504,3506,3508,3509,3510,3511,3513,3515,3517,3519,3520,3523,3524,3525,3526,3527,3528,3529,3530,3533,3536,3537,3538,3539,3541,3542,3547,3548,3549,3550,3552,3553,3554,3555,3558,3559,3562,3564,3565,3567,3568,3569,3572,3574,3575,3577,3578,3579,3580,3581,3583,3584,3601,3604,3605,3606,3607,3609,3612,3614,3617,3618,3619,3621,3622,3623,3624,3625,3626,3628,3629,3631,3632,3633,3634,3636,3638,3640,3642,3645,3646,3651,3652,3653,3654,3655,3657,3660,3661,3662,3664,3667,3668,3669,3670,3672,3676,3679,3680,3681,3682,3683,3685,3690,3692,3693,3694,3697,3698,3700,3701,3702,3703,3704,3705,3706,3708,3709,3712,3713,3715,3716,3717,3718,3720,3721,3722,3723,3724,3725,3726,3727,3729,3732,3734,3735,3736,3737,3738,3741,3742,3743,3744,3745,3746,3749,3750,3751,3752,3754,3755,3756,3757,3761,3762,3764,3765,3766,3772,3773,3775,3777,3778,3779,3780,3782,3783,3784,3785,3786,3788,3791,3801,3803,3804,3805,3806,3807,3808,3809,3811,3812,3814,3820,3821,3823,3824,3825,3826,3827,3829,3830,3832,3833,3834,3836,3837,3838,3840,3841,3842,3843,3845,3846,3847,3849,3850,3851,3852,3854,3855,3856,3857,3858,3860,3862,3863,3864,3865,3866,3867,3869,3871,3873,3875,3876,3877,3879,3880,3881,3882,3883,3884,3885,3886,3888,3890,3891,3894,3895,3896,3897,3898,3899,3900,3901,3902,3904,3906,3907,3909,3915,3916,3917,3918,3919,3920,3921,3927,3929,3929,3930,3930,3931,3931,3932,3932,3933,3933,3934,3935,3941,3943,3943,3944,3944,3945,3945,3946,3946,3947,3947,3953,3955,3956,3957,3958,3963,3965,3965,3966,3967,3969,3969,3970,3970,3971,3971,3972,3972,3973,3973,3975,3981,3983,3983,3984,3984,3985,3985,3986,3986,3994,3998,4006,4007,4008,4010,4011,4012,4013,4014,4016,4018,4019,4021,4023,4024,4026,4027,4029,4030,4033,4035,4036,4037,4038,4039,4041,4042,4043,4044,4047,4048,4050,4051,4052,4053,4055,4056,4057,4059,4061,4063,4065,4066,4067,4068,4069,4071,4073,4074,4075,4076,4077,4078,4079,4080,4081,4083,4084,4085,4086,4088,4089,4090,4091,4094,4095,4096,4098,4099,4100,4101,4102,4104,4105,4111,4112,4113,4114,4115,4116,4117,4119,4120,4121,4123,4124,4128,4129,4130,4132,4133,4134,4135,4136,4137,4139,4140,4142,4143,4145,4147,4149,4150,4152,4153,4154,4156,4157,4158,4160,4162,4165,4169,4170,4172,4173,4174,4175,4176,4178,4179,4180,4181,4182,4183,4184,4186,4187,4190,4191,4192,4193,4195,4196,4197,4198,4200,4201,4202,4203,4205,4207,4210,4211,4213,4215,4219,4220,4221,4222,4224,4225,4226,4228,4231,4232,4235,4239,4240,4241,4242,4244,4245,4246,4247,4248,4250,4251,4252,4253,4256,4257,4259,4260,4261,4263,4265,4267,4268,4270,4271,4272,4273,4276,4277,4278,4279,4280,4281,4282,4283,4284,4285,4286,4288,4289,4290,4291,4293,4294,4295,4296,4299,4300,4301,4302,4303,4304,4310,4311,4312,4313,4314,4315,4316,4317,4319,4320,4321,4323,4324,4326,4327,4330,4331,4333,4334,4335,4336,4337,4338,4340,4341,4342,4343,4344,4345,4347,4348,4350,4351,4353,4355,4357,4359,4360,4361,4363,4366,4367,4368,4369,4371,4372,4373,4375,4376,4380,4382,4384,4388,4389,4390,4391,4392,4393,4394,4395,4397,4398,4399,4400,4401,4402,4403,4404,4405,4406,4407,4408,4409,4410,4411,4413,4414,4415,4416,4417,4418,4420,4425,4433,4434,4436,4437,4438,4439,4441,4444,4446,4450,4451,4453,4454,4457,4458,4459,4460,4461,4471,4472,4473,4474,4475,4477,4478,4479,4480,4487,4491,4492,4497,4498,4500,4503,4505,4506,4507,4509,4510,4517,4518,4519,4520,4521,4524,4526,4527,4534,4535,4536,4538,4539,4540,4541,4542,4543,4546,4549,4550,4551,4553,4554,4556,4568,4569,4570,4572,4573,4575,4576,4577,4582,4583,4585,4586,4587,4588,4589,4590,4591,4592,4593,4596,4599,4602,4605,4606,4608,4609,4610,4611,4612,4613,4615,4616,4617,4618,4620,4621,4622,4623,4624,4625,4626,4627,4628,4630,4631,4631,4632,4633,4634,4634,4635,4636,4639,4640,4641,4642,4643,4644,4645,4649,4650,4653,4658,4660,4661,4662,4663,4665,4666,4667,4669,4672,4673,4674,4675,4677,4679,4683,4684,4685,4687,4689,4691,4693,4695,4697,4699,4702,4705,4707,4708,4710,4711,4712,4713,4714,4715,4716,4717,4719,4720,4721,4722,4724,4725,4727,4728,4730,4735,4736,4737,4740,4741,4742,4743,4744,4746,4749,4750,4751,4752,4753,4754,4755,4756,4758,4760,4761,4763,4764,4765,4767,4769,4770,4771,4772,4773,4774,4776,4780,4781,4782,4783,4784,4787,4788,4789,4791,4794,4795,4796,4797,4797,4797,4798,4801,4806,4807,4807,4810,4814,4815,4815,4815,4816,4817,4818,4820,4822,4824,4825,4825,4825,4833,4834,4836,4837,4840,4841,4843,4845,4847,4848,4849,4851,4852,4854,4855,4856,4858,4859,4861,4862,4865,4866,4868,4872,4875,4876,4877,4881,4882,4883,4885,4887,4889,4890,4890,4893,4895,4898,4899,4900,4902,4905,4906,4907,4908,4909,4910,4911,4912,4913,4914,4915,4917,4918,4919,4920,4921,4922,4923,4926,4927,4929,4930,4932,4935,4936,4938,4939,4940,4941,4943,4944,4945,4946,4948,4948,4956,4957,4959,4960,4961,4962,4964,4965,4967,4968,4969,4973,4974,4976,4977,4978,4979,4981,4982,4984,4985,4986,4987,4987,4993,4994,4995,4997,4999,5012,5015,5016,5017,5020,5021,5022,5023,5024,5028,5029,5031,5032,5033,5033,5035,5036,5037,5038,5039,5042,5043,5044,5045,5046,5047,5048,5050,5051,5052,5056,5064,5067,5068,5069,5070,5072,5073,5074,5074,5075,5075,5077,5079,5080,5082,5083,5085,5087,5087,5089,5093,5094,5095,5095,5097,5101,5102,5103,5103,5105,5106,5106,5108,5109,5110,5111,5112,5116,5118,5119,5121,5122,5123,5123,5125,5126,5131,5132,5133,5137,5138,5140,5141,5142,5143,5144,5146,5147,5151,5152,5154,5155,5157,5158,5161,5163,5165,5168,5169,5170,5173,5174,5175,5176,5177,5179,5180,5181,5182,5183,5184,5189,5190,5191,5197,5199,5201,5203,5205,5206,5208,5210,5212,5214,5215,5217,5218,5220,5221,5222,5223,5227,5228,5229,5234,5236,5239,5245,5247,5249,5250,5252,5253,5254,5255,5257,5258,5259,5261,5262,5263,5264,5266,5267,5270,5271,5273,5274,5277,5278,5281,5282,5283,5284,5296,5297,5298,5299,5300,5303,5307,5308,5310,5311,5315,5316,5318,5321,5323,5324,5325,5327,5328,5329,5331,5332,5333,5334,5335,5336,5338,5340,5343,5344,5345,5346,5348,5352,5355,5357,5358,5359,5360,5361,5364,5365,5366,5367,5368,5370,5373,5377,5378,5379,5380,5382,5383,5384,5386,5389,5390,5391,5392,5394,5395,5396,5397,5399,5400,5401,5403,5404,5405,5407,5408,5409,5411,5412,5414,5415,5415,5418,5420,5421,5422,5425,5426,5428,5429,5430,5431,5432,5434,5435,5436,5437,5438,5439,5440,5441,5443,5445,5446,5447,5448,5449,5450,5451,5452,5453,5454,5456,5457,5459,5460,5463,5464,5467,5468,5470,5471,5473,5474,5476,5477,5478,5480,5481,5482,5483,5484,5485,5486,5488,5490,5492,5494,5501,5502,5503,5505,5507,5508,5509,5510,5511,5512,5515,5517,5520,5523,5524,5526,5528,5531,5534,5535,5536,5538,5540,5542,5545,5549,5552,5553,5554,5555,5557,5559,5560,5561,5563,5564,5565,5566,5568,5569,5570,5573,5574,5575,5577,5578,5579,5580,5581,5586,5587,5589,5590,5591,5593,5596,5598,5601,5602,5603,5606,5607,5608,5613,5614,5616,5617,5618,5620,5621,5622,5623,5624,5626,5627,5628,5629,5631,5632,5633,5634,5635,5636,5638,5639,5640,5641,5643,5645,5647,5648,5650,5652,5653,5654,5655,5656,5662,5663,5669,5670,5671,5672,5674,5677,5680,5681,5683,5684,5685,5686,5688,5689,5690,5691,5703,5704,5705,5706,5707,5707,5709,5710,5711,5712,5713,5714,5716,5718,5720,5724,5725,5727,5728,5731,5732,5735,5736,5737,5738,5740,5741,5743,5745,5746,5747,5749,5750,5751,5752,5755,5756,5757,5758,5760,5762,5763,5764,5765,5766,5767,5769,5771,5773,5776,5779,5781,5782,5784,5785,5787,5789,5791,5792,5794,5795,5796,5797,5799,5800,5802,5803,5805,5806,5808,5809,5817,5818,5819,5820,5821,5821,5823,5824,5825,5828,5829,5830,5831,5832,5834,5836,5838,5839,5841,5843,5845,5849,5851,5853,5854,5855,5856,5858,5859,5861,5862,5866,5869,5870,5871,5872,5874,5875,5876,5877,5878,5881,5882,5883,5884,5885,5886,5889,5890,5891,5892,5894,5896,5897,5898,5899,5904,5905,5906,5908,5909,5910,5911,5912,5914,5917,5918,5920,5921,5923,5924,5925,5927,5928,5929,5930,5931,5932,5935,5936,5937,5938,5939,5940,5941,5942,5943,5944,5946,5958,5959,5960,5961,5963,5964,5965,5966,5967,5968,5970,5971,5972,5973,5976,5979,5980,5981,5984,5985,5986,5991,5992,5993,5994,5996,5997,5998,5999,6000,6002,6003,6004,6006,6008,6009,6010,6012,6013,6014,6015,6016,6018,6019,6024,6025,6027,6028,6029,6030,6031,6033,6035,6036,6038,6039,6040,6041,6042,6044,6045,6047,6048,6049,6050,6052,6055,6056,6060,6061,6063,6064,6067,6071,6072,6073,6075,6077,6081,6088,6089,6090,6091,6092,6093,6094,6095,6096,6097,6098,6099,6100,6101,6103,6105,6106,6107,6108,6109,6110,6111,6112,6113,6114,6115,6116,6117,6119,6124,6126,6128,6129,6131,6132,6134,6136,6139,6140,6141,6142,6143,6144,6145,6147,6148,6149,6150,6153,6154,6156,6158,6159,6160,6161,6162,6168,6170,6173,6174,6175,6176,6178,6180,6181,6182,6183,6184,6185,6186,6187,6189,6190,6191,6192,6194,6196,6197,6198,6205,6206,6207,6208,6209,6211,6212,6214,6215,6216,6218,6220,6221,6222,6223,6224,6225,6227,6228,6230,6235,6236,6237,6238,6242,6243,6244,6245,6246,6247,6248,6249,6250,6251,6252,6253,6254,6255,6256,6257,6259,6260,6261,6262,6263,6264,6266,6267,6268,6275,6276,6277,6278,6279,6280,6281,6282,6283,6284,6285,6286,6287,6288,6289,6291,6292,6294,6295,6296,6297,6300,6301,6302,6303,6304,6305,6306,6307,6308,6309,6310,6311,6312,6313,6314,6316,6318,6319,6320,6321,6322,6323,6324,6325,6326,6327,6328,6329,6330,6332,6333,6334,6335,6336,6337,6338,6339,6340,6344,6345,6347,6349,6350,6352,6354,6355,6357,6358,6359,6360,6362,6363,6365,6366,6368,6369,6370,6371,6372,6374,6375,6376,6377,6378,6379,6380,6381,6383,6384,6388,6389,6390,6391,6392,6393,6394,6396,6399,6400,6401,6402,6403,6405,6408,6409,6410,6412,6413,6414,6415,6416,6417,6418,6420,6423,6424,6426,6429,6430,6432,6435,6436,6437,6438,6440,6441,6442,6443,6445,6446,6447,6448,6449,6450,6451,6453,6454,6455,6456,6458,6460,6461,6462,6463,6465,6466,6468,6469,6470,6471,6472,6473,6474,6475,6477,6478,6480,6481,6482,6483,6484,6486,6488,6489,6490,6491,6493,6495,6496,6498,6503,6504,6505,6506,6507,6508,6509,6510,6512,6513,6514,6517,6518,6523,6524,6525,6530,6531,6532,6533,6539,6541,6542,6544,6546,6551,6552,6553,6555,6556,6557,6558,6561,6562,6563,6564,6565,6567,6569,6572,6575,6576,6577,6578,6579,6580,6581,6582,6583,6585,6586,6587,6588,6589,6591,6593,6594,6595,6597,6598,6600,6604,6612,6613,6617,6618,6619,6620,6622,6624,6625,6626,6627,6628,6629,6631,6637,6638,6639,6641,6642,6643,6645,6648,6649,6650,6651,6652,6654,6659,6660,6661,6663,6664,6665,6666,6667,6668,6669,6671,6672,6673,6674,6675,6676,6678,6680,6681,6682,6684,6685,6686,6688,6690,6691,6692,6694,6696,6698,6700,6701,6703,6706,6709,6710,6712,6713,6714,6716,6717,6718,6719,6720,6723,6725,6727,6728,6730,6732,6733,6734,6735,6736,6738,6739,6740,6741,6742,6743,6745,6748,6749,6750,6751,6753,6754,6755,6757,6759,6760,6761,6763,6765,6767,6769,6770,6772,6775,6777,6780,6781,6783,6784,6785,6787,6788,6789,6790,6791,6794,6798,6800,6801,6802,6803,6804,6805,6806,6807,6810,6823,6824,6825,6827,6828,6829,6830,6832,6833,6834,6835,6836,6837,6838,6839,6840,6842,6843,6845,6846,6847,6848,6851,6852,6854,6856,6857,6858,6860,6865,6866,6867,6868,6869,6870,6871,6872,6873,6874,6876,6877,6879,6881,6882,6887,6889,6890,6895,6896,6897,6899,6902,6903,6905,6906,6907,6908,6913,6914,6915,6916,6917,6918,6920,6921,6924,6925,6929,6930,6933,6934,6935,6936,6937,6938,6939,6940,6941,6942,6943,6947,6948,6949,6952,6954,6955,6956,6957,6958,6960,6963,6964,6966,6967,6968,6969,6970,6972,6975,6977,6980,6981,6982,6984,6985,6986,6987,6988,6990,6993,6994,6995,6997,6998,6999,7000,7001,7003,7005,7007,7008,7009,7011,7012,7014,7015,7018,7029,7030,7031,7033,7034,7035,7036,7038,7039,7040,7041,7042,7044,7047,7049,7051,7052,7053,7054,7055,7057,7059,7060,7062,7063,7064,7066,7067,7071,7072,7073,7074,7076,7077,7078,7100,7101,7102,7103,7105,7106,7107,7131,7132,7133,7134,7135,7137,7138,7141,7158,7159,7160,7161,7164,7165,7166,7166,7168,7170,7172,7173,7175,7176,7177,7178,7180,7181,7181,7181,7186,7187,7188,7189,7190,7191,7193,7194,7195,7196,7197,7200,7201,7202,7203,7204,7205,7206,7208,7211,7212,7213,7215,7220,7224,7225,7226,7228,7232,7233,7234,7237,7238,7239,7240,7241,7242,7243,7244,7245,7247,7249,7250,7254,7255,7256,7257,7258,7259,7260,7261,7263,7264,7265,7267,7274,7275,7276,7279,7280,7283,7286,7287,7290,7291,7292,7293,7293,7295,7296,7300,7301,7302,7303,7304,7307,7308,7309,7310,7311,7312,7313,7314,7316,7317,7318,7319,7321,7323,7326,7328,7328,7328,7330,7331,7332,7333,7335,7336,7340,7341,7344,7345,7347,7348,7350,7352,7353,7357,7358,7359,7360,7362,7363,7364,7367,7368,7369,7370,7375,7376,7378,7380,7382,7385,7386,7388,7390,7396,7398,7399,7401,7402,7406,7407,7407,7407,7408,7409,7412,7413,7414,7415,7417,7419,7420,7421,7422,7423,7424,7426,7427,7428,7429,7430,7431,7432,7433,7435,7436,7439,7440,7444,7445,7447,7449,7452,7454,7455,7456,7457,7459,7462,7466,7467,7468,7471,7472,7473,7474,7477,7478,7479,7480,7481,7483,7487,7491,7492,7493,7494,7500,7502,7503,7504,7505,7506,7507,7508,7508,7508,7509,7510,7513,7514,7516,7517,7518,7519,7520,7521,7522,7523,7524,7525,7527,7528,7528,7528,7531,7532,7534,7536,7537,7539,7541,7542,7543,7545,7547,7548,7550,7553,7555,7558,7559,7561,7563,7566,7567,7569,7570,7572,7576,7577,7578,7582,7585,7587,7588,7589,7590,7591,7592,7594,7595,7601,7602,7603,7603,7603,7604,7605,7606,7607,7608,7609,7609,7609,7611,7613,7614,7616,7621,7622,7624,7625,7626,7629,7630,7631,7635,7636,7637,7638,7639,7640,7641,7642,7643,7644,7645,7647,7648,7651,7652,7653,7655,7656,7657,7658,7659,7660,7661,7663,7664,7668,7670,7671,7674,7675,7677,7679,7680,7681,7682,7684,7686,7688,7689,7691,7692,7694,7695,7696,7697,7699,7702,7704,7706,7707,7708,7710,7711,7712,7713,7715,7720,7721,7722,7724,7725,7727,7732,7734,7735,7736,7737,7738,7739,7740,7745,7747,7748,7749,7750,7751,7752,7757,7758,7759,7761,7763,7764,7765,7766,7768,7769,7770,7771,7772,7774,7775,7776,7778,7783,7784,7785,7788,7789,7790,7791,7793,7794,7796,7797,7798,7799,7801,7802,7804,7805,7806,7807,7808,7811,7812,7813,7815,7817,7818,7819,7821,7823,7824,7827,7828,7830,7831,7834,7835,7836,7837,7838,7839,7840,7841,7842,7844,7845,7846,7847,7848,7849,7851,7853,7854,7855,7856,7857,7859,7860,7862,7864,7865,7866,7867,7868,7869,7870,7871,7872,7873,7874,7876,7878,7879,7880,7881,7882,7883,7884,7885,7886,7887,7888,7889,7890,7892,7905,7906,7907,7908,7909,7910,7912,7914,7915,7916,7917,7919,7930,7931,7932,7933,7934,7935,7936,7937,7938,7939,7940,7941,7942,7944,7945,7946,7947,7948,7949,7950,7951,7952,7953,7954,7955,7956,7957,7958,8013,8014,8015,8021,8022,8023,8024,8025,8027,8030,8031,8032,8033,8034,8036,8039,8040,8041,8042,8043,8044,8045,8046,8047,8048,8050,8055,8056,8057,8059,8060,8061,8063,8064,8065,8066,8068,8069,8070,8072,8075,8076,8077,8083,8084,8085,8088,8090,8092,8093,8095,8102,8104,8105,8106,8107,8113,8115,8116,8117,8119,8120,8122,8123,8125,8131,8135,8136,8137,8138,8139,8140,8141,8142,8143,8144,8145,8146,8147,8149,8150,8151,8152,8153,8154,8155,8156,8157,8158,8159,8160,8161,8162,8163,8164,8166,8167,8169,8170,8172,8173,8174,8175,8176,8177,8185,8186,8187,8188,8189,8190,8191,8192,8193,8194,8195,8196,8197,8198,8199,8202,8203,8204,8205,8206,8207,8208,8209,8210,8211,8212,8213,8214,8215,8216,8217,8218,8219,8220,8221,8222,8223,8224,8225,8226,8227,8228,8229,8230,8231,8232,8233,8235,8236,8237,8238,8239,8241,8242,8243,8244,8245,8246,8247,8248,8249,8250,8251,8252,8253,8255,8256,8265,8267,8268,8269,8270,8271,8273,8274,8275,8276,8277,8278,8279,8280,8282,8284,8285,8286,8287,8288,8289,8291,8292,8295,8297,8298,8301,8302,8303,8305,8313,8314,8315,8315,8316,8316,8317,8318,8324,8326,8328,8329,8330,8331,8332,8333,8335,8341,8342,8344,8345,8346,8348,8349,8350,8351,8353,8354,8355,8356,8357,8358,8359,8362,8369,8371,8372,8373,8374,8375,8377,8378,8379,8380,8382,8383,8384,8385,8386,8387,8388,8389,8390,8391,8392,8395,8397,8398,8399,8400,8401,8402,8403,8404,8407,8408,8409,8410,8415,8417,8418,8419,8420,8421,8430,8431,8432,8433,8434,8436,8437,8438,8439,8440,8441,8442,8443,8444,8446,8447,8448,8449,8451,8452,8453,8454,8455,8456,8457,8458,8459,8461,8462,8463,8464,8465,8466,8467,8468,8469,8471,8472,8473,8474,8475,8476,8477,8478,8479,8480,8481,8483,8485,8487,8489,8490,8491,8494,8495,8496,8497,8498,8499,8500,8502,8503,8504,8505,8507,8508,8509,8510,8511,8512,8513,8518,8519,8520,8521,8522,8523,8524,8526,8527,8533,8536,8537,8539,8541,8542,8544,8545,8546,8552,8553,8554,8555,8556,8557,8558,8559,8561,8562,8563,8565,8567,8568,8569,8570,8571,8573,8574,8580,8581,8584,8586,8587,8588,8589,8591,8593,8594,8595,8597,8598,8599,8600,8601,8603,8604,8605,8606,8607,8608,8610,8613,8614,8615,8616,8618,8619,8625,8627,8629,8630,8631,8632,8633,8635,8636,8637,8638,8639,8642,8643,8645,8646,8652,8655,8656,8657,8658,8661,8663,8670,8672,8673,8674,8675,8676,8678,8679,8680,8681,8682,8684,8693,8694,8695,8696,8697,8698,8700,8701,8702,8703,8704,8742,8743,8745,8746,8748,8750,8756,8758,8759,8760,8761,8762,8763,8764,8765,8766,8767,8768,8769,8770,8773,8775,8777,8779,8780,8786,8787,8789,8790,8791,8792,8793,8795,8797,8820,8822,8824,8828,8829,8832,8833,8836,8837,8838,8839,8841,8844,8846,8847,8849,8851,8853,8854,8856,8857,8858,8860,8862,8864,8865,8867,8869,8871,8872,8873,8874,8876,8877,8879,8879,8882,8883,8884,8886,8887,8889,8893,8894,8894,8895,8896,8898,8899,8901,8902,8907,8908,8909,8910,8911,8912,8913,8915,8916,8917,8918,8919,8920,8921,8922,8923,8924,8925,8927,8929,8931,8932,8944,8945,8946,8948,8949,8950,8951,8952,8953,8954,8955,8956,8958,8959,8960,8962,8963,8964,8966,8967,8968,8969,8970,8971,8972,8973,8975,8976,8977,8978,8980,8982,8984,8985,8986,8988,8990,8992,8994,8996,8997,8998,8999,9000,9002,9004,9005,9006,9008,9011,9014,9016,9017,9018,9020,9022,9023,9024,9025,9026,9027,9028,9030,9034,9035,9036,9049,9050,9051,9052,9053,9054,9055,9057,9058,9059,9060,9061,9062,9063,9064,9065,9066,9067,9068,9069,9071,9073,9074,9076,9077,9078,9080,9081,9083,9084,9087,9088,9089,9090,9091,9092,9094,9097,9098,9109,9110,9111,9112,9113,9114,9115,9116,9118,9120,9121,9122,9123,9125,9128,9129,9130,9132,9133,9135,9138,9139,9140,9141,9142,9143,9144,9145,9147,9149,9150,9157,9158,9159,9160,9161,9163,9164,9165,9167,9170,9171,9172,9174,9176,9177,9177,9179,9183,9184,9185,9186,9187,9188,9189,9190,9191,9192,9193,9197,9198,9199,9200,9201,9202,9204,9206,9208,9209,9211,9212,9213,9215,9218,9219,9220,9221,9222,9224,9226,9227,9227,9229,9232,9233,9235,9237,9239,9240,9249,9250,9256,9261,9262,9264,9277,9279,9281,9283,9284,9285,9286,9287,9288,9289,9291,9292,9293,9294,9295,9306,9307,9308,9309,9311,9313,9315,9316,9318,9322,9324,9325,9327,9328,9329,9330,9331,9333,9334,9335,9336,9337,9338,9340,9344,9345,9346,9347,9347,9347,9348,9350,9353,9354,9355,9356,9359,9362,9364,9365,9366,9367,9368,9369,9374,9377,9378,9379,9380,9381,9382,9385,9386,9387,9388,9390,9392,9394,9395,9397,9398,9400,9401,9402,9406,9407,9408,9409,9410,9411,9413,9415,9416,9417,9418,9419,9420,9424,9425,9426,9427,9427,9427,9428,9429,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9444,9445,9446,9448,9450,9469,9470,9471,9472,9472,9472,9473,9474,9478,9479,9482,9483,9484,9485,9485,9485,9486,9489,9489,9490,9490,9490,9492,9493,9494,9499,9500,9527,9529,9530,9531,9532,9533,9534,9535,9536,9537,9538,9539,9540,9541,9542,9543,9544,9546,9547,9548,9552,9553,9559,9560,9561,9562,9563,9564,9570,9571,9572,9573,9577,9577,9580,9658,9658,9659,9660,9665,9667,9668,9669,9682,9684,9685,9687,9688,9689,9690,9691,9692,9694,9697,9698,9705,9706,9708,9709,9710,9711,9712,9713,9714,9715,9716,9717,9718,9719,9740,9741,9742,9743,9744,9757,9758,9759,9760,9761,9762,9763,9764,9765,9766,9767,9769,9771,9773,9775,9777,9779,9781,9783,9785,9787,9791,9792,9796,9797,9799,9800,9801,9803,9804,9806,9806,9807,9808,9808,9808,9814,9815,9815,9816,9819,9819,9822,9822,9823,9824,9825,9826,9827,9829,9830,9831,9834,9835,9836,9837,9838,9838,9839,9843,9844,9845,9846,9847,9851,9854,9855,9856,9858,9859,9860,9860,9861,9864,9865,9869,9870,9871,9873,9874,9875,9876,9877,9881,9884,9886,9887,9888,9891,9892,9894,9895,9896,9897,9898,9900,9919,9920,9922,9923,9925,9926,9929,9931,9931,9931,9932,9933,9942,9943,9945,9946,9947,9948,9949,9951,9952,9953,9954,9955,9956,9957,9959,9961,9963,9965,9966,9967,9973,9975,9976,9984,9986,9987,9988,9989,9990,9991,9994,9995,9998,9999,10000,10001,10008,10010,10011,10012,10013,10014,10015,10016,10018,10019,10020,10028,10029,10030,10031,10034,10035,10037,10038,10039,10040,10041,10043,10045,10046,10048,10055,10056,10058,10060,10061,10062,10063,10065,10078,10079,10081,10082,10090,10091,10092,10093,10094,10095,10096,10097,10098,10099,10102,10103,10104,10105,10106,10107,10109,10111,10113,10114,10115,10116,10117,10118,10119,10120,10121,10124,10125,10128,10131,10132,10135,10136,10140,10144,10145,10146,10147,10148,10149,10150,10153,10160,10162,10163,10167,10170,10176,10177,10179,10180,10181,10187,10189,10190,10191,10197,10198,10199,10200,10201,10202,10203,10210,10212,10213,10215,10216,10217,10218,10219,10222,10224,10225,10226,10228,10234,10236,10238,10239,10240,10241,10243,10253,10254,10256,10257,10258,10260,10261,10263,10264,10265,10266,10267,10270,10271,10272,10273,10274,10275,10279,10287,10288,10289,10290,10291,10292,10293,10294,10296,10297,10299,10302,10308,10309,10310,10311,10312,10314,10315,10316,10325,10327,10328,10329,10332,10333,10334,10335,10336,10340,10341,10342,10343,10344,10349,10356,10358,10359,10360,10361,10364,10370,10372,10373,10374,10375,10376,10377,10384,10385,10387,10388,10389,10391,10393,10394,10396,10402,10404,10406,10407,10408,10409,10410,10411,10413,10414,10415,10416,10417,10418,10419,10421,10422,10423,10425,10428],"file":"C:/pythonizer/pythonizer/pythonizer","digest":"5d6985741f2ec8194e2d97255aaa0890"}