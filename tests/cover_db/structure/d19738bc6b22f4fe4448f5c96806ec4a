{"condition":[[120,{"right":"$options{'b'} < 9000","left":"$options{'b'} > 0","type":"and_3","op":"and"}],[133,{"right":"$options{'B'} < 9000","left":"$options{'B'} > 0","type":"and_3","op":"and"}],[143,{"op":"and","type":"and_3","left":"$options{'t'} > 1","right":"$options{'t'} <= 10"}],[151,{"type":"and_3","op":"and","right":"$options{'w'} <= 256","left":"$options{'w'} >= 100"}],[153,{"type":"or_2","op":"//","right":"Deparse error: Can't locate object method \"object_2svref\" via package \"B::SPECIAL\" at C:/Strawberry/perl/lib/B/Deparse.pm line 5493.\n","left":"$maxlinelen"}],[179,{"right":"$options{'l'} <= 1000","left":"$options{'l'} >= 48","type":"and_3","op":"and"}],[277,{"right":"$MFlag","left":"$mFlag","type":"or_3","op":"or"}],[371,{"op":"and","type":"and_3","left":"not defined $line","right":"$main::saved_eval_tokens"}],[380,{"type":"and_3","op":"and","right":"$. == $main::breakpoint","left":"$main::debug == 2"}],[389,{"right":"$main::nested_sub_at_level < 0","left":"defined $main::saved_sub_tokens","type":"and_3","op":"and"}],[408,{"right":"$#ValClass >= 3","left":"not $pass_0_ran","type":"and_3","op":"and"}],[408,{"left":"not $pass_0_ran and $#ValClass >= 3","right":"$ValClass[0] eq \"i\"","op":"and","type":"and_3"}],[408,{"type":"and_3","op":"and","right":"$ValPerl[0] eq \"pragma\"","left":"not $pass_0_ran and $#ValClass >= 3 and $ValClass[0] eq \"i\""}],[408,{"left":"not $pass_0_ran and $#ValClass >= 3 and $ValClass[0] eq \"i\" and $ValPerl[0] eq \"pragma\"","right":"$ValPerl[1] eq \"pythonizer\"","op":"and","type":"and_3"}],[409,{"type":"and_3","op":"and","right":"$ValPerl[3] eq \"convert\"","left":"$ValPerl[2] eq \"no\""}],[409,{"left":"$got_first_line == 0","right":"$ValPerl[2] eq \"no\" and $ValPerl[3] eq \"convert\"","op":"or","type":"or_3"}],[417,{"type":"or_3","op":"||","right":"$ValPerl[0] ne 'package'","left":"$ValClass[0] ne 'c'"}],[417,{"op":"and","type":"and_3","left":"not defined $CurPackage","right":"$ValClass[0] ne 'c' || $ValPerl[0] ne 'package'"}],[427,{"op":"and","type":"and_3","left":"$ValClass[0] eq \"t\"","right":"$ValPerl[0] eq \"my\""}],[440,{"right":"$ValType[$k] eq \"X\"","left":"defined $ValType[$k]","type":"and_3","op":"and"}],[440,{"left":"defined $ValType[$k] and $ValType[$k] eq \"X\"","right":"not exists $GLOBALS{$ValPy[$k]}","op":"and","type":"and_3"}],[437,{"op":"||","type":"or_3","left":"$ValPerl[$k] eq 'shift'","right":"$ValPerl[$k] eq 'pop'"}],[437,{"right":"$ValPerl[$k] eq 'shift' || $ValPerl[$k] eq 'pop'","left":"$ValClass[$k] eq \"f\"","type":"and_3","op":"and"}],[437,{"type":"or_3","op":"||","right":"!($ValClass[$k + 1] =~ /[ahfi]/)","left":"$k == $#ValClass || $ValPerl[$k + 1] eq '@_'"}],[437,{"type":"and_3","op":"and","right":"$k == $#ValClass || $ValPerl[$k + 1] eq '@_' || !($ValClass[$k + 1] =~ /[ahfi]/)","left":"$ValClass[$k] eq \"f\" and $ValPerl[$k] eq 'shift' || $ValPerl[$k] eq 'pop'"}],[427,{"right":"1 <= $#ValClass","left":"$ValPerl[0] eq \"sub\"","type":"and_3","op":"and"}],[427,{"op":"and","type":"and_3","left":"$ValPerl[0] eq \"sub\" and 1 <= $#ValClass","right":"exists $main::nested_subs{$ValPerl[1]}"}],[427,{"op":"and","type":"and_3","left":"$ValPerl[0] eq \"sub\"","right":"$#ValClass >= 1"}],[427,{"right":"$ValPerl[0] eq \"package\"","left":"$ValClass[0] eq \"c\"","type":"and_3","op":"and"}],[427,{"left":"$ValClass[0] eq \"c\" and $ValPerl[0] eq \"package\"","right":"$#ValClass >= 1","op":"and","type":"and_3"}],[427,{"type":"and_3","op":"and","right":"$#ValClass == 0","left":"$ValClass[0] eq \"}\""}],[471,{"type":"and_3","op":"and","right":"$NextNest == 0","left":"$we_are_in_sub_body"}],[490,{"left":"$ValClass[$k] eq \"s\"","right":"$ValPerl[$k] eq \"\\$_\"","op":"and","type":"and_3"}],[490,{"type":"and_3","op":"and","right":"$k + 1 <= $#ValClass","left":"$ValClass[$k] eq \"s\" and $ValPerl[$k] eq \"\\$_\""}],[490,{"right":"$ValClass[$k + 1] eq '~' && $ValClass[$k + 2] eq 'f' && $ValPerl[$k + 2] =~ /^(?:re|tr)$/","left":"$ValClass[$k + 1] eq '='","type":"or_3","op":"||"}],[490,{"type":"and_3","op":"and","right":"$ValClass[$k + 1] eq '=' || $ValClass[$k + 1] eq '~' && $ValClass[$k + 2] eq 'f' && $ValPerl[$k + 2] =~ /^(?:re|tr)$/","left":"$ValClass[$k] eq \"s\" and $ValPerl[$k] eq \"\\$_\" and $k + 1 <= $#ValClass"}],[497,{"type":"and_3","op":"and","right":"$ValClass[$k - 1] eq \"t\"","left":"$k != 0"}],[497,{"left":"$k != 0 and $ValClass[$k - 1] eq \"t\"","right":"$ValPerl[$k - 1] eq \"my\"","op":"and","type":"and_3"}],[501,{"right":"$ValType[$k] eq \"X\"","left":"defined $ValType[$k]","type":"and_3","op":"and"}],[501,{"left":"defined $ValType[$k] and $ValType[$k] eq \"X\"","right":"not exists $GLOBALS{$ValPy[$k]}","op":"and","type":"and_3"}],[504,{"type":"and_3","op":"and","right":"not $ValPy[$k] =~ /^len\\(/","left":"$ValPy[$k] =~ /[\\[\\(]/"}],[504,{"right":"$ValPy[$k] ne \"globals()\"","left":"$ValPy[$k] =~ /[\\[\\(]/ and not $ValPy[$k] =~ /^len\\(/","type":"and_3","op":"and"}],[504,{"left":"$ValPy[$k] =~ /[\\[\\(]/ and not $ValPy[$k] =~ /^len\\(/ and $ValPy[$k] ne \"globals()\"","right":"not $ValPy[$k] =~ /\\.__dict__$/","op":"and","type":"and_3"}],[504,{"right":"substr($ValPy[$k], 0, 5) ne \"(len(\"","left":"$ValPy[$k] =~ /[\\[\\(]/ and not $ValPy[$k] =~ /^len\\(/ and $ValPy[$k] ne \"globals()\" and not $ValPy[$k] =~ /\\.__dict__$/","type":"and_3","op":"and"}],[504,{"type":"and_3","op":"and","right":"substr($ValPy[$k], 0, 4) ne \"sys.\"","left":"$ValPy[$k] =~ /[\\[\\(]/ and not $ValPy[$k] =~ /^len\\(/ and $ValPy[$k] ne \"globals()\" and not $ValPy[$k] =~ /\\.__dict__$/ and substr($ValPy[$k], 0, 5) ne \"(len(\""}],[488,{"left":"$ValPerl[$k] eq 'shift'","right":"$ValPerl[$k] eq 'pop'","op":"||","type":"or_3"}],[488,{"type":"and_3","op":"and","right":"$ValPerl[$k] eq 'shift' || $ValPerl[$k] eq 'pop'","left":"$ValClass[$k] eq \"f\""}],[488,{"type":"or_3","op":"||","right":"!($ValClass[$k + 1] =~ /[ahfi]/)","left":"$k == $#ValClass || $ValPerl[$k + 1] eq '@_'"}],[488,{"left":"$ValClass[$k] eq \"f\" and $ValPerl[$k] eq 'shift' || $ValPerl[$k] eq 'pop'","right":"$k == $#ValClass || $ValPerl[$k + 1] eq '@_' || !($ValClass[$k + 1] =~ /[ahfi]/)","op":"and","type":"and_3"}],[488,{"right":"$ValPerl[$k] eq 'unshift'","left":"$ValPerl[$k] eq 'push'","type":"or_3","op":"||"}],[488,{"left":"$ValClass[$k] eq \"f\"","right":"$ValPerl[$k] eq 'push' || $ValPerl[$k] eq 'unshift'","op":"and","type":"and_3"}],[488,{"type":"and_3","op":"and","right":"$ValPerl[$k + 1] eq \"\\@_\"","left":"$ValClass[$k] eq \"f\" and $ValPerl[$k] eq 'push' || $ValPerl[$k] eq 'unshift'"}],[488,{"left":"$ValPerl[$k] eq \"re\"","right":"$ValPy[$k] =~ /\\b$DEFAULT_VAR\\b/","op":"and","type":"and_3"}],[488,{"left":"$ValClass[$k] eq \"f\"","right":"($ValPerl[$k] eq \"re\" and $ValPy[$k] =~ /\\b$DEFAULT_VAR\\b/)","op":"and","type":"and_3"}],[488,{"right":"$ValClass[$k - 1] ne '~'","left":"$k == 0","type":"or_3","op":"||"}],[488,{"op":"and","type":"and_3","left":"$ValPerl[$k] eq \"tr\"","right":"$k == 0 || $ValClass[$k - 1] ne '~'"}],[488,{"op":"or","type":"or_3","left":"$ValClass[$k] eq \"f\" and ($ValPerl[$k] eq \"re\" and $ValPy[$k] =~ /\\b$DEFAULT_VAR\\b/)","right":"$ValPerl[$k] eq \"tr\" and $k == 0 || $ValClass[$k - 1] ne '~'"}],[526,{"type":"and_3","op":"and","right":"$ValClass[0] eq \"k\"","left":"scalar @ValClass > 0"}],[526,{"right":"$ValPerl[0] eq \"return\"","left":"scalar @ValClass > 0 and $ValClass[0] eq \"k\"","type":"and_3","op":"and"}],[539,{"left":"exists $VarType{$CurSubName}","right":"exists $VarType{$CurSubName}{'__main__'}","op":"and","type":"and_3"}],[539,{"type":"and_3","op":"and","right":"$VarType{$CurSubName}{'__main__'} eq \"m\"","left":"exists $VarType{$CurSubName} and exists $VarType{$CurSubName}{'__main__'}"}],[545,{"type":"and_3","op":"and","right":"$ValClass[0] ne \"t\"","left":"($p = index($TokenStr, \"=\")) > 0"}],[545,{"op":"and","type":"and_3","left":"$ValClass[0] eq \"k\"","right":"scalar @ValClass > 1"}],[562,{"right":"$ValClass[$i] eq \"i\"","left":"$comma_flip == 1","type":"and_3","op":"and"}],[556,{"left":"$ValPerl[0] ne \"use\"","right":"$ValPerl[0] ne \"require\"","op":"and","type":"and_3"}],[556,{"op":"and","type":"and_3","left":"$ValPerl[0] ne \"use\" and $ValPerl[0] ne \"require\"","right":"$ValPerl[0] ne \"no\""}],[575,{"op":"and","type":"and_3","left":"$i + 1 <= $#ValClass","right":"$ValClass[$i + 1] =~ /[AD]/"}],[576,{"type":"or_3","op":"or","right":"$ValPerl[$i + 1] eq \"(\"","left":"$i + 1 > $#ValClass"}],[576,{"left":"$ValPerl[$i - 1] ne \"{\"","right":"$ValClass[$i - 1] ne \"D\"","op":"and","type":"and_3"}],[576,{"op":"or","type":"or_3","left":"$i == 0","right":"$ValPerl[$i - 1] ne \"{\" and $ValClass[$i - 1] ne \"D\""}],[576,{"right":"($i == 0 or $ValPerl[$i - 1] ne \"{\" and $ValClass[$i - 1] ne \"D\")","left":"$i + 1 > $#ValClass or $ValPerl[$i + 1] eq \"(\"","type":"or_3","op":"or"}],[556,{"type":"and_3","op":"and","right":"$ValPerl[0] eq \"use\"","left":"$#ValClass >= 2"}],[556,{"type":"and_3","op":"and","right":"$ValPerl[1] eq \"subs\"","left":"$#ValClass >= 2 and $ValPerl[0] eq \"use\""}],[600,{"right":"not $main::saved_eval_tokens","left":"$TokenStr =~ /C\"/","type":"and_3","op":"and"}],[604,{"right":"($ch0 = substr($ValPy[$pos + 1], 0, 1)) eq \"'\"","left":"$ValPerl[$pos] eq \"eval\"","type":"and_3","op":"and"}],[604,{"type":"or_3","op":"or","right":"$ch0 eq \"\\\"\"","left":"$ValPerl[$pos] eq \"eval\" and ($ch0 = substr($ValPy[$pos + 1], 0, 1)) eq \"'\""}],[627,{"right":"$ValPerl[$i] eq \"re\"","left":"$ValClass[$i] eq \"f\"","type":"and_3","op":"and"}],[627,{"type":"and_3","op":"and","right":"$ValPy[$i] =~ /re\\.E/","left":"$ValClass[$i] eq \"f\" and $ValPerl[$i] eq \"re\""}],[662,{"left":"$#ValClass != 0","right":"$ValClass[$#ValClass] eq \"k\"","op":"and","type":"and_3"}],[662,{"type":"and_3","op":"and","right":"$ValPerl[$#ValClass] eq \"sub\"","left":"$#ValClass != 0 and $ValClass[$#ValClass] eq \"k\""}],[775,{"type":"and_3","op":"and","right":"exists $VarType{$varname}","left":"defined $common_type"}],[775,{"right":"exists $VarType{$varname}{'__main__'}","left":"defined $common_type and exists $VarType{$varname}","type":"and_3","op":"and"}],[775,{"right":"$common_type ne $VarType{$varname}{'__main__'}","left":"defined $common_type and exists $VarType{$varname} and exists $VarType{$varname}{'__main__'}","type":"and_3","op":"and"}],[775,{"op":"and","type":"and_3","left":"defined $common_type and exists $VarType{$varname} and exists $VarType{$varname}{'__main__'} and $common_type ne $VarType{$varname}{'__main__'}","right":"$main::debug >= 3"}],[779,{"right":"exists $NeedsInitializing{$subname}{$varname}","left":"$var_usage_in_subs > 1","type":"or_3","op":"or"}],[781,{"left":"$varname eq \"True\"","right":"$varname eq \"False\"","op":"or","type":"or_3"}],[791,{"type":"and_3","op":"and","right":"$common_type =~ /[IFN]/","left":"defined $common_type"}],[791,{"left":"defined $common_type","right":"$common_type =~ / of .$/","op":"and","type":"and_3"}],[802,{"type":"and_3","op":"and","right":"$subname ne \"__main__\"","left":"defined $common_type"}],[802,{"op":"and","type":"and_3","left":"defined $common_type and $subname ne \"__main__\"","right":"exists $NeedsInitializing{$subname}{$varname}"}],[821,{"op":"or","type":"or_3","left":"$varname eq \"True\"","right":"$varname eq \"False\""}],[863,{"left":"$type eq \"S\"","right":"$type eq \"s\"","op":"or","type":"or_3"}],[899,{"left":"$ValPy[0] ne \"for\"","right":"$class eq \"s\"","op":"and","type":"and_3"}],[899,{"right":"$k + 1 <= $#ValClass && ($ValClass[$k + 1] eq '=' || $ValClass[$k + 1] eq '^')","left":"$k != 0 && $ValClass[$k - 1] eq '^'","type":"or_3","op":"||"}],[899,{"type":"and_3","op":"and","right":"$k != 0 && $ValClass[$k - 1] eq '^' || $k + 1 <= $#ValClass && ($ValClass[$k + 1] eq '=' || $ValClass[$k + 1] eq '^')","left":"$ValPy[0] ne \"for\" and $class eq \"s\""}],[916,{"type":"and_3","op":"and","right":"$ValPerl[$k + 1] eq \"[\"","left":"$k + 1 <= $#ValClass"}],[916,{"type":"and_3","op":"and","right":"$ValPerl[$k + 1] eq \"{\"","left":"$k + 1 <= $#ValClass"}],[915,{"left":"$ValClass[$k - 1] eq \"f\"","right":"$ValPerl[$k - 1] eq \"defined\"","op":"and","type":"and_3"}],[915,{"op":"and","type":"and_3","left":"$ValClass[$k - 1] eq \"f\" and $ValPerl[$k - 1] eq \"defined\"","right":"&main::end_of_variable($k) == $k"}],[939,{"type":"and_3","op":"and","right":"$ValClass[$k - 1] eq \"(\"","left":"$k - 1 >= 0"}],[941,{"type":"and_3","op":"and","right":"$ValClass[$lim + 2] eq \"~\"","left":"$lim + 3 <= $#ValClass"}],[941,{"op":"and","type":"and_3","left":"$lim + 3 <= $#ValClass and $ValClass[$lim + 2] eq \"~\"","right":"$ValClass[$lim + 3] eq \"f\""}],[941,{"op":"||","type":"or_3","left":"$ValPerl[$lim + 3] eq 're'","right":"$ValPerl[$lim + 3] eq 'tr'"}],[941,{"right":"$ValPerl[$lim + 3] eq 're' || $ValPerl[$lim + 3] eq 'tr'","left":"$lim + 3 <= $#ValClass and $ValClass[$lim + 2] eq \"~\" and $ValClass[$lim + 3] eq \"f\"","type":"and_3","op":"and"}],[963,{"left":"$class eq \"a\"","right":"not $type =~ / of /","op":"and","type":"and_3"}],[963,{"type":"and_3","op":"and","right":"not $type =~ / of /","left":"$class eq \"h\""}],[971,{"type":"or_3","op":"or","right":"&Perlscan::in_conditional($k)","left":"is_referenced($ValClass[$k], $name, $k + 2)"}],[976,{"op":"or","type":"or_3","left":"$type eq \"I\"","right":"$type eq \"F\""}],[937,{"op":"and","type":"and_3","left":"$ValClass[$k + 1] eq \"~\"","right":"$k + 2 <= $#ValClass"}],[937,{"left":"$ValClass[$k + 1] eq \"~\" and $k + 2 <= $#ValClass","right":"$ValClass[$k + 2] eq \"f\"","op":"and","type":"and_3"}],[937,{"type":"or_3","op":"||","right":"$ValPerl[$k + 2] eq 'tr'","left":"$ValPerl[$k + 2] eq 're'"}],[937,{"left":"$ValClass[$k + 1] eq \"~\" and $k + 2 <= $#ValClass and $ValClass[$k + 2] eq \"f\"","right":"$ValPerl[$k + 2] eq 're' || $ValPerl[$k + 2] eq 'tr'","op":"and","type":"and_3"}],[937,{"left":"$ValClass[$k + 1] eq \"~\" and $k + 2 <= $#ValClass and $ValClass[$k + 2] eq \"f\" and $ValPerl[$k + 2] eq 're' || $ValPerl[$k + 2] eq 'tr'","right":"index($ValPy[$k + 2], \"re.R\") == -1","op":"and","type":"and_3"}],[990,{"left":"$m != -1","right":"$ValPerl[$m] eq \")\"","op":"and","type":"and_3"}],[990,{"op":"and","type":"and_3","left":"$m != -1 and $ValPerl[$m] eq \")\"","right":"$m < $#ValClass"}],[990,{"left":"$m != -1 and $ValPerl[$m] eq \")\" and $m < $#ValClass","right":"$ValClass[$m + 1] eq \"=\"","op":"and","type":"and_3"}],[1001,{"right":"$k == 2 && $ValClass[1] eq 't'","left":"$k == 1","type":"or_3","op":"||"}],[1001,{"right":"$ValClass[0] eq \"c\"","left":"$k == 1 || $k == 2 && $ValClass[1] eq 't'","type":"and_3","op":"and"}],[1001,{"op":"and","type":"and_3","left":"$k == 1 || $k == 2 && $ValClass[1] eq 't' and $ValClass[0] eq \"c\"","right":"$ValPy[0] eq \"for\""}],[1003,{"left":"$type eq \"a\"","right":"$type eq \"h\"","op":"or","type":"or_3"}],[1005,{"left":"$k == 1","right":"&Perlscan::in_conditional($k)","op":"and","type":"and_3"}],[1001,{"op":"and","type":"and_3","left":"$k >= 1","right":"$ValClass[$k - 1] eq \"f\""}],[1001,{"left":"$ValPerl[$k - 1] eq 'open'","right":"$ValPerl[$k - 1] eq 'opendir'","op":"||","type":"or_3"}],[1001,{"type":"and_3","op":"and","right":"$ValPerl[$k - 1] eq 'open' || $ValPerl[$k - 1] eq 'opendir'","left":"$k >= 1 and $ValClass[$k - 1] eq \"f\""}],[1001,{"type":"and_3","op":"and","right":"$ValClass[$k - 1] eq \"(\"","left":"$k >= 2"}],[1001,{"op":"and","type":"and_3","left":"$k >= 2 and $ValClass[$k - 1] eq \"(\"","right":"$ValClass[$k - 2] eq \"f\""}],[1001,{"type":"or_3","op":"||","right":"$ValPerl[$k - 2] eq 'opendir'","left":"$ValPerl[$k - 2] eq 'open'"}],[1001,{"op":"and","type":"and_3","left":"$k >= 2 and $ValClass[$k - 1] eq \"(\" and $ValClass[$k - 2] eq \"f\"","right":"$ValPerl[$k - 2] eq 'open' || $ValPerl[$k - 2] eq 'opendir'"}],[1001,{"op":"or","type":"or_3","left":"$k >= 1 and $ValClass[$k - 1] eq \"f\" and $ValPerl[$k - 1] eq 'open' || $ValPerl[$k - 1] eq 'opendir'","right":"$k >= 2 and $ValClass[$k - 1] eq \"(\" and $ValClass[$k - 2] eq \"f\" and $ValPerl[$k - 2] eq 'open' || $ValPerl[$k - 2] eq 'opendir'"}],[1001,{"left":"$k >= 3","right":"$ValClass[$k - 1] eq \"t\"","op":"and","type":"and_3"}],[1001,{"right":"$ValClass[$k - 2] eq \"(\"","left":"$k >= 3 and $ValClass[$k - 1] eq \"t\"","type":"and_3","op":"and"}],[1001,{"left":"$k >= 3 and $ValClass[$k - 1] eq \"t\" and $ValClass[$k - 2] eq \"(\"","right":"$ValClass[$k - 3] eq \"f\"","op":"and","type":"and_3"}],[1001,{"op":"||","type":"or_3","left":"$ValPerl[$k - 3] eq 'open'","right":"$ValPerl[$k - 3] eq 'opendir'"}],[1001,{"op":"and","type":"and_3","left":"$k >= 3 and $ValClass[$k - 1] eq \"t\" and $ValClass[$k - 2] eq \"(\" and $ValClass[$k - 3] eq \"f\"","right":"$ValPerl[$k - 3] eq 'open' || $ValPerl[$k - 3] eq 'opendir'"}],[1001,{"type":"or_3","op":"or","right":"$k >= 3 and $ValClass[$k - 1] eq \"t\" and $ValClass[$k - 2] eq \"(\" and $ValClass[$k - 3] eq \"f\" and $ValPerl[$k - 3] eq 'open' || $ValPerl[$k - 3] eq 'opendir'","left":"$k >= 1 and $ValClass[$k - 1] eq \"f\" and $ValPerl[$k - 1] eq 'open' || $ValPerl[$k - 1] eq 'opendir' or $k >= 2 and $ValClass[$k - 1] eq \"(\" and $ValClass[$k - 2] eq \"f\" and $ValPerl[$k - 2] eq 'open' || $ValPerl[$k - 2] eq 'opendir'"}],[1010,{"left":"$ValClass[$k - 1] eq \"t\"","right":"not &Perlscan::in_conditional($k)","op":"or","type":"or_3"}],[1001,{"op":"||","type":"or_3","left":"$ValPerl[0] eq 'my' || $ValPerl[0] eq 'local'","right":"$ValPerl[0] eq 'state'"}],[1001,{"op":"and","type":"and_3","left":"$ValClass[0] eq \"t\"","right":"$ValPerl[0] eq 'my' || $ValPerl[0] eq 'local' || $ValPerl[0] eq 'state'"}],[1001,{"type":"and_3","op":"and","right":"being_declared_here($k)","left":"$ValClass[0] eq \"t\" and $ValPerl[0] eq 'my' || $ValPerl[0] eq 'local' || $ValPerl[0] eq 'state'"}],[1001,{"type":"and_3","op":"and","right":"not exists $initialized{$CurSub}{$name}","left":"$ValClass[0] eq \"t\" and $ValPerl[0] eq 'my' || $ValPerl[0] eq 'local' || $ValPerl[0] eq 'state' and being_declared_here($k)"}],[1001,{"left":"$ValClass[0] eq \"t\" and $ValPerl[0] eq 'my' || $ValPerl[0] eq 'local' || $ValPerl[0] eq 'state' and being_declared_here($k) and not exists $initialized{$CurSub}{$name}","right":"not &Perlscan::in_conditional($k)","op":"and","type":"and_3"}],[1021,{"right":"$k + 1 <= $#ValClass","left":"$class eq \"s\"","type":"and_3","op":"and"}],[1021,{"left":"$class eq \"s\" and $k + 1 <= $#ValClass","right":"$ValClass[$k + 1] eq \"(\"","op":"and","type":"and_3"}],[1021,{"type":"and_3","op":"and","right":"$ValPerl[$k + 1] ne \"(\"","left":"$class eq \"s\" and $k + 1 <= $#ValClass and $ValClass[$k + 1] eq \"(\""}],[1046,{"type":"and_3","op":"and","right":"exists $VarType{$name}{$CurSub}","left":"exists $VarType{$name}"}],[1021,{"right":"$class eq \"h\"","left":"$class eq \"a\"","type":"or_3","op":"or"}],[1066,{"left":"$k - 1 >= 0","right":"$ValClass[$k - 1] eq \"f\"","op":"and","type":"and_3"}],[1066,{"left":"$ValPerl[$k - 1] eq 'push'","right":"$ValPerl[$k - 1] eq 'unshift'","op":"||","type":"or_3"}],[1066,{"op":"and","type":"and_3","left":"$k - 1 >= 0 and $ValClass[$k - 1] eq \"f\"","right":"$ValPerl[$k - 1] eq 'push' || $ValPerl[$k - 1] eq 'unshift'"}],[1066,{"type":"and_3","op":"and","right":"$k + 2 <= $#ValClass","left":"$k - 1 >= 0 and $ValClass[$k - 1] eq \"f\" and $ValPerl[$k - 1] eq 'push' || $ValPerl[$k - 1] eq 'unshift'"}],[1074,{"right":"exists $VarType{$name}{$CurSub}","left":"exists $VarType{$name}","type":"and_3","op":"&&"}],[1021,{"type":"and_3","op":"and","right":"$typ ne \"s\"","left":"$typ = expr_type($k, $k, $CurSub)"}],[1106,{"op":"and","type":"and_3","left":"$ValClass[$i] eq $class","right":"$ValPy[$i] eq $name"}],[1123,{"op":"and","type":"and_3","left":"$prev eq \"(\"","right":"$next eq \")\""}],[1150,{"type":"and_3","op":"and","right":"$ValClass[$j] eq \",\"","left":"$j <= $k"}],[1163,{"left":"defined $ty","right":"not $ty =~ /[ah]/","op":"and","type":"and_3"}],[1173,{"type":"and_3","op":"and","right":"$ValClass[$k - 1] eq \"(\"","left":"$k - 2 >= 0"}],[1179,{"left":"$k + 2 <= $#VarClass","right":"$ValClass[$k + 1] eq \")\"","op":"and","type":"and_3"}],[1207,{"type":"and_3","op":"and","right":"$ValClass[$i - 1] eq \"i\"","left":"$i - 1 >= 0"}],[1206,{"op":"and","type":"and_3","left":"$ValClass[$i] eq \"i\"","right":"$LocalSub{$ValPy[$i]}"}],[1206,{"op":"and","type":"and_3","left":"$ValClass[$i] eq \"=\"","right":"$ValPy[$i] ne \":=\""}],[1305,{"left":"$i - 1 >= 0","right":"$ValClass[$i - 1] eq \"f\"","op":"and","type":"and_3"}],[1304,{"right":"$i != $k","left":"$ValClass[$i] eq \"f\"","type":"and_3","op":"and"}],[1320,{"type":"or_3","op":"or","right":"$ValClass[$i] ne \"f\"","left":"$i < 0"}],[1323,{"right":"$ValPerl[$i + 1] eq \"(\"","left":"$ValClass[$i + 1] eq \"(\"","type":"and_3","op":"and"}],[1336,{"op":"and","type":"and_3","left":"$j <= $k","right":"$ValClass[$j] eq \",\""}],[1340,{"op":"and","type":"and_3","left":"$ValClass[$j] eq \")\"","right":"$ValPerl[$j] eq \"}\""}],[1346,{"right":"$main::debug > 3","left":"not $quiet","type":"and_3","op":"and"}],[1381,{"left":"$c eq \"H\"","right":"substr($ft, $i + 1, 1) eq \"?\"","op":"and","type":"and_3"}],[1388,{"right":"substr($ft, $i + 1, 1) eq \"?\"","left":"$return_optional","type":"and_3","op":"and"}],[1432,{"right":"$otype eq 'h'","left":"$otype eq 'a'","type":"or_3","op":"||"}],[1432,{"left":"$otype eq 'a' || $otype eq 'h'","right":"$type =~ /$otype of/","op":"and","type":"and_3"}],[1435,{"left":"$type eq 'a'","right":"$type eq 'h'","op":"||","type":"or_3"}],[1435,{"right":"$otype =~ /$type of/","left":"$type eq 'a' || $type eq 'h'","type":"and_3","op":"and"}],[1438,{"op":"and","type":"and_3","left":"$otype =~ /[ah] of/","right":"$type =~ /[ah] of/"}],[1438,{"type":"and_3","op":"and","right":"$type =~ /[NIFSH]/","left":"$otype eq \"s\""}],[1438,{"type":"and_3","op":"and","right":"$type =~ /[IF]/","left":"$otype eq \"N\""}],[1438,{"left":"$type eq \"N\"","right":"$otype =~ /[IF]/","op":"and","type":"and_3"}],[1438,{"right":"$otype =~ /[IF]/","left":"$type =~ /[IF]/","type":"and_3","op":"and"}],[1489,{"op":"and","type":"and_3","left":"$ValClass[$p] eq \"c\"","right":"$p != 0"}],[1499,{"right":"$ep + 1 <= $e","left":"$ep > $k","type":"and_3","op":"and"}],[1497,{"op":"and","type":"and_3","left":"$ValClass[$k + 1] eq \"f\"","right":"func_type($ValPerl[$k + 1], $ValPy[$k + 1]) eq \"I\""}],[1497,{"left":"$ValClass[$k + 1] eq \"i\"","right":"$ValClass[$k + 1] eq \"f\" and func_type($ValPerl[$k + 1], $ValPy[$k + 1]) eq \"I\"","op":"or","type":"or_3"}],[1496,{"type":"and_3","op":"and","right":"$ValClass[$k + 1] eq \"(\"","left":"$ValPerl[$k] eq \"_assign_global\""}],[1517,{"type":"and_3","op":"and","right":"$close > $k","left":"$comma > $k"}],[1530,{"left":"exists $VarType{$ValPy[$k]}","right":"exists $VarType{$ValPy[$k]}{$CurSub}","op":"and","type":"and_3"}],[1548,{"op":"and","type":"and_3","left":"exists $VarType{$ValPy[$k]}","right":"exists $VarType{$ValPy[$k]}{$CurSub}"}],[1559,{"left":"exists $VarType{$ValPy[$k]}","right":"exists $VarType{$ValPy[$k]}{$CurSub}","op":"and","type":"and_3"}],[1524,{"type":"or_3","op":"or","right":"$class eq \"x\"","left":"$class eq \"\\\"\""}],[1577,{"op":"and","type":"and_3","left":"$k - 2 >= 0","right":"$ValClass[$k - 2] eq \"a\""}],[1577,{"left":"$k - 2 >= 0 and $ValClass[$k - 2] eq \"a\"","right":"$ValClass[$k - 1] eq \"=\"","op":"and","type":"and_3"}],[1576,{"type":"and_3","op":"and","right":"exists $VarType{$name}{'__main__'}","left":"exists $VarType{$name}"}],[1576,{"type":"or_3","op":"or","right":"exists $VarType{$name} and exists $VarType{$name}{'__main__'}","left":"$LocalSub{$name}"}],[1580,{"right":"exists $VarType{$name}{'__main__'}","left":"exists $VarType{$name}","type":"and_3","op":"and"}],[1494,{"right":"$ValClass[$k + 1] eq \"=\"","left":"$k + 2 <= $e","type":"and_3","op":"and"}],[1596,{"right":"$ValClass[$k - 2] eq \"a\"","left":"$k - 2 >= 0","type":"and_3","op":"and"}],[1596,{"left":"$k - 2 >= 0 and $ValClass[$k - 2] eq \"a\"","right":"$ValClass[$k - 1] eq \"=\"","op":"and","type":"and_3"}],[1595,{"op":"and","type":"and_3","left":"exists $VarType{$name}","right":"exists $VarType{$name}{'__main__'}"}],[1595,{"left":"$LocalSub{$name}","right":"exists $VarType{$name} and exists $VarType{$name}{'__main__'}","op":"or","type":"or_3"}],[1599,{"right":"exists $VarType{$name}{'__main__'}","left":"exists $VarType{$name}","type":"and_3","op":"and"}],[1595,{"type":"and_3","op":"and","right":"$ValClass[$k + 1] eq \"(\"","left":"$k + 1 <= $#ValClass"}],[1602,{"left":"exists $VarType{$name}","right":"exists $VarType{$name}{'__main__'}","op":"and","type":"and_3"}],[1595,{"left":"$k + 1 <= $#ValClass","right":"$ValClass[$k + 1] eq \"A\"","op":"and","type":"and_3"}],[1610,{"left":"$m != -1","right":"$m <= $e","op":"and","type":"and_3"}],[1611,{"left":"$ValClass[$m] eq \"+\"","right":"$ValClass[$m] eq \"-\"","op":"or","type":"or_3"}],[1611,{"left":"$ValClass[$m] eq \"+\" or $ValClass[$m] eq \"-\"","right":"$ValClass[$m] eq \"*\"","op":"or","type":"or_3"}],[1625,{"type":"or_3","op":"or","right":"$result eq \"F\"","left":"$result eq \"I\""}],[1610,{"left":"$class eq \"s\"","right":"$k + 1 <= $#ValClass","op":"and","type":"and_3"}],[1610,{"op":"and","type":"and_3","left":"$class eq \"s\" and $k + 1 <= $#ValClass","right":"$ValClass[$k + 1] eq \"(\""}],[1647,{"left":"exists $VarType{$name}","right":"exists $VarType{$name}{$CurSub}","op":"and","type":"and_3"}],[1647,{"right":"index($VarType{$name}{$CurSub}, \" of \") > 0","left":"exists $VarType{$name} and exists $VarType{$name}{$CurSub}","type":"and_3","op":"and"}],[1610,{"type":"and_3","op":"and","right":"$k + 2 <= $#ValClass","left":"$class eq \"s\""}],[1610,{"type":"and_3","op":"and","right":"$ValClass[$k + 1] eq \"~\"","left":"$class eq \"s\" and $k + 2 <= $#ValClass"}],[1610,{"left":"$class eq \"s\" and $k + 2 <= $#ValClass and $ValClass[$k + 1] eq \"~\"","right":"$ValClass[$k + 2] eq \"q\"","op":"and","type":"and_3"}],[1610,{"op":"and","type":"and_3","left":"$class eq \"s\" and $k + 2 <= $#ValClass and $ValClass[$k + 1] eq \"~\" and $ValClass[$k + 2] eq \"q\"","right":"capturing_pattern($ValPerl[$k + 2])"}],[1610,{"op":"and","type":"and_3","left":"$class eq \"\\\"\"","right":"$k + 2 <= $#ValClass"}],[1610,{"left":"$class eq \"\\\"\" and $k + 2 <= $#ValClass","right":"$ValClass[$k + 1] eq \"A\"","op":"and","type":"and_3"}],[1671,{"type":"and_3","op":"and","right":"$m + 1 < $#VarClass","left":"$m > 0"}],[1671,{"op":"and","type":"and_3","left":"$m > 0 and $m + 1 < $#VarClass","right":"$VarClass[$m + 1] eq \"=\""}],[1680,{"op":"and","type":"and_3","left":"$n != -1","right":"$ValPerl[$n] eq \"=>\""}],[1686,{"left":"$n < 0","right":"$ValPerl[$n] ne \"=>\"","op":"or","type":"or_3"}],[1755,{"left":"index(\"IF\", $t1) != -1","right":"index(\"IF\", $t2) != -1","op":"and","type":"and_3"}],[1755,{"right":"index(\"IF\", $t2) != -1","left":"$t1 eq \"N\"","type":"and_3","op":"and"}],[1755,{"op":"and","type":"and_3","left":"$t2 eq \"N\"","right":"index(\"IF\", $t1) != -1"}],[1755,{"right":"index(\"IFN\", $t2) != -1","left":"$t1 eq \"s\"","type":"and_3","op":"and"}],[1755,{"type":"and_3","op":"and","right":"index(\"IFN\", $t1) != -1","left":"$t2 eq \"s\""}],[1902,{"op":"and","type":"and_3","left":"$s eq $t","right":"$balance < 0"}],[1901,{"left":"$s eq $t","right":"$balance <= 0","op":"and","type":"and_3"}],[1901,{"type":"and_3","op":"and","right":"$s eq $t","left":"$t eq \"(\""}],[1901,{"type":"and_3","op":"and","right":"$balance == 1","left":"$t eq \"(\" and $s eq $t"}],[1930,{"right":"$balance == 1","left":"$s eq \"(\"","type":"and_3","op":"and"}],[1961,{"type":"or_3","op":"or","right":"$pos > $#ValClass","left":"$pos < 0"}],[1963,{"type":"and_3","op":"and","right":"substr($ValPy[$pos], 0, 4) ne \"len(\"","left":"$ValClass[$pos] =~ /[ah]/"}],[1963,{"left":"$ValClass[$pos] eq \"f\"","right":"exists $SPECIAL_FUNCTION_MAPPINGS{$ValPerl[$pos]}","op":"and","type":"and_3"}],[1963,{"type":"and_3","op":"and","right":"$ValPerl[$pos] eq \"(\"","left":"$ValClass[$pos] eq \"(\""}],[1963,{"op":"and","type":"and_3","left":"$ValClass[$pos] eq \"(\" and $ValPerl[$pos] eq \"(\"","right":"$pos + 2 <= $#ValClass"}],[1963,{"right":"$ValClass[$pos + 1] eq \")\"","left":"$ValClass[$pos] eq \"(\" and $ValPerl[$pos] eq \"(\" and $pos + 2 <= $#ValClass","type":"and_3","op":"and"}],[1963,{"right":"$ValClass[$pos + 2] eq \"=\"","left":"$ValClass[$pos] eq \"(\" and $ValPerl[$pos] eq \"(\" and $pos + 2 <= $#ValClass and $ValClass[$pos + 1] eq \")\"","type":"and_3","op":"and"}],[2011,{"op":"or","type":"or_3","left":"$TokenStr eq \"s=a\"","right":"$TokenStr eq \"s=h\""}],[2011,{"op":"or","type":"or_3","left":"$TokenStr eq \"s=a\" or $TokenStr eq \"s=h\"","right":"$TokenStr =~ /^s=f/"}],[2011,{"right":"$TokenStr =~ /^s=\\(\\)=/","left":"$TokenStr eq \"s=a\" or $TokenStr eq \"s=h\" or $TokenStr =~ /^s=f/","type":"or_3","op":"or"}],[2011,{"op":"or","type":"or_3","left":"$TokenStr eq \"ts=a\"","right":"$TokenStr eq \"ts=h\""}],[2011,{"op":"or","type":"or_3","left":"$TokenStr eq \"ts=a\" or $TokenStr eq \"ts=h\"","right":"$TokenStr =~ /^ts=f/"}],[2011,{"type":"or_3","op":"or","right":"$TokenStr =~ /^ts=\\(\\)=/","left":"$TokenStr eq \"ts=a\" or $TokenStr eq \"ts=h\" or $TokenStr =~ /^ts=f/"}],[2011,{"right":"$ValClass[1] eq \"(\"","left":"$#ValClass > 5","type":"and_3","op":"and"}],[2011,{"left":"$#ValClass > 5 and $ValClass[1] eq \"(\"","right":"$ValClass[0] eq \"s\"","op":"and","type":"and_3"}],[2017,{"type":"and_3","op":"and","right":"$ValClass[$j + 1] eq \"=\"","left":"$j + 2 <= $#ValClass"}],[2017,{"op":"and","type":"and_3","left":"$j + 2 <= $#ValClass and $ValClass[$j + 1] eq \"=\"","right":"$ValClass[$j + 2] =~ /[ahf]/"}],[2022,{"type":"or_3","op":"or","right":"$ValClass[0] eq \"C\"","left":"$ValClass[0] eq \"c\""}],[2023,{"type":"or_3","op":"or","right":"$TokenStr =~ /^[cC]\\(s=\\(\\)=/","left":"$TokenStr =~ /^[cC]\\(s=[ahf]/"}],[2023,{"op":"and","type":"and_3","left":"$TokenStr =~ /^[cC]\\(f\\(s=[ahf]/","right":"$ValPerl[2] eq \"defined\""}],[2023,{"op":"and","type":"and_3","left":"$#ValClass > 7","right":"$ValClass[3] eq \"(\""}],[2023,{"type":"and_3","op":"and","right":"$ValClass[2] eq \"s\"","left":"$#ValClass > 7 and $ValClass[3] eq \"(\""}],[2029,{"left":"$j + 2 <= $#ValClass","right":"$ValClass[$j + 1] eq \"=\"","op":"and","type":"and_3"}],[2029,{"type":"and_3","op":"and","right":"$ValClass[$j + 2] =~ /[ahf]/","left":"$j + 2 <= $#ValClass and $ValClass[$j + 1] eq \"=\""}],[2037,{"right":"$ValPerl[0] =~ /if|while|until/","left":"$ValClass[0] eq \"c\"","type":"and_3","op":"and"}],[2037,{"type":"and_3","op":"and","right":"$ValClass[1] ne \"a\"","left":"$ValClass[0] eq \"c\" and $ValPerl[0] =~ /if|while|until/"}],[2037,{"right":"$ValClass[2] ne \"a\"","left":"$ValClass[1] eq \"(\"","type":"and_3","op":"and"}],[2037,{"type":"and_3","op":"and","right":"($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\")","left":"$ValClass[0] eq \"c\" and $ValPerl[0] =~ /if|while|until/ and $ValClass[1] ne \"a\""}],[2037,{"left":"$ValClass[0] eq \"C\"","right":"$ValPerl[0] eq \"elsif\"","op":"and","type":"and_3"}],[2037,{"op":"and","type":"and_3","left":"$ValClass[0] eq \"C\" and $ValPerl[0] eq \"elsif\"","right":"$ValClass[1] ne \"a\""}],[2037,{"left":"$ValClass[1] eq \"(\"","right":"$ValClass[2] ne \"a\"","op":"and","type":"and_3"}],[2037,{"op":"and","type":"and_3","left":"$ValClass[0] eq \"C\" and $ValPerl[0] eq \"elsif\" and $ValClass[1] ne \"a\"","right":"($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\")"}],[2037,{"right":"$ValClass[0] eq \"C\" and $ValPerl[0] eq \"elsif\" and $ValClass[1] ne \"a\" and ($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\")","left":"$ValClass[0] eq \"c\" and $ValPerl[0] =~ /if|while|until/ and $ValClass[1] ne \"a\" and ($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\")","type":"or_3","op":"or"}],[2037,{"right":"$ValClass[0] eq \"s\"","left":"$#ValClass > 1","type":"and_3","op":"and"}],[2037,{"right":"$ValClass[1] eq \"=\"","left":"$#ValClass > 1 and $ValClass[0] eq \"s\"","type":"and_3","op":"and"}],[2037,{"right":"$#ValClass > 1 and $ValClass[0] eq \"s\" and $ValClass[1] eq \"=\"","left":"$ValClass[0] eq \"c\" and $ValPerl[0] =~ /if|while|until/ and $ValClass[1] ne \"a\" and ($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\") or $ValClass[0] eq \"C\" and $ValPerl[0] eq \"elsif\" and $ValClass[1] ne \"a\" and ($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\")","type":"or_3","op":"or"}],[2037,{"type":"and_3","op":"and","right":"$ValClass[0] eq \"t\"","left":"$#ValClass > 2"}],[2037,{"type":"and_3","op":"and","right":"$ValClass[1] eq \"s\"","left":"$#ValClass > 2 and $ValClass[0] eq \"t\""}],[2037,{"op":"and","type":"and_3","left":"$#ValClass > 2 and $ValClass[0] eq \"t\" and $ValClass[1] eq \"s\"","right":"$ValClass[2] eq \"=\""}],[2037,{"right":"$#ValClass > 2 and $ValClass[0] eq \"t\" and $ValClass[1] eq \"s\" and $ValClass[2] eq \"=\"","left":"$ValClass[0] eq \"c\" and $ValPerl[0] =~ /if|while|until/ and $ValClass[1] ne \"a\" and ($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\") or $ValClass[0] eq \"C\" and $ValPerl[0] eq \"elsif\" and $ValClass[1] ne \"a\" and ($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\") or $#ValClass > 1 and $ValClass[0] eq \"s\" and $ValClass[1] eq \"=\"","type":"or_3","op":"or"}],[2037,{"type":"and_3","op":"and","right":"$ValClass[0] eq \"s\"","left":"$#ValClass > 3"}],[2037,{"left":"$#ValClass > 3 and $ValClass[0] eq \"s\"","right":"$ValClass[1] eq \"(\"","op":"and","type":"and_3"}],[2037,{"op":"and","type":"and_3","left":"$#ValClass > 3 and $ValClass[0] eq \"s\" and $ValClass[1] eq \"(\"","right":"($j = &main::end_of_variable(0) + 1) < $#ValClass"}],[2037,{"type":"and_3","op":"and","right":"$ValClass[$j] eq \"=\"","left":"$#ValClass > 3 and $ValClass[0] eq \"s\" and $ValClass[1] eq \"(\" and ($j = &main::end_of_variable(0) + 1) < $#ValClass"}],[2037,{"left":"$ValClass[0] eq \"c\" and $ValPerl[0] =~ /if|while|until/ and $ValClass[1] ne \"a\" and ($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\") or $ValClass[0] eq \"C\" and $ValPerl[0] eq \"elsif\" and $ValClass[1] ne \"a\" and ($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\") or $#ValClass > 1 and $ValClass[0] eq \"s\" and $ValClass[1] eq \"=\" or $#ValClass > 2 and $ValClass[0] eq \"t\" and $ValClass[1] eq \"s\" and $ValClass[2] eq \"=\"","right":"$#ValClass > 3 and $ValClass[0] eq \"s\" and $ValClass[1] eq \"(\" and ($j = &main::end_of_variable(0) + 1) < $#ValClass and $ValClass[$j] eq \"=\"","op":"or","type":"or_3"}],[2044,{"op":"and","type":"and_3","left":"$ValClass[$j] =~ /[cC=]/","right":"$j + 1 <= $#ValClass"}],[2044,{"type":"and_3","op":"and","right":"$ValClass[$j + 1] eq \"(\"","left":"$ValClass[$j] =~ /[cC=]/ and $j + 1 <= $#ValClass"}],[2044,{"right":"$ValPerl[$j + 1] eq \"(\"","left":"$ValClass[$j] =~ /[cC=]/ and $j + 1 <= $#ValClass and $ValClass[$j + 1] eq \"(\"","type":"and_3","op":"and"}],[2048,{"right":"$ValClass[$sub_or_function + 1] ne \"(\"","left":"$sub_or_function != -1","type":"and_3","op":"and"}],[2060,{"right":"$found_comma","left":"$ValClass[$end_pos + 1] eq \")\"","type":"and_3","op":"and"}],[2079,{"right":"$i <= $in_function_until","left":"$in_function_until != -1","type":"and_3","op":"and"}],[2079,{"right":"$ValClass[$i] ne \",\"","left":"$in_function_until != -1 and $i <= $in_function_until","type":"and_3","op":"and"}],[2084,{"right":"$ValClass[$j + 1] eq \"=\"","left":"$j + 2 <= $#ValClass","type":"and_3","op":"and"}],[2097,{"right":"$main::debug >= 5","left":"not defined $fname","type":"and_3","op":"and"}],[2105,{"left":"defined $arg_type","right":"$arg_type =~ /[sSIFN]/","op":"and","type":"and_3"}],[2105,{"type":"and_3","op":"and","right":"not $next_arg_type =~ /^[sSIFN]$/","left":"defined $arg_type and $arg_type =~ /[sSIFN]/"}],[2112,{"type":"and_3","op":"and","right":"$i == $last_special_function_end + 1","left":"$last_special_function != -1"}],[2112,{"op":"and","type":"and_3","left":"$ValClass[$i - 2] ne \"f\"","right":"$ValClass[$i - 2] ne \"\\\\\""}],[2112,{"left":"$i - 1 == 0","right":"$ValClass[$i - 2] ne \"f\" and $ValClass[$i - 2] ne \"\\\\\"","op":"or","type":"or_3"}],[2111,{"right":"($did_something & 2) != 2","left":"$ValPerl[$i] eq \"scalar\"","type":"and_3","op":"and"}],[2111,{"type":"and_3","op":"and","right":"($ValPerl[$i] eq \"scalar\" and ($did_something & 2) != 2)","left":"$ValClass[$i] eq \"f\""}],[2126,{"type":"and_3","op":"and","right":"apply_scalar_context($i + 2) == 1","left":"$ValClass[$i + 1] eq \"(\""}],[2149,{"right":"$j > $in_function_until","left":"$j != -1","type":"and_3","op":"and"}],[2160,{"type":"and_3","op":"and","right":"$did_something","left":"$main::debug"}],[2171,{"op":"and","type":"and_3","left":"$ValClass[$pos + 1] eq \"(\"","right":"$ValPerl[$pos + 1] eq \"(\""}],[2191,{"right":"$ValClass[$pos - 1] eq \"(\"","left":"$pos != 0","type":"and_3","op":"and"}],[2195,{"type":"and_3","op":"and","right":"$ep < $end_pos","left":"$ep > 0"}],[2191,{"left":"$pos >= 2","right":"$ValClass[$pos - 1] eq \"!\"","op":"and","type":"and_3"}],[2191,{"left":"$pos >= 2 and $ValClass[$pos - 1] eq \"!\"","right":"$ValClass[$pos - 2] eq \"(\"","op":"and","type":"and_3"}],[2191,{"type":"and_3","op":"and","right":"$ValPerl[$pos - 1] eq \"?\"","left":"$pos != 0"}],[2206,{"right":"$ValPerl[$pos] eq 'sort'","left":"$ValPerl[$pos] eq 'grep' || $ValPerl[$pos] eq 'map'","type":"or_3","op":"||"}],[2206,{"left":"$ValPerl[$pos] eq 'grep' || $ValPerl[$pos] eq 'map' || $ValPerl[$pos] eq 'sort'","right":"$ValPerl[$pos + 1] eq \"{\"","op":"and","type":"and_3"}],[2231,{"op":"and","type":"and_3","left":"$comma != -1","right":"$ValClass[$comma] eq \",\""}],[2248,{"type":"and_3","op":"and","right":"$ValClass[$j] =~ /[isf]/","left":"$t eq \"H\""}],[2248,{"op":"||","type":"or_3","left":"$j == 0","right":"$ValClass[$j - 1] ne ','"}],[2248,{"right":"$j == 0 || $ValClass[$j - 1] ne ','","left":"$optional","type":"and_3","op":"and"}],[2248,{"type":"and_3","op":"and","right":"index(\"^*~/%.HI>&|0or?:=,A\", $ValClass[$j]) != -1","left":"$optional and $j == 0 || $ValClass[$j - 1] ne ','"}],[2248,{"op":"and","type":"and_3","left":"not $optional","right":"$comma != -1"}],[2248,{"op":"and","type":"and_3","left":"not $optional and $comma != -1","right":"$ValClass[$comma] ne \",\""}],[2248,{"right":"substr($f_type, $t_pos, 1) ne \":\"","left":"not $optional and $comma != -1 and $ValClass[$comma] ne \",\"","type":"and_3","op":"and"}],[2248,{"left":"not $optional and $comma != -1 and $ValClass[$comma] ne \",\" and substr($f_type, $t_pos, 1) ne \":\"","right":"substr($f_type, $t_pos + 1, 1) ne \"?\"","op":"and","type":"and_3"}],[2266,{"op":"and","type":"and_3","left":"$comma >= 0","right":"$ValClass[$comma] ne \",\""}],[2266,{"type":"or_3","op":"or","right":"$comma >= 0 and $ValClass[$comma] ne \",\"","left":"$comma < 0"}],[2299,{"left":"$main::debug > 2","right":"$PassNo != PASS_0()","op":"and","type":"and_3"}],[2320,{"op":"and","type":"and_3","left":"$main::debug > 2","right":"$PassNo != PASS_0()"}],[2309,{"type":"and_3","op":"and","right":"length $line == $len_eof","left":"substr($line, 0, length $_[0]) eq $_[0]"}],[2309,{"op":"and","type":"and_3","left":"$_[1]","right":"substr($line, $spaces, length $_[0]) eq $_[0]"}],[2309,{"type":"and_3","op":"and","right":"length $line == $spaces + $len_eof","left":"$_[1] and substr($line, $spaces, length $_[0]) eq $_[0]"}],[2309,{"left":"substr($line, 0, length $_[0]) eq $_[0] and length $line == $len_eof","right":"$_[1] and substr($line, $spaces, length $_[0]) eq $_[0] and length $line == $spaces + $len_eof","op":"or","type":"or_3"}],[2325,{"op":"and","type":"and_3","left":"$main::debug > 2","right":"$PassNo != PASS_0()"}],[2330,{"left":"$main::debug > 2","right":"$PassNo != PASS_0()","op":"and","type":"and_3"}],[2354,{"type":"and_3","op":"and","right":"length do {\n\tBEGIN {${^WARNING_BITS} = \"\\x55\\x55\\x55\\x51\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\"}\n\u000b$_[0] & \"\"\n}","left":"scalar @_ == 1"}],[2377,{"op":"and","type":"and_3","left":"scalar @_ == 1","right":"$_[0] eq \"\""}],[2426,{"op":"and","type":"and_3","left":"$PassNo == PASS_2()","right":"&Softpano::get_verbosity() >= 1"}],[2437,{"left":"not defined $line","right":"$main::debug","op":"and","type":"and_3"}],[2444,{"left":"length $line == 0","right":"$line =~ /^\\s*$/","op":"or","type":"or_3"}],[2460,{"type":"or_3","op":"||","right":"$PassNo == PASS_1() && !$pass_0_ran","left":"$PassNo == PASS_0()"}],[2460,{"right":"$line =~ /#\\s*pragma\\s*pythonizer/","left":"$PassNo == PASS_0() || $PassNo == PASS_1() && !$pass_0_ran","type":"and_3","op":"and"}],[2444,{"right":"$line =~ /^__END__/","left":"$line =~ /^__DATA__/","type":"or_3","op":"or"}],[2444,{"left":"substr($line, 0, 1) eq \"=\"","right":"substr($line, 1, 1) =~ /\\w/","op":"and","type":"and_3"}],[2574,{"type":"and_3","op":"and","right":"$il ne $IntactLine","left":"$il"}],[2604,{"left":"defined $main::TrStatus","right":"$main::TrStatus < 0","op":"&&","type":"and_3"}],[2615,{"type":"and_3","op":"&&","right":"$line","left":"scalar @_ > 0"}],[2747,{"op":"and","type":"and_3","left":"$delta == 0","right":"scalar @_ == 1"}],[2767,{"type":"and_3","op":"and","right":"$_[0] == 0","left":"$delta == 0"}],[2827,{"right":"not $insertion_point","left":"$line =~ /^pass # LAST_HEADER/","type":"and_3","op":"and"}],[2829,{"op":"or","type":"or_3","left":"$line =~ /^def ([A-Za-z0-9_]+)/","right":"$line =~ /^class ([A-Za-z0-9_]+)/"}],[2836,{"left":"$lines[$i - 1] =~ /^\\s*$/","right":"$lines[$i - 1] =~ /^\\s*#/","op":"or","type":"or_3"}],[2836,{"right":"$lines[$i - 1] =~ /^@/","left":"$lines[$i - 1] =~ /^\\s*$/ or $lines[$i - 1] =~ /^\\s*#/","type":"or_3","op":"or"}],[2829,{"left":"$line =~ /^_init_package\\(/","right":"$line =~ /^$PERLLIB\\.init_package\\(/","op":"or","type":"or_3"}],[2863,{"op":"and","type":"and_3","left":"$Line =~ /^pass # LAST_HEADER/","right":"not $insertion_point"}],[2867,{"right":"$line =~ /^class /","left":"$line =~ /^def /","type":"or_3","op":"||"}],[2867,{"left":"not $line =~ /^def / || $line =~ /^class /","right":"length $line >= 1","op":"and","type":"and_3"}],[2867,{"op":"and","type":"and_3","left":"not $line =~ /^def / || $line =~ /^class / and length $line >= 1","right":"not $line =~ /^\\s*#/"}],[2867,{"left":"not $line =~ /^def / || $line =~ /^class / and length $line >= 1 and not $line =~ /^\\s*#/","right":"not $line =~ /^\\s/","op":"and","type":"and_3"}],[2867,{"left":"not $line =~ /^def / || $line =~ /^class / and length $line >= 1 and not $line =~ /^\\s*#/ and not $line =~ /^\\s/","right":"not $multiline_string_sep","op":"and","type":"and_3"}],[2870,{"op":"or","type":"or_3","left":"$line =~ /^def ([A-Za-z0-9_]+)/","right":"$line =~ /^class ([A-Za-z0-9_]+)/"}],[2875,{"left":"$line =~ /^def /","right":"$line =~ /^class /","op":"or","type":"or_3"}],[2925,{"type":"and_3","op":"and","right":"$size == 0","left":"not cleanup_imports(\\@lines)"}],[2932,{"type":"and_3","op":"and","right":"$refs{$n} < $defs{$n}","left":"exists $refs{$n}"}],[2958,{"op":"and","type":"and_3","left":"$cur_indent <= $source_indent","right":"$moved_def"}],[2982,{"op":"and","type":"and_3","left":"not $main::import_perllib","right":"$line =~ /^import /"}],[2982,{"right":"$^O eq 'msys'","left":"$^O eq 'MSWin32'","type":"or_3","op":"||"}],[2982,{"left":"not $main::import_perllib and $line =~ /^import /","right":"$^O eq 'MSWin32' || $^O eq 'msys'","op":"and","type":"and_3"}],[2982,{"right":"$line =~ /\\bfcntl/","left":"not $main::import_perllib and $line =~ /^import / and $^O eq 'MSWin32' || $^O eq 'msys'","type":"and_3","op":"and"}],[3013,{"left":"$lines[$i] =~ /\"\"\"/","right":"$lines[$i] =~ /'''/","op":"||","type":"or_3"}],[3013,{"op":"and","type":"and_3","left":"$lines[$i] =~ /\"\"\"/ || $lines[$i] =~ /'''/","right":"not $lines[$i] =~ /^\\s*#/"}],[3031,{"type":"and_3","op":"and","right":"$ndx > $comment_start","left":"$comment_start >= 0"}],[3031,{"op":"or","type":"or_3","left":"$ndx < 0","right":"$comment_start >= 0 and $ndx > $comment_start"}],[3034,{"op":"and","type":"and_3","left":"$we3 ne \"\\\"\\\"\\\"\"","right":"$we3 ne \"'''\""}],[3037,{"right":"not &Perlscan::is_escaped($lines[$i], $j)","left":"substr($lines[$i], $j, 1) eq $quote","type":"and_3","op":"and"}],[3055,{"right":"$lines[$i] =~ /^def $func\\(/","left":"$lines[$i] =~ /^\\s+/","type":"or_3","op":"or"}],[3055,{"type":"or_3","op":"or","right":"$lines[$i] =~ /^class ${func}[(:]/","left":"$lines[$i] =~ /^\\s+/ or $lines[$i] =~ /^def $func\\(/"}],[3055,{"type":"or_3","op":"or","right":"$lines[$i] =~ /^\\s*$/","left":"$lines[$i] =~ /^\\s+/ or $lines[$i] =~ /^def $func\\(/ or $lines[$i] =~ /^class ${func}[(:]/"}],[3055,{"op":"or","type":"or_3","left":"$lines[$i] =~ /^\\s+/ or $lines[$i] =~ /^def $func\\(/ or $lines[$i] =~ /^class ${func}[(:]/ or $lines[$i] =~ /^\\s*$/","right":"$lines[$i] =~ /^\\s*#/"}],[3055,{"right":"$lines[$i] =~ /^@/","left":"$lines[$i] =~ /^\\s+/ or $lines[$i] =~ /^def $func\\(/ or $lines[$i] =~ /^class ${func}[(:]/ or $lines[$i] =~ /^\\s*$/ or $lines[$i] =~ /^\\s*#/","type":"or_3","op":"or"}],[3055,{"type":"or_3","op":"or","right":"$lines[$i] =~ /^${func}_[\\w]+ =/","left":"$lines[$i] =~ /^\\s+/ or $lines[$i] =~ /^def $func\\(/ or $lines[$i] =~ /^class ${func}[(:]/ or $lines[$i] =~ /^\\s*$/ or $lines[$i] =~ /^\\s*#/ or $lines[$i] =~ /^@/"}],[3055,{"op":"or","type":"or_3","left":"$lines[$i] =~ /^\\s+/ or $lines[$i] =~ /^def $func\\(/ or $lines[$i] =~ /^class ${func}[(:]/ or $lines[$i] =~ /^\\s*$/ or $lines[$i] =~ /^\\s*#/ or $lines[$i] =~ /^@/ or $lines[$i] =~ /^${func}_[\\w]+ =/","right":"$lines[$i] =~ /[.]$func = types[.]MethodType\\($func,/"}],[3055,{"op":"or","type":"or_3","left":"$lines[$i] =~ /^\\s+/ or $lines[$i] =~ /^def $func\\(/ or $lines[$i] =~ /^class ${func}[(:]/ or $lines[$i] =~ /^\\s*$/ or $lines[$i] =~ /^\\s*#/ or $lines[$i] =~ /^@/ or $lines[$i] =~ /^${func}_[\\w]+ =/ or $lines[$i] =~ /[.]$func = types[.]MethodType\\($func,/","right":"$lines[$i] =~ /[.]$func = $func$/"}],[3065,{"op":"and","type":"and_3","left":"$lines[$i] =~ /^@/","right":"$moved_def"}],[3066,{"op":"or","type":"or_3","left":"$lines[$i] =~ /^def $func\\(/","right":"$lines[$i] =~ /^class ${func}[(:]/"}],[3086,{"left":"$line =~ /\"\"\"/","right":"$line =~ /'''/","op":"||","type":"or_3"}],[3086,{"right":"not $line =~ /^\\s*#/","left":"$line =~ /\"\"\"/ || $line =~ /'''/","type":"and_3","op":"and"}],[3118,{"right":"$last_was_blank","left":"$this_is_blank","type":"and_3","op":"and"}],[3118,{"op":"||","type":"or_3","left":"$line =~ /^\\s*pass$/","right":"$line =~ /^pass # LAST_HEADER$/"}],[3118,{"right":"$line =~ /^\\s*pass$/ || $line =~ /^pass # LAST_HEADER$/","left":"$this_indent <= $last_indent","type":"and_3","op":"and"}],[3118,{"op":"and","type":"and_3","left":"$this_indent < $last_indent","right":"not $this_is_blank"}],[3118,{"right":"not $line =~ /^\\s*except /","left":"$this_indent < $last_indent and not $this_is_blank","type":"and_3","op":"and"}],[3118,{"left":"$this_indent < $last_indent and not $this_is_blank and not $line =~ /^\\s*except /","right":"not $line =~ /^\\s*else:/","op":"and","type":"and_3"}],[3118,{"right":"not $line =~ /^\\s*elif /","left":"$this_indent < $last_indent and not $this_is_blank and not $line =~ /^\\s*except / and not $line =~ /^\\s*else:/","type":"and_3","op":"and"}],[3118,{"right":"not $this_is_blank","left":"$this_indent == 0","type":"and_3","op":"and"}],[3118,{"op":"and","type":"and_3","left":"$this_indent == 0 and not $this_is_blank","right":"$line =~ /^def /"}],[3118,{"left":"$this_indent == 0 and not $this_is_blank and $line =~ /^def /","right":"not $last_was_blank","op":"and","type":"and_3"}],[3179,{"op":"and","type":"and_3","left":"not $import_as_lno","right":"index($import_s, \" as \") > 0"}],[3244,{"op":"and","type":"and_3","left":"$import_as_lno","right":"not $import_as_referenced"}],[3247,{"left":"$die_import_lno","right":"not $die_referenced","op":"and","type":"and_3"}],[3247,{"right":"not $die_referenced","left":"$die_def_lno","type":"and_3","op":"and"}],[3258,{"left":"$_str_lno","right":"not $_str_referenced","op":"and","type":"and_3"}],[3261,{"type":"and_3","op":"and","right":"not $loop_control_referenced","left":"$loop_control_def_lno"}],[3265,{"op":"and","type":"and_3","left":"$eval_return_lno","right":"not $eval_referenced"}],[3338,{"left":"$quote eq \"\\\"\"","right":"$quote eq \"'\"","op":"or","type":"or_3"}],[3339,{"left":"($p = index($line, \"#\")) >= 0","right":"$p < $ndx","op":"and","type":"and_3"}],[3345,{"left":"$c eq \"f\"","right":"$c eq \"r\"","op":"or","type":"or_3"}],[3370,{"left":"$line =~ /\"\"\"/","right":"$line =~ /'''/","op":"||","type":"or_3"}],[3370,{"type":"and_3","op":"and","right":"not $line =~ /^\\s*#/","left":"$line =~ /\"\"\"/ || $line =~ /'''/"}],[3377,{"type":"or_3","op":"or","right":"$c eq \"r\"","left":"$c eq \"f\""}],[3384,{"right":"$p < $ndx","left":"($p = index($line, \"#\")) >= 0","type":"and_3","op":"and"}],[3462,{"op":"and","type":"and_3","left":"$split >= 0","right":"$pos > $split"}]],"branch":[[102,{"text":"if (-f $options{'r'}) { }"}],[98,{"text":"if ($options{'r'} eq '') { }"}],[109,{"text":"unless (-x $refactor)"}],[97,{"text":"if (exists $options{'r'})"}],[116,{"text":"unless ($options{'b'})"}],[122,{"text":"if $main::debug"}],[120,{"text":"if ($options{'b'} > 0 and $options{'b'} < 9000) { }"}],[115,{"text":"if (exists $options{'b'})"}],[129,{"text":"unless ($options{'B'})"}],[135,{"text":"if $main::debug"}],[133,{"text":"if ($options{'B'} > 0 and $options{'B'} < 9000) { }"}],[128,{"text":"if (exists $options{'B'})"}],[142,{"text":"if $options{'t'} eq \"\""}],[143,{"text":"if ($options{'t'} > 1 and $options{'t'} <= 10) { }"}],[141,{"text":"if (exists $options{'t'})"}],[153,{"text":"if ($maxlinelen // Deparse error: Can't locate object method \"object_2svref\" via package \"B::SPECIAL\" at C:/Strawberry/perl/lib/B/Deparse.pm line 5493.\n)"}],[151,{"text":"if ($options{'w'} >= 100 and $options{'w'} <= 256) { }"}],[150,{"text":"if (exists $options{'w'})"}],[163,{"text":"if ($options{'R'} eq ':all') { }"}],[163,{"text":"elsif ($options{'R'} eq ':global') { }"}],[163,{"text":"elsif ($options{'R'} eq ':none') { }"}],[162,{"text":"if (exists $options{'R'})"}],[179,{"text":"if ($options{'l'} >= 48 and $options{'l'} <= 1000) { }"}],[178,{"text":"if (exists $options{'l'})"}],[186,{"text":"if (exists $options{'T'})"}],[189,{"text":"if (exists $options{'n'})"}],[192,{"text":"if (exists $options{'A'})"}],[195,{"text":"if (exists $options{'m'})"}],[199,{"text":"if (exists $options{'M'})"}],[202,{"text":"if (exists $options{'s'})"}],[205,{"text":"if (exists $options{'S'})"}],[208,{"text":"if (exists $options{'p'})"}],[211,{"text":"if (exists $options{'P'})"}],[214,{"text":"if (exists $options{'V'})"}],[217,{"text":"if (exists $options{'k'})"}],[220,{"text":"if (exists $options{'K'})"}],[223,{"text":"if (exists $options{'u'})"}],[226,{"text":"if (exists $options{'U'})"}],[229,{"text":"if (exists $options{'o'})"}],[232,{"text":"if (exists $options{'a'})"}],[241,{"text":"unless (-f $fname)"}],[245,{"text":"if (defined $main::output_dir)"}],[252,{"text":"unless (-f \"$fname.bak\")"}],[251,{"text":"if ($refactor)"}],[262,{"text":"unless (-r $fname)"}],[266,{"text":"unless open SYSIN, \"<\", $fname"}],[239,{"text":"if (scalar @ARGV == 1) { }"}],[271,{"text":"if ($debug)"}],[279,{"text":"if ($fname =~ /\\.pm$/) { }"}],[288,{"text":"if ($pass_0_result)"}],[287,{"text":"if (defined $pass_0_result)"}],[294,{"text":"unless open SYSIN, \"<\", $fname"}],[277,{"text":"unless ($mFlag or $MFlag)"}],[298,{"text":"if ($main::implicit_global_my == 0)"}],[301,{"text":"if ($main::import_perllib)"}],[310,{"text":"unless open SYSIN, \"<\", $fname"}],[315,{"text":"unless open SYSOUT, \">\", $output_file"}],[361,{"text":"if ($main::import_perllib)"}],[371,{"text":"if (not defined $line and $main::saved_eval_tokens)"}],[379,{"text":"unless defined $line"}],[380,{"text":"if ($main::debug == 2 and $. == $main::breakpoint)"}],[384,{"text":"if $main::debug"}],[385,{"text":"if ($. >= $breakpoint)"}],[392,{"text":"if $main::debug >= 3"}],[389,{"text":"if (defined $main::saved_sub_tokens and $main::nested_sub_at_level < 0) { }"}],[369,{"text":"if (scalar @Perlscan::BufferValClass == 0) { }"}],[405,{"text":"unless (defined $ValClass[0])"}],[411,{"text":"if defined $uim"}],[409,{"text":"if ($got_first_line == 0 or $ValPerl[2] eq 'no' and $ValPerl[3] eq 'convert') { }"}],[408,{"text":"if (not $pass_0_ran and $#ValClass >= 3 and $ValClass[0] eq \"i\" and $ValPerl[0] eq \"pragma\" and $ValPerl[1] eq \"pythonizer\")"}],[420,{"text":"unless exists $Packages{$DEFAULT_PACKAGE}"}],[419,{"text":"unless ($implicit_global_my)"}],[417,{"text":"if (not defined $CurPackage and $ValClass[0] ne 'c' || $ValPerl[0] ne 'package')"}],[429,{"text":"if $ValClass[$i] eq \"=\""}],[430,{"text":"if ($ValClass[$i] =~ /[sah]/)"}],[439,{"text":"if exists $DeclaredVarH{$ValPy[$k]}"}],[440,{"text":"if defined $ValType[$k] and $ValType[$k] eq \"X\" and not exists $GLOBALS{$ValPy[$k]}"}],[437,{"text":"if ($ValClass[$k] =~ /[sah]/) { }"}],[437,{"text":"elsif ($ValClass[$k] eq 'f' and $ValPerl[$k] eq 'shift' || $ValPerl[$k] eq 'pop' and $k == $#ValClass || $ValPerl[$k + 1] eq '@_' || !($ValClass[$k + 1] =~ /[ahfi]/)) { }"}],[435,{"text":"if ($i < $#ValClass)"}],[459,{"text":"if ($main::debug > 3)"}],[474,{"text":"if ($main::debug > 3)"}],[478,{"text":"if defined $PriorExprType"}],[481,{"text":"if defined $CurPackage"}],[471,{"text":"if ($we_are_in_sub_body and $NextNest == 0)"}],[490,{"text":"if ($ValClass[$k] eq \"s\" and $ValPerl[$k] eq \"\\$_\" and $k + 1 <= $#ValClass and $ValClass[$k + 1] eq '=' || $ValClass[$k + 1] eq '~' && $ValClass[$k + 2] eq 'f' && $ValPerl[$k + 2] =~ /^(?:re|tr)$/)"}],[497,{"text":"if ($k != 0 and $ValClass[$k - 1] eq \"t\" and $ValPerl[$k - 1] eq \"my\")"}],[500,{"text":"if exists $DeclaredVarH{$ValPy[$k]}"}],[501,{"text":"if defined $ValType[$k] and $ValType[$k] eq \"X\" and not exists $GLOBALS{$ValPy[$k]}"}],[502,{"text":"if $ValPy[$k] eq \"\""}],[504,{"text":"if ($ValPy[$k] =~ /[\\[\\(]/ and not $ValPy[$k] =~ /^len\\(/ and $ValPy[$k] ne \"globals()\" and not $ValPy[$k] =~ /\\.__dict__$/ and substr($ValPy[$k], 0, 5) ne \"(len(\" and substr($ValPy[$k], 0, 4) ne \"sys.\")"}],[522,{"text":"unless exists $initialized{$CurSubName}{$DEFAULT_VAR}"}],[488,{"text":"if ($ValClass[$k] =~ /[sah]/) { }"}],[488,{"text":"elsif ($ValClass[$k] eq 'f' and $ValPerl[$k] eq 'shift' || $ValPerl[$k] eq 'pop' and $k == $#ValClass || $ValPerl[$k + 1] eq '@_' || !($ValClass[$k + 1] =~ /[ahfi]/)) { }"}],[488,{"text":"elsif ($ValClass[$k] eq 'f' and $ValPerl[$k] eq 'push' || $ValPerl[$k] eq 'unshift' and $ValPerl[$k + 1] eq '@_') { }"}],[488,{"text":"elsif ($ValClass[$k] eq 'f' and ($ValPerl[$k] eq 're' and $ValPy[$k] =~ /\\b$DEFAULT_VAR\\b/) or $ValPerl[$k] eq 'tr' and $k == 0 || $ValClass[$k - 1] ne '~') { }"}],[531,{"text":"if ($c = next_same_level_token(\"c\", 1, $end)) != -1"}],[528,{"text":"if (scalar @ValClass > 1)"}],[526,{"text":"if (scalar @ValClass > 0 and $ValClass[0] eq \"k\" and $ValPerl[0] eq \"return\")"}],[427,{"text":"if ($ValClass[0] eq 't' and $ValPerl[0] eq 'my') { }"}],[427,{"text":"elsif ($ValPerl[0] eq 'sub' and 1 <= $#ValClass and exists $main::nested_subs{$ValPerl[1]}) { }"}],[427,{"text":"elsif ($ValPerl[0] eq 'sub' and $#ValClass >= 1) { }"}],[427,{"text":"elsif ($ValClass[0] eq 'c' and $ValPerl[0] eq 'package' and $#ValClass >= 1) { }"}],[427,{"text":"elsif ($ValClass[0] eq '{') { }"}],[427,{"text":"elsif ($ValClass[0] eq '}' and $#ValClass == 0) { }"}],[545,{"text":"if ((index('\"(dsahf-', $ValClass[0]) != -1)) { }"}],[545,{"text":"elsif (($p = index($TokenStr, '=')) > 0 and $ValClass[0] ne 't') { }"}],[545,{"text":"elsif ($ValClass[0] eq 'k' and scalar @ValClass > 1) { }"}],[539,{"text":"if (scalar @ValClass == 0) { }"}],[539,{"text":"elsif (exists $VarType{$CurSubName} and exists $VarType{$CurSubName}{'__main__'} and $VarType{$CurSubName}{'__main__'} eq 'm') { }"}],[558,{"text":"unless exists $LocalSub{$ValPy[3]}"}],[564,{"text":"unless exists $LocalSub{$ValPy[$i]}"}],[562,{"text":"if ($comma_flip == 1 and $ValClass[$i] eq 'i') { }"}],[562,{"text":"elsif ($ValPy[$i] eq ',') { }"}],[571,{"text":"unless exists $LocalSub{$ValPy[2]}"}],[575,{"text":"if $i + 1 <= $#ValClass and $ValClass[$i + 1] =~ /[AD]/"}],[579,{"text":"unless exists $LocalSub{$ValPy[$i]}"}],[576,{"text":"if ($i + 1 > $#ValClass or $ValPerl[$i + 1] eq \"(\" or ($i == 0 or $ValPerl[$i - 1] ne \"{\" and $ValClass[$i - 1] ne \"D\"))"}],[574,{"text":"if ($ValClass[$i] eq \"i\")"}],[589,{"text":"if (index(q['\"], substr($ValPy[$i], 0, 1)) != -1) { }"}],[586,{"text":"if ($ValClass[$i] eq '\"') { }"}],[586,{"text":"elsif ($ValClass[2] eq 'q') { }"}],[556,{"text":"if ($TokenStr =~ /^t[ahsG]=i$/) { }"}],[556,{"text":"elsif ($TokenStr =~ /^h=\\(/) { }"}],[556,{"text":"elsif ($TokenStr eq 'c(i)') { }"}],[556,{"text":"elsif ($ValPerl[0] ne 'use' and $ValPerl[0] ne 'require' and $ValPerl[0] ne 'no') { }"}],[556,{"text":"elsif ($#ValClass >= 2 and $ValPerl[0] eq 'use' and $ValPerl[1] eq 'subs') { }"}],[612,{"text":"if (substr($ValPy[$pos + 1], 0, 3) eq '\"\"\"') { }"}],[618,{"text":"if $main::debug"}],[604,{"text":"if ($ValPerl[$pos] eq \"eval\" and ($ch0 = substr($ValPy[$pos + 1], 0, 1)) eq \"'\" or $ch0 eq \"\\\"\")"}],[628,{"text":"if ($ValPy[$i] =~ /re\\.E\\|re\\.E/)"}],[643,{"text":"if $main::debug"}],[627,{"text":"if ($ValClass[$i] eq \"f\" and $ValPerl[$i] eq \"re\" and $ValPy[$i] =~ /re\\.E/)"}],[600,{"text":"if ($TokenStr =~ /C\"/ and not $main::saved_eval_tokens) { }"}],[600,{"text":"elsif (not $main::saved_eval_tokens) { }"}],[671,{"text":"if $main::debug"}],[678,{"text":"if ($main::debug >= 3)"}],[662,{"text":"if ($#ValClass != 0 and $ValClass[$#ValClass] eq \"k\" and $ValPerl[$#ValClass] eq \"sub\")"}],[686,{"text":"if $main::debug >= 3"}],[685,{"text":"if ($Perlscan::nesting_level < $main::nested_sub_at_level)"}],[719,{"text":"if (\\%Perlscan::line_substitutions)"}],[742,{"text":"if (%Pass0::line_no_convert_regex)"}],[696,{"text":"if ($main::debug >= 5)"}],[759,{"text":"if $varname =~ /[\\(\\[]/"}],[761,{"text":"unless $varname =~ /^[A-Za-z_][A-Za-z0-9._]*$/"}],[768,{"text":"if (defined $common_type) { }"}],[775,{"text":"if (defined $common_type and exists $VarType{$varname} and exists $VarType{$varname}{'__main__'} and $common_type ne $VarType{$varname}{'__main__'} and $main::debug >= 3)"}],[780,{"text":"unless $varname =~ /^[A-Za-z_][A-Za-z0-9._]*$/"}],[781,{"text":"if $varname eq \"True\" or $varname eq \"False\""}],[782,{"text":"if ($varname =~ /^[A-Za-z_][A-Za-z0-9_]*$/)"}],[787,{"text":"unless defined $common_type"}],[791,{"text":"if (defined $common_type and $common_type =~ /[IFN]/) { }"}],[791,{"text":"elsif (defined $common_type and $common_type =~ / of .$/) { }"}],[797,{"text":"unless (exists $Packages{$package_name})"}],[789,{"text":"if ($ld >= 0)"}],[801,{"text":"if defined $common_type"}],[806,{"text":"if (exists $NeedsInitializing{'__main__'}{$varname}) { }"}],[802,{"text":"if (defined $common_type and $subname ne \"__main__\" and exists $NeedsInitializing{$subname}{$varname})"}],[779,{"text":"if ($var_usage_in_subs > 1 or exists $NeedsInitializing{$subname}{$varname})"}],[820,{"text":"if $varname =~ /__dict__$/"}],[821,{"text":"if $varname eq \"True\" or $varname eq \"False\""}],[830,{"text":"if $main::import_perllib"}],[831,{"text":"if (exists $Packages{$packname})"}],[822,{"text":"if ($varname =~ /^[A-Za-z_][A-Za-z0-9_]*$/) { }"}],[822,{"text":"elsif ($varname =~ /^[A-Za-z_][A-Za-z0-9._]*$/) { }"}],[838,{"text":"if $main::debug"}],[841,{"text":"if $main::debug"}],[843,{"text":"if $main::debug"}],[845,{"text":"if $main::debug"}],[848,{"text":"if $main::debug"}],[849,{"text":"if $main::debug"}],[861,{"text":"if $type =~ /[IN]/"}],[862,{"text":"if $type eq \"F\""}],[863,{"text":"if $type eq \"S\" or $type eq \"s\""}],[868,{"text":"if $main::import_perllib"}],[865,{"text":"if ($main::autovivification) { }"}],[876,{"text":"if $main::import_perllib"}],[873,{"text":"if ($main::autovivification) { }"}],[864,{"text":"if ($type eq 'a') { }"}],[864,{"text":"elsif ($type eq 'h') { }"}],[894,{"text":"if ($main::debug >= 3)"}],[905,{"text":"if ($ValPerl[$k] eq $lc)"}],[902,{"text":"if (defined $lc)"}],[899,{"text":"if ($ValPy[0] ne \"for\" and $class eq \"s\" and $k != 0 && $ValClass[$k - 1] eq '^' || $k + 1 <= $#ValClass && ($ValClass[$k + 1] eq '=' || $ValClass[$k + 1] eq '^'))"}],[916,{"text":"if ($k + 1 <= $#ValClass and $ValPerl[$k + 1] eq '[') { }"}],[916,{"text":"elsif ($k + 1 <= $#ValClass and $ValPerl[$k + 1] eq '{') { }"}],[923,{"text":"unless exists $initialized{$CurSub}{$name}"}],[915,{"text":"if ($ValClass[$k - 1] eq '^') { }"}],[915,{"text":"elsif ($ValClass[$k - 1] eq 'f' and $ValPerl[$k - 1] eq 'defined' and &main::end_of_variable($k) == $k) { }"}],[914,{"text":"if ($k > 0)"}],[934,{"text":"unless $name"}],[941,{"text":"if ($lim + 3 <= $#ValClass and $ValClass[$lim + 2] eq \"~\" and $ValClass[$lim + 3] eq \"f\" and $ValPerl[$lim + 3] eq 're' || $ValPerl[$lim + 3] eq 'tr')"}],[939,{"text":"if ($k - 1 >= 0 and $ValClass[$k - 1] eq \"(\")"}],[950,{"text":"if $semi != -1"}],[957,{"text":"if $el != -1"}],[953,{"text":"if ($ValClass[$el] eq '=') { }"}],[952,{"text":"if ($el != -1)"}],[962,{"text":"unless defined $type"}],[963,{"text":"if ($class eq 'a' and not $type =~ / of /) { }"}],[963,{"text":"elsif ($class eq 'h' and not $type =~ / of /) { }"}],[971,{"text":"unless is_referenced($ValClass[$k], $name, $k + 2) or &Perlscan::in_conditional($k)"}],[974,{"text":"unless exists $initialized{$CurSub}{$name}"}],[976,{"text":"unless $type eq \"I\" or $type eq \"F\""}],[977,{"text":"unless exists $initialized{$CurSub}{$name}"}],[970,{"text":"if ($op eq '=') { }"}],[970,{"text":"elsif ($op eq '.=') { }"}],[981,{"text":"unless exists $initialized{$CurSub}{$name}"}],[986,{"text":"unless exists $initialized{$CurSub}{$name}"}],[992,{"text":"if ($rhs_type =~ /^a of (.*)$/) { }"}],[997,{"text":"unless &Perlscan::in_conditional($k)"}],[990,{"text":"if ($m != -1 and $ValPerl[$m] eq \")\" and $m < $#ValClass and $ValClass[$m + 1] eq \"=\")"}],[937,{"text":"if ($ValClass[$k + 1] eq '=') { }"}],[937,{"text":"elsif ($ValClass[$k + 1] eq '^') { }"}],[937,{"text":"elsif ($ValClass[$k + 1] eq '~' and $k + 2 <= $#ValClass and $ValClass[$k + 2] eq 'f' and $ValPerl[$k + 2] eq 're' || $ValPerl[$k + 2] eq 'tr' and index($ValPy[$k + 2], 're.R') == -1) { }"}],[937,{"text":"elsif (not defined $type) { }"}],[936,{"text":"if ($k + 1 <= $#ValClass)"}],[1003,{"text":"if $type eq \"a\" or $type eq \"h\""}],[1005,{"text":"unless $k == 1 and &Perlscan::in_conditional($k)"}],[1010,{"text":"if $ValClass[$k - 1] eq \"t\" or not &Perlscan::in_conditional($k)"}],[1014,{"text":"defined $type ? :"}],[1001,{"text":"if ($k == 1 || $k == 2 && $ValClass[1] eq 't' and $ValClass[0] eq 'c' and $ValPy[0] eq 'for') { }"}],[1001,{"text":"elsif ($k >= 1 and $ValClass[$k - 1] eq 'f' and $ValPerl[$k - 1] eq 'open' || $ValPerl[$k - 1] eq 'opendir' or $k >= 2 and $ValClass[$k - 1] eq '(' and $ValClass[$k - 2] eq 'f' and $ValPerl[$k - 2] eq 'open' || $ValPerl[$k - 2] eq 'opendir' or $k >= 3 and $ValClass[$k - 1] eq 't' and $ValClass[$k - 2] eq '(' and $ValClass[$k - 3] eq 'f' and $ValPerl[$k - 3] eq 'open' || $ValPerl[$k - 3] eq 'opendir') { }"}],[1001,{"text":"elsif ($ValClass[0] eq 't' and $ValPerl[0] eq 'my' || $ValPerl[0] eq 'local' || $ValPerl[0] eq 'state' and being_declared_here($k) and not exists $initialized{$CurSub}{$name} and not &Perlscan::in_conditional($k)) { }"}],[1019,{"text":"unless exists $initialized{$CurSub}{$name}"}],[1017,{"text":"if (defined $type)"}],[1022,{"text":"$ValPerl[$k + 1] eq '{' ? :"}],[1023,{"text":"unless exists $initialized{$CurSub}{$name}"}],[1025,{"text":"if (defined $type)"}],[1031,{"text":"$ValPerl[$p] eq '{' ? :"}],[1032,{"text":"if (defined $type) { }"}],[1038,{"text":"if $q < 0"}],[1040,{"text":"if $p > $#ValClass"}],[1046,{"text":"if (exists $VarType{$name} and exists $VarType{$name}{$CurSub})"}],[1043,{"text":"if ($ValClass[$p] eq '=') { }"}],[1043,{"text":"elsif ($ValClass[$p] eq '^') { }"}],[1043,{"text":"elsif ($ValClass[$p] eq '~') { }"}],[1043,{"text":"elsif (index(')x*/%+-.HI>&|0r?:,Ao\"', $ValClass[$p]) != -1) { }"}],[1042,{"text":"if ($p <= $#ValClass) { }"}],[1059,{"text":"if (defined $rhs_type) { }"}],[1066,{"text":"if ($k - 1 >= 0 and $ValClass[$k - 1] eq 'f' and $ValPerl[$k - 1] eq 'push' || $ValPerl[$k - 1] eq 'unshift' and $k + 2 <= $#ValClass) { }"}],[1066,{"text":"elsif (substr($ValPy[$k], 0, 4) eq 'len(') { }"}],[1073,{"text":"unless exists $initialized{$CurSub}{$name}"}],[1074,{"text":"if not exists $VarType{$name} && exists $VarType{$name}{$CurSub}"}],[1076,{"text":"if not exists $initialized{$CurSub}{$name}"}],[1079,{"text":"if ($main::debug >= 3)"}],[1092,{"text":"if not exists $initialized{$CurSub}{$name}"}],[1091,{"text":"if (not exists $NeedsInitializing{$CurSub}{$name})"}],[1021,{"text":"if ($class eq 's' and $k + 1 <= $#ValClass and $ValClass[$k + 1] eq '(' and $ValPerl[$k + 1] ne '(') { }"}],[1021,{"text":"elsif ($class eq 'a' or $class eq 'h') { }"}],[1021,{"text":"elsif ($typ = expr_type($k, $k, $CurSub) and $typ ne 's') { }"}],[1021,{"text":"elsif (not defined $type) { }"}],[1105,{"text":"if $ValClass[$i] eq \";\""}],[1106,{"text":"if $ValClass[$i] eq $class and $ValPy[$i] eq $name"}],[1118,{"text":"if $k != 0"}],[1119,{"text":"if $k + 1 <= $#ValClass"}],[1124,{"text":"if ($ValPerl[$k - 1] eq '[') { }"}],[1124,{"text":"elsif ($ValPerl[$k - 1] eq '{') { }"}],[1123,{"text":"if ($prev eq \"(\" and $next eq \")\")"}],[1140,{"text":"if $k > $q"}],[1138,{"text":"if ($ValClass[$i + 1] eq \"(\")"}],[1150,{"text":"if $j <= $k and $ValClass[$j] eq \",\""}],[1152,{"text":"if $k == $j"}],[1153,{"text":"if $ValClass[$j] eq \",\""}],[1156,{"text":"if $j < 0"}],[1145,{"text":"if ($k == $i + 1) { }"}],[1160,{"text":"if ($main::debug > 3)"}],[1163,{"text":"if defined $ty and not $ty =~ /[ah]/"}],[1133,{"text":"if ($ValClass[$i] eq ')') { }"}],[1133,{"text":"elsif ($ValClass[$i] eq 'f') { }"}],[1133,{"text":"elsif ($ValClass[$i] eq 'c') { }"}],[1173,{"text":"if ($k - 2 >= 0 and $ValClass[$k - 1] eq \"(\")"}],[1177,{"text":"if (index(\">+-*/%0o.\", $prev) != -1)"}],[1179,{"text":"if ($k + 2 <= $#VarClass and $ValClass[$k + 1] eq \")\")"}],[1183,{"text":"if (index(\">+-*/%0o.\", $next) != -1)"}],[1190,{"text":"if $ValPerl[$m] =~ /^[a-z][a-z]$/"}],[1187,{"text":"if ($op eq '.') { }"}],[1187,{"text":"elsif ($op eq '>') { }"}],[1187,{"text":"elsif ($op ne '') { }"}],[1209,{"text":"if $q == -1"}],[1210,{"text":"if $k > $q"}],[1207,{"text":"if ($i - 1 >= 0 and $ValClass[$i - 1] eq \"i\")"}],[1218,{"text":"if $i < 0"}],[1206,{"text":"if ($ValClass[$i] eq '(') { }"}],[1206,{"text":"elsif ($ValClass[$i] eq 'i' and $LocalSub{$ValPy[$i]}) { }"}],[1206,{"text":"elsif ($ValClass[$i] eq ')') { }"}],[1206,{"text":"elsif ($ValClass[$i] eq '=' and $ValPy[$i] ne ':=') { }"}],[1287,{"text":"if ($main::debug > 3)"}],[1299,{"text":"scalar @_ > 0 ? :"}],[1305,{"text":"if ($i - 1 >= 0 and $ValClass[$i - 1] eq \"f\")"}],[1314,{"text":"if $i < 0"}],[1304,{"text":"if ($ValClass[$i] eq '(') { }"}],[1304,{"text":"elsif ($ValClass[$i] eq 'f' and $i != $k) { }"}],[1304,{"text":"elsif ($ValClass[$i] eq ')') { }"}],[1320,{"text":"if $i < 0 or $ValClass[$i] ne \"f\""}],[1325,{"text":"if $k >= $q"}],[1326,{"text":"if $k == $i + 1"}],[1323,{"text":"if ($ValClass[$i + 1] eq \"(\" and $ValPerl[$i + 1] eq \"(\")"}],[1336,{"text":"if $j <= $k and $ValClass[$j] eq \",\""}],[1338,{"text":"if $k == $j"}],[1339,{"text":"if $ValClass[$j] eq \",\""}],[1340,{"text":"if $ValClass[$j] eq \")\" and $ValPerl[$j] eq \"}\""}],[1343,{"text":"if $j < 0"}],[1331,{"text":"if ($k == $i + 1) { }"}],[1346,{"text":"if (not $quiet and $main::debug > 3)"}],[1357,{"text":"scalar @_ > 0 ? :"}],[1358,{"text":"scalar @_ > 1 ? :"}],[1360,{"text":"unless defined $fname"}],[1362,{"text":"if (exists $PyFuncType{$name}) { }"}],[1362,{"text":"elsif (exists $FuncType{$fname}) { }"}],[1367,{"text":"unless defined $ft"}],[1375,{"text":"if $c ne \"?\""}],[1376,{"text":"if $return_optional"}],[1373,{"text":"if ($repeat)"}],[1372,{"text":"if ($c eq \":\")"}],[1381,{"text":"if ($c eq \"H\" and substr($ft, $i + 1, 1) eq \"?\")"}],[1386,{"text":"if $c eq \"?\""}],[1388,{"text":"if ($return_optional and substr($ft, $i + 1, 1) eq \"?\")"}],[1387,{"text":"if ($argc == $arg)"}],[1408,{"text":"if ($main::debug >= 3)"}],[1412,{"text":"unless (defined $type)"}],[1415,{"text":"unless (exists $VarType{$name})"}],[1418,{"text":"unless (exists $VarType{$name}{$CurSub})"}],[1422,{"text":"if ($main::debug >= 3)"}],[1425,{"text":"if ($otype eq \"s\")"}],[1428,{"text":"if ($type eq \"s\")"}],[1431,{"text":"if $type eq $otype"}],[1432,{"text":"if ($otype eq 'a' || $otype eq 'h' and $type =~ /$otype of/)"}],[1435,{"text":"if ($type eq 'a' || $type eq 'h' and $otype =~ /$type of/)"}],[1441,{"text":"scalar @olist >= scalar @list ? :"}],[1444,{"text":"if ($list[$i] eq 's') { }"}],[1444,{"text":"elsif ($olist[$i] eq 's') { }"}],[1443,{"text":"if ($list[$i] ne $olist[$i])"}],[1454,{"text":"if (scalar @olist > scalar @list)"}],[1438,{"text":"if ($otype =~ /[ah] of/ and $type =~ /[ah] of/) { }"}],[1438,{"text":"elsif ($otype =~ /[ah] of/) { }"}],[1438,{"text":"elsif ($type =~ /[ah] of/) { }"}],[1438,{"text":"elsif ($otype eq 's' and $type =~ /[NIFSH]/) { }"}],[1438,{"text":"elsif ($otype eq 'N' and $type =~ /[IF]/) { }"}],[1438,{"text":"elsif ($type eq 'N' and $otype =~ /[IF]/) { }"}],[1438,{"text":"elsif ($type =~ /[IF]/ and $otype =~ /[IF]/) { }"}],[1438,{"text":"elsif ($type eq 's') { }"}],[1484,{"text":"if ($main::debug >= 3)"}],[1490,{"text":"if $k <= $p - 1"}],[1489,{"text":"if ($ValClass[$p] eq \"c\" and $p != 0)"}],[1487,{"text":"if ($PassNo == PASS_1())"}],[1499,{"text":"if $ep > $k and $ep + 1 <= $e"}],[1501,{"text":"if $k + 2 <= $e"}],[1503,{"text":"if $k + 1 <= $e"}],[1497,{"text":"if ($ValPerl[$k + 1] eq '{') { }"}],[1497,{"text":"elsif ($ValClass[$k + 1] eq 'i' or $ValClass[$k + 1] eq 'f' and func_type($ValPerl[$k + 1], $ValPy[$k + 1]) eq 'I') { }"}],[1506,{"text":"if ($ValClass[$k + 1] =~ /[fi]/)"}],[1510,{"text":"if substr($ValPy[$k], 0, 1) eq \"_\""}],[1511,{"text":"if $k + 1 <= $e"}],[1517,{"text":"if ($comma > $k and $close > $k)"}],[1496,{"text":"if ($ValPerl[$k] =~ /sort/) { }"}],[1496,{"text":"elsif ($ValPerl[$k] =~ /map/) { }"}],[1496,{"text":"elsif ($ValPerl[$k] =~ /reverse/) { }"}],[1496,{"text":"elsif ($ValPerl[$k] eq '_assign_global' and $ValClass[$k + 1] eq '(') { }"}],[1495,{"text":"if ($k + 1 <= $#ValClass)"}],[1525,{"text":"if ($ValPy[$k] =~ /^(?:0[xbo])?\\d+$/)"}],[1530,{"text":"if exists $VarType{$ValPy[$k]} and exists $VarType{$ValPy[$k]}{$CurSub}"}],[1536,{"text":"if (exists $SpecialVarR2L{$ValPy[$k]})"}],[1532,{"text":"if (exists $Perlscan::SpecialVarType{$v})"}],[1542,{"text":"if $ValPerl[$k] eq $INDEX_TEMP"}],[1543,{"text":"if $ValPerl[$k] eq $KEY_TEMP"}],[1544,{"text":"if substr($ValPerl[$k], 0, 2) eq \"\\$#\""}],[1547,{"text":"if $ValPy[$k] =~ /^len\\(/"}],[1548,{"text":"if exists $VarType{$ValPy[$k]} and exists $VarType{$ValPy[$k]}{$CurSub}"}],[1550,{"text":"if (exists $Perlscan::SpecialArrayType{$v})"}],[1558,{"text":"if $ValPy[$k] =~ /^len\\(/"}],[1559,{"text":"if exists $VarType{$ValPy[$k]} and exists $VarType{$ValPy[$k]}{$CurSub}"}],[1561,{"text":"if (exists $Perlscan::SpecialHashType{$v})"}],[1571,{"text":"if $ValPerl[$k] eq \"qr\""}],[1572,{"text":"if $ValPy[$k] =~ /\\.split\\(\\)$/"}],[1577,{"text":"if $k - 2 >= 0 and $ValClass[$k - 2] eq \"a\" and $ValClass[$k - 1] eq \"=\""}],[1580,{"text":"if exists $VarType{$name} and exists $VarType{$name}{'__main__'}"}],[1576,{"text":"if (substr($ValPerl[$k], 0, 1) eq '<') { }"}],[1576,{"text":"elsif ($LocalSub{$name} or exists $VarType{$name} and exists $VarType{$name}{'__main__'}) { }"}],[1576,{"text":"elsif (exists $CONSTANT_MAP{$ValPerl[$k]}) { }"}],[1524,{"text":"if ($class eq 'd') { }"}],[1524,{"text":"elsif ($class eq 's') { }"}],[1524,{"text":"elsif ($class eq 'a') { }"}],[1524,{"text":"elsif ($class eq 'h') { }"}],[1524,{"text":"elsif ($class eq '\"' or $class eq 'x') { }"}],[1524,{"text":"elsif ($class eq 'q') { }"}],[1524,{"text":"elsif ($class eq 'i') { }"}],[1524,{"text":"elsif ($class eq 'g') { }"}],[1596,{"text":"if $k - 2 >= 0 and $ValClass[$k - 2] eq \"a\" and $ValClass[$k - 1] eq \"=\""}],[1599,{"text":"if exists $VarType{$name} and exists $VarType{$name}{'__main__'}"}],[1602,{"text":"if exists $VarType{$name} and exists $VarType{$name}{'__main__'}"}],[1595,{"text":"if (substr($ValPerl[$k], 0, 1) eq '<') { }"}],[1595,{"text":"elsif ($LocalSub{$name} or exists $VarType{$name} and exists $VarType{$name}{'__main__'}) { }"}],[1595,{"text":"elsif ($k + 1 <= $#ValClass and $ValClass[$k + 1] eq '(') { }"}],[1595,{"text":"elsif ($k + 1 <= $#ValClass and $ValClass[$k + 1] eq 'A') { }"}],[1614,{"text":"if $ValPerl[$m] =~ /^[a-z][a-z]$/"}],[1620,{"text":"if ($k == $m)"}],[1625,{"text":"if $result eq \"I\" or $result eq \"F\""}],[1628,{"text":"if ($colon > 0)"}],[1636,{"text":"if ($colon > 0)"}],[1634,{"text":"if ($ValPy[$m] eq \"if\")"}],[1611,{"text":"if ($ValClass[$m] eq '.') { }"}],[1611,{"text":"elsif ($ValClass[$m] eq '>') { }"}],[1611,{"text":"elsif ($ValClass[$m] =~ /0o/) { }"}],[1611,{"text":"elsif ($ValClass[$m] eq '+' or $ValClass[$m] eq '-' or $ValClass[$m] eq '*') { }"}],[1611,{"text":"elsif ($ValClass[$m] eq '?') { }"}],[1611,{"text":"elsif ($ValClass[$m] eq ':') { }"}],[1611,{"text":"elsif ($ValClass[$m] eq 'r') { }"}],[1652,{"text":"if $q < 0"}],[1655,{"text":"if $p > $#ValClass"}],[1657,{"text":"if $typ"}],[1647,{"text":"if (exists $VarType{$name} and exists $VarType{$name}{$CurSub} and index($VarType{$name}{$CurSub}, \" of \") > 0)"}],[1610,{"text":"if ($m != -1 and $m <= $e) { }"}],[1610,{"text":"elsif ($class eq 's' and $k + 1 <= $#ValClass and $ValClass[$k + 1] eq '(') { }"}],[1610,{"text":"elsif ($class eq 's' and $k + 2 <= $#ValClass and $ValClass[$k + 1] eq '~' and $ValClass[$k + 2] eq 'q' and capturing_pattern($ValPerl[$k + 2])) { }"}],[1610,{"text":"elsif ($class eq '\"' and $k + 2 <= $#ValClass and $ValClass[$k + 1] eq 'A') { }"}],[1610,{"text":"elsif ($class eq '\"') { }"}],[1671,{"text":"if ($m > 0 and $m + 1 < $#VarClass and $VarClass[$m + 1] eq \"=\")"}],[1684,{"text":"if $o < 0"}],[1686,{"text":"if $n < 0 or $ValPerl[$n] ne \"=>\""}],[1689,{"text":"if $ValClass[$o] eq \")\""}],[1697,{"text":"if $o < 0"}],[1700,{"text":"if $ValClass[$o] eq \")\""}],[1680,{"text":"if ($n != -1 and $ValPerl[$n] eq '=>') { }"}],[1677,{"text":"if ($m != -1) { }"}],[1494,{"text":"if ($class eq 'f') { }"}],[1494,{"text":"elsif ($k == $e) { }"}],[1494,{"text":"elsif ($k + 2 <= $e and $ValClass[$k + 1] eq '=') { }"}],[1494,{"text":"elsif ($class eq 'i') { }"}],[1494,{"text":"elsif ($class ne '(') { }"}],[1715,{"text":"if $main::debug >= 3"}],[1717,{"text":"if ($main::debug >= 3)"}],[1732,{"text":"if ($c eq \"\\\\\")"}],[1737,{"text":"if (substr($pat, $i + 1, 2) =~ /\\?[<']/) { }"}],[1737,{"text":"elsif (substr($pat, $i + 1, 1) ne '?') { }"}],[1736,{"text":"if ($c eq \"(\")"}],[1752,{"text":"if $t1 eq $t2"}],[1753,{"text":"if $t1 eq \"u\""}],[1754,{"text":"if $t2 eq \"u\""}],[1755,{"text":"if (index('IF', $t1) != -1 and index('IF', $t2) != -1) { }"}],[1755,{"text":"elsif ($t1 eq 'N' and index('IF', $t2) != -1) { }"}],[1755,{"text":"elsif ($t2 eq 'N' and index('IF', $t1) != -1) { }"}],[1755,{"text":"elsif ($t1 eq 's' and index('IFN', $t2) != -1) { }"}],[1755,{"text":"elsif ($t2 eq 's' and index('IFN', $t1) != -1) { }"}],[1768,{"text":"if ($lcp == 1) { }"}],[1767,{"text":"if ($lcp != 0)"}],[1787,{"text":"if (exists $PyFuncType{$pname}) { }"}],[1787,{"text":"elsif (exists $FuncType{$fname}) { }"}],[1801,{"text":"if $main::debug >= 5"}],[1811,{"text":"scalar @_ > 1 ? :"}],[1818,{"text":"if ($balance == 0)"}],[1814,{"text":"if ($s eq '(') { }"}],[1814,{"text":"elsif ($s eq ')') { }"}],[1833,{"text":"scalar @_ > 1 ? :"}],[1840,{"text":"if ($balance == 0)"}],[1836,{"text":"if ($s eq ')') { }"}],[1836,{"text":"elsif ($s eq '(') { }"}],[1857,{"text":"if $k < 0"}],[1869,{"text":"if $k < 0"}],[1881,{"text":"if (index($t, $ValClass[$k]) != -1)"}],[1896,{"text":"if ($s eq '(') { }"}],[1896,{"text":"elsif ($s eq ')') { }"}],[1902,{"text":"if $s eq $t and $balance < 0"}],[1901,{"text":"if ($t eq ')') { }"}],[1901,{"text":"elsif ($s eq $t and $balance <= 0) { }"}],[1901,{"text":"elsif ($t eq '(' and $s eq $t and $balance == 1) { }"}],[1908,{"text":"if $balance < 0"}],[1923,{"text":"if ($s eq '(') { }"}],[1923,{"text":"elsif ($s eq ')') { }"}],[1931,{"text":"if $balance < 0"}],[1930,{"text":"if ($s eq ')') { }"}],[1930,{"text":"elsif ($balance <= 0) { }"}],[1930,{"text":"elsif ($s eq '(' and $balance == 1) { }"}],[1929,{"text":"if ($p >= 0)"}],[1938,{"text":"if $balance < 0"}],[1949,{"text":"unless exists $token_precedence{$tok}"}],[1953,{"text":"if $token_precedence{$t} <= $prec"}],[1961,{"text":"if $pos < 0 or $pos > $#ValClass"}],[1968,{"text":"if ($ValPy[$pos] ne $scalar_ValPy)"}],[1963,{"text":"if ($ValClass[$pos] =~ /[ah]/ and substr($ValPy[$pos], 0, 4) ne 'len(') { }"}],[1963,{"text":"elsif ($ValClass[$pos] eq 'f' and exists $SPECIAL_FUNCTION_MAPPINGS{$ValPerl[$pos]}) { }"}],[1963,{"text":"elsif ($ValClass[$pos] eq '(' and $ValPerl[$pos] eq '(' and $pos + 2 <= $#ValClass and $ValClass[$pos + 1] eq ')' and $ValClass[$pos + 2] eq '=') { }"}],[1995,{"text":"if (exists $Perlscan::TokenType{$name})"}],[2005,{"text":"if (exists $Perlscan::TokenType{$name})"}],[1990,{"text":"if ($TokenStr =~ /ii/) { }"}],[1990,{"text":"elsif ($TokenStr =~ /iDi/) { }"}],[2017,{"text":"if ($j + 2 <= $#ValClass and $ValClass[$j + 1] eq \"=\" and $ValClass[$j + 2] =~ /[ahf]/)"}],[2011,{"text":"if ($TokenStr eq 's=a' or $TokenStr eq 's=h' or $TokenStr =~ /^s=f/ or $TokenStr =~ /^s=\\(\\)=/) { }"}],[2011,{"text":"elsif ($TokenStr eq 'ts=a' or $TokenStr eq 'ts=h' or $TokenStr =~ /^ts=f/ or $TokenStr =~ /^ts=\\(\\)=/) { }"}],[2011,{"text":"elsif ($#ValClass > 5 and $ValClass[1] eq '(' and $ValClass[0] eq 's') { }"}],[2029,{"text":"if ($j + 2 <= $#ValClass and $ValClass[$j + 1] eq \"=\" and $ValClass[$j + 2] =~ /[ahf]/)"}],[2023,{"text":"if ($TokenStr =~ /^[cC]\\(s=[ahf]/ or $TokenStr =~ /^[cC]\\(s=\\(\\)=/) { }"}],[2023,{"text":"elsif ($TokenStr =~ /^[cC]\\(f\\(s=[ahf]/ and $ValPerl[2] eq 'defined') { }"}],[2023,{"text":"elsif ($#ValClass > 7 and $ValClass[3] eq '(' and $ValClass[2] eq 's') { }"}],[2022,{"text":"if ($ValClass[0] eq \"c\" or $ValClass[0] eq \"C\")"}],[2043,{"text":"if $j == 0"}],[2049,{"text":"if $ValClass[$end_pos + 1] eq \",\""}],[2048,{"text":"if ($sub_or_function != -1 and $ValClass[$sub_or_function + 1] ne \"(\")"}],[2053,{"text":"if ($ValClass[$pos] =~ /[ahf]/)"}],[2056,{"text":"if $ValClass[$end_pos + 1] eq \")\""}],[2061,{"text":"if ($ValClass[0] =~ /[Cc]/)"}],[2060,{"text":"if ($ValClass[$end_pos + 1] eq \")\" and $found_comma)"}],[2044,{"text":"if ($ValClass[$j] =~ /[cC=]/ and $j + 1 <= $#ValClass and $ValClass[$j + 1] eq \"(\" and $ValPerl[$j + 1] eq \"(\")"}],[2037,{"text":"if ($ValClass[0] eq \"c\" and $ValPerl[0] =~ /if|while|until/ and $ValClass[1] ne \"a\" and ($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\") or $ValClass[0] eq \"C\" and $ValPerl[0] eq \"elsif\" and $ValClass[1] ne \"a\" and ($ValClass[1] eq \"(\" and $ValClass[2] ne \"a\") or $#ValClass > 1 and $ValClass[0] eq \"s\" and $ValClass[1] eq \"=\" or $#ValClass > 2 and $ValClass[0] eq \"t\" and $ValClass[1] eq \"s\" and $ValClass[2] eq \"=\" or $#ValClass > 3 and $ValClass[0] eq \"s\" and $ValClass[1] eq \"(\" and ($j = &main::end_of_variable(0) + 1) < $#ValClass and $ValClass[$j] eq \"=\")"}],[2085,{"text":"if ($ValClass[$j + 2] =~ /[ahf]/)"}],[2088,{"text":"if ($last_special_function != -1)"}],[2084,{"text":"if ($j + 2 <= $#ValClass and $ValClass[$j + 1] eq \"=\")"}],[2082,{"text":"if ($ValClass[$i] eq \"s\")"}],[2097,{"text":"if (not defined $fname and $main::debug >= 5)"}],[2103,{"text":"if defined $arg"}],[2104,{"text":"unless defined $next_arg_type"}],[2105,{"text":"if (defined $arg_type and $arg_type =~ /[sSIFN]/ and not $next_arg_type =~ /^[sSIFN]$/)"}],[2079,{"text":"if ($in_function_until != -1 and $i <= $in_function_until and $ValClass[$i] ne ',') { }"}],[2079,{"text":"elsif ($i > $in_function_until + 1) { }"}],[2112,{"text":"if ($i == 0) { }"}],[2112,{"text":"elsif ($last_special_function != -1 and $i == $last_special_function_end + 1) { }"}],[2112,{"text":"elsif ($i - 1 == 0 or $ValClass[$i - 2] ne 'f' and $ValClass[$i - 2] ne '\\\\') { }"}],[2128,{"text":"if ($close != -1)"}],[2126,{"text":"if ($ValClass[$i + 1] eq '(' and apply_scalar_context($i + 2) == 1) { }"}],[2126,{"text":"elsif (apply_scalar_context($i + 1) == 1) { }"}],[2148,{"text":"if $main::debug >= 5"}],[2149,{"text":"if ($j != -1 and $j > $in_function_until)"}],[2152,{"text":"if (exists $SPECIAL_FUNCTION_MAPPINGS{$ValPerl[$i]})"}],[2111,{"text":"if (index('+-*/.>', $ValClass[$i]) != -1) { }"}],[2111,{"text":"elsif ($ValClass[$i] eq 'f' and ($ValPerl[$i] eq 'scalar' and ($did_something & 2) != 2)) { }"}],[2111,{"text":"elsif ($ValClass[$i] eq 'f') { }"}],[2160,{"text":"if ($main::debug and $did_something)"}],[2170,{"text":"if $pos == $#ValClass"}],[2174,{"text":"if $e >= 0"}],[2171,{"text":"if ($ValClass[$pos + 1] eq \"(\" and $ValPerl[$pos + 1] eq \"(\")"}],[2178,{"text":"if (exists $PyFuncType{$ValPy[$pos]}) { }"}],[2178,{"text":"elsif (exists $FuncType{$ValPerl[$pos]}) { }"}],[2187,{"text":"if $k != -1"}],[2188,{"text":"unless defined $f_type"}],[2195,{"text":"if $ep > 0 and $ep < $end_pos"}],[2199,{"text":"if $ep > 0"}],[2202,{"text":"if $colon > 0"}],[2191,{"text":"if ($pos != 0 and $ValClass[$pos - 1] eq '(') { }"}],[2191,{"text":"elsif ($pos >= 2 and $ValClass[$pos - 1] eq '!' and $ValClass[$pos - 2] eq '(') { }"}],[2191,{"text":"elsif ($pos != 0 and $ValPerl[$pos - 1] eq '?') { }"}],[2206,{"text":"if ($ValPerl[$pos] eq 'grep' || $ValPerl[$pos] eq 'map' || $ValPerl[$pos] eq 'sort' and $ValPerl[$pos + 1] eq \"{\")"}],[2220,{"text":"if ($balance < 0)"}],[2216,{"text":"if ($ValClass[$j] eq '(') { }"}],[2216,{"text":"elsif ($ValClass[$j] eq ')') { }"}],[2226,{"text":"if ($ValClass[$j] eq 'f') { }"}],[2226,{"text":"elsif ($ValClass[$j] eq 's') { }"}],[2231,{"text":"if $comma != -1 and $ValClass[$comma] eq \",\""}],[2233,{"text":"$comma == -1 ? :"}],[2237,{"text":"if substr($f_type, $t_pos + 1, 1) eq \"?\""}],[2238,{"text":"if $t eq \"?\""}],[2241,{"text":"if $t eq \"?\""}],[2242,{"text":"if ($t ne \"a\")"}],[2239,{"text":"if ($t eq \":\")"}],[2250,{"text":"if $j + 1 == $comma"}],[2264,{"text":"$comma == -1 ? :"}],[2248,{"text":"if ($t eq 'H' and $ValClass[$j] =~ /[isf]/) { }"}],[2248,{"text":"elsif ($optional and $j == 0 || $ValClass[$j - 1] ne ',' and index('^*~/%.HI>&|0or?:=,A', $ValClass[$j]) != -1) { }"}],[2248,{"text":"elsif (not $optional and $comma != -1 and $ValClass[$comma] ne ',' and substr($f_type, $t_pos, 1) ne ':' and substr($f_type, $t_pos + 1, 1) ne '?') { }"}],[2272,{"text":"if ($balance < 0)"}],[2268,{"text":"if ($ValClass[$p] eq '(') { }"}],[2268,{"text":"elsif ($ValClass[$p] eq ')') { }"}],[2266,{"text":"if ($comma < 0 or $comma >= 0 and $ValClass[$comma] ne \",\")"}],[2284,{"text":"if $k > $end_pos"}],[2299,{"text":"if ($main::debug > 2 and $PassNo != PASS_0())"}],[2302,{"text":"unless (defined $line)"}],[2315,{"text":"unless (defined $line)"}],[2320,{"text":"if ($main::debug > 2 and $PassNo != PASS_0())"}],[2325,{"text":"if ($main::debug > 2 and $PassNo != PASS_0())"}],[2324,{"text":"if ($_[1])"}],[2330,{"text":"if ($main::debug > 2 and $PassNo != PASS_0())"}],[2333,{"text":"if ($PassNo == PASS_1())"}],[2354,{"text":"if (scalar @_ == 1 and length do {\n\tBEGIN {${^WARNING_BITS} = \"\\x55\\x55\\x55\\x51\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\\x55\"}\n\u000b$_[0] & \"\"\n})"}],[2367,{"text":"if $TraceIntactLine"}],[2358,{"text":"if ($flag == 1)"}],[2377,{"text":"if scalar @_ == 1 and $_[0] eq \"\""}],[2376,{"text":"if (scalar @_ == 1) { }"}],[2376,{"text":"elsif (scalar @_ == 2) { }"}],[2391,{"text":"if scalar @Perlscan::BufferValClass > 0"}],[2393,{"text":"if $PassNo != PASS_2()"}],[2397,{"text":"if $TraceIntactLine"}],[2394,{"text":"if ($flag == 0) { }"}],[2417,{"text":"if (scalar @special_buffer > 1)"}],[2426,{"text":"if ($PassNo == PASS_2() and &Softpano::get_verbosity() >= 1) { }"}],[2437,{"text":"if (not defined $line and $main::debug)"}],[2440,{"text":"unless defined $line"}],[2411,{"text":"if (scalar @buffer) { }"}],[2411,{"text":"elsif (scalar @special_buffer) { }"}],[2411,{"text":"elsif (defined $main::saved_eval_tokens) { }"}],[2445,{"text":"unless $IntactLine"}],[2447,{"text":"if ($IntactLine) { }"}],[2461,{"text":"if (substr($line, -1, 1) eq \"\\r\")"}],[2460,{"text":"if ($PassNo == PASS_0() || $PassNo == PASS_1() && !$pass_0_ran and $line =~ /#\\s*pragma\\s*pythonizer/)"}],[2469,{"text":"unless $IntactLine"}],[2471,{"text":"if ($IntactLine) { }"}],[2484,{"text":"if ($PassNo != PASS_2())"}],[2492,{"text":"unless open SYSDATA, \">\", \"$source_file.data\""}],[2512,{"text":"if (substr($line, 0, 4) eq \"=cut\")"}],[2529,{"text":"if ($line =~ /^$label:/)"}],[2444,{"text":"if (length $line == 0 or $line =~ /^\\s*$/) { }"}],[2444,{"text":"elsif ($line =~ /^\\s*(#.*$)/) { }"}],[2444,{"text":"elsif ($line =~ /^__DATA__/ or $line =~ /^__END__/) { }"}],[2444,{"text":"elsif (substr($line, 0, 1) eq '=' and substr($line, 1, 1) =~ /\\w/) { }"}],[2444,{"text":"elsif (substr($line, 0, 5) eq 'goto ') { }"}],[2539,{"text":"unless defined $line"}],[2541,{"text":"if (substr($line, -1, 1) eq \"\\r\")"}],[2554,{"text":"if ($IntactLine) { }"}],[2563,{"text":"if $IntactLine ne \"{\""}],[2562,{"text":"if ($IntactLine) { }"}],[2574,{"text":"if $il and $il ne $IntactLine"}],[2573,{"text":"if ($IntactLine) { }"}],[2561,{"text":"if ($line eq '^') { }"}],[2581,{"text":"if $TraceIntactLine"}],[2585,{"text":"if $TraceIntactLine"}],[2582,{"text":"if (scalar @output_buffer)"}],[2588,{"text":"if $TraceIntactLine"}],[2547,{"text":"if ($PassNo != PASS_2()) { }"}],[2547,{"text":"elsif ($IntactEndLno != $.) { }"}],[2600,{"text":"if $PassNo != PASS_2()"}],[2601,{"text":"scalar @_ == 0 ? :"}],[2602,{"text":"scalar @_ >= 2 ? :"}],[2604,{"text":"defined $main::TrStatus && $main::TrStatus < 0 ? :"}],[2618,{"text":"$tailcomment =~ /^\\s+(.*)$/ ? :"}],[2617,{"text":"if (scalar @_ < 3)"}],[2616,{"text":"if ($tailcomment)"}],[2624,{"text":"if ($main::TrStatus < 0) { }"}],[2623,{"text":"if ($len == 0)"}],[2636,{"text":"$line =~ /^\\s+(.*)$/ ? :"}],[2635,{"text":"if (scalar @_ < 3)"}],[2638,{"text":"if ($orig_tail_comment) { }"}],[2648,{"text":"if ($IntactLine =~ /^\\s+(.*)$/)"}],[2655,{"text":"if (index($IntactLine, \"\\n\") == -1) { }"}],[2653,{"text":"if (length $IntactLine > $zone_size) { }"}],[2678,{"text":"if (index($IntactLine, \"\\n\") == -1) { }"}],[2651,{"text":"if ($len > $start_of_comment_zone) { }"}],[2697,{"text":"if ($i == -1) { }"}],[2646,{"text":"if (scalar @_ == 1) { }"}],[2722,{"text":"if (length $IntactLine > $zone_size) { }"}],[2739,{"text":"if $main::debug >= 5"}],[2741,{"text":"if (scalar @_ == 0)"}],[2747,{"text":"if ($delta == 0 and scalar @_ == 1)"}],[2752,{"text":"if ($main::debug > 2)"}],[2757,{"text":"if ($main::debug > 2)"}],[2751,{"text":"if ($NextNest + $delta > $MAXNESTING) { }"}],[2751,{"text":"elsif ($NextNest + $delta < 0) { }"}],[2767,{"text":"if ($delta == 0 and $_[0] == 0)"}],[2771,{"text":"if ($delta + $CurNest > $MAXNESTING) { }"}],[2771,{"text":"elsif ($delta + $CurNest < 0) { }"}],[2765,{"text":"if (scalar @_ == 2)"}],[2789,{"text":"unless $visited->{$i}"}],[2802,{"text":"unless $visited{$node}"}],[2805,{"text":"wantarray ? :"}],[2827,{"text":"if $line =~ /^pass # LAST_HEADER/ and not $insertion_point"}],[2828,{"text":"unless $insertion_point"}],[2836,{"text":"if ($lines[$i - 1] =~ /^\\s*$/ or $lines[$i - 1] =~ /^\\s*#/ or $lines[$i - 1] =~ /^@/) { }"}],[2829,{"text":"if ($line =~ /^def ([A-Za-z0-9_]+)/ or $line =~ /^class ([A-Za-z0-9_]+)/) { }"}],[2829,{"text":"elsif ($line =~ /^\\s+def ((?:$ANONYMOUS_SUB)[A-Za-z0-9_]+)/) { }"}],[2829,{"text":"elsif ($line =~ /^_init_package\\(/ or $line =~ /^$PERLLIB\\.init_package\\(/) { }"}],[2854,{"text":"if $main::debug >= 3"}],[2863,{"text":"if $Line =~ /^pass # LAST_HEADER/ and not $insertion_point"}],[2867,{"text":"if not $line =~ /^def / || $line =~ /^class / and length $line >= 1 and not $line =~ /^\\s*#/ and not $line =~ /^\\s/ and not $multiline_string_sep"}],[2866,{"text":"if ($in_def)"}],[2870,{"text":"if ($line =~ /^def ([A-Za-z0-9_]+)/ or $line =~ /^class ([A-Za-z0-9_]+)/)"}],[2875,{"text":"if $line =~ /^def / or $line =~ /^class /"}],[2876,{"text":"if $line =~ /^\\s*#/"}],[2881,{"text":"if $line =~ /^\\s+def $f/"}],[2882,{"text":"if $line =~ /\\bself\\.$f/"}],[2887,{"text":"if $f ne $in_def"}],[2883,{"text":"if ($in_def)"}],[2889,{"text":"unless (defined $refs{$f})"}],[2896,{"text":"if $main::debug >= 3"}],[2897,{"text":"unless $insertion_point"}],[2905,{"text":"if $f eq \"_init_package\""}],[2907,{"text":"if (index($PYF_CALLS{'_init_package'}, $f) != -1)"}],[2906,{"text":"if (exists $PYF_CALLS{'_init_package'})"}],[2903,{"text":"if (exists $refs{'_init_package'})"}],[2913,{"text":"if ($main::debug >= 3)"}],[2920,{"text":"unless $dependencies{$_[0]}"}],[2925,{"text":"if not cleanup_imports(\\@lines) and $size == 0"}],[2928,{"text":"if $main::debug >= 3"}],[2932,{"text":"if (exists $refs{$n} and $refs{$n} < $defs{$n})"}],[2936,{"text":"if $main::debug >= 3"}],[2950,{"text":"if $main::debug >= 5"}],[2958,{"text":"if $cur_indent <= $source_indent and $moved_def"}],[2959,{"text":"if $lines[$i] =~ /^\\s*def /"}],[2944,{"text":"if (exists $nested_issues{$lno}) { }"}],[2944,{"text":"elsif (not exists $moved_lines{$lno}) { }"}],[2938,{"text":"if (%nested_issues)"}],[2979,{"text":"if $line eq \"^\""}],[2982,{"text":"if (not $main::import_perllib and $line =~ /^import / and $^O eq 'MSWin32' || $^O eq 'msys' and $line =~ /\\bfcntl/)"}],[2988,{"text":"if ($gen_try_fcntl)"}],[2980,{"text":"if ($lno < $insertion_point)"}],[2996,{"text":"if ($main::import_perllib)"}],[3004,{"text":"if $func eq \"__main__\""}],[3005,{"text":"unless exists $defs{$func}"}],[3007,{"text":"if $main::debug >= 5"}],[3014,{"text":"if (exists $moved_lines{$i + 1}) { }"}],[3021,{"text":"if (index($lines[$i], $multiline_string_sep) != -1)"}],[3030,{"text":"if $ndx < 0"}],[3031,{"text":"if $ndx < 0 or $comment_start >= 0 and $ndx > $comment_start"}],[3037,{"text":"if (substr($lines[$i], $j, 1) eq $quote and not &Perlscan::is_escaped($lines[$i], $j))"}],[3043,{"text":"unless $found_close"}],[3050,{"text":"if (index($lines[$i], $multiline_string_sep, $ndx + 3) != -1)"}],[3034,{"text":"if ($we3 ne '\"\"\"' and $we3 ne q[''']) { }"}],[3013,{"text":"if ($multiline_string_sep) { }"}],[3013,{"text":"elsif ($lines[$i] =~ /\"\"\"/ || $lines[$i] =~ /'''/ and not $lines[$i] =~ /^\\s*#/) { }"}],[3061,{"text":"if (exists $moved_lines{$i + 1})"}],[3065,{"text":"if $lines[$i] =~ /^@/ and $moved_def"}],[3066,{"text":"if $lines[$i] =~ /^def $func\\(/ or $lines[$i] =~ /^class ${func}[(:]/"}],[3055,{"text":"if ($lines[$i] =~ /^\\s+/ or $lines[$i] =~ /^def $func\\(/ or $lines[$i] =~ /^class ${func}[(:]/ or $lines[$i] =~ /^\\s*$/ or $lines[$i] =~ /^\\s*#/ or $lines[$i] =~ /^@/ or $lines[$i] =~ /^${func}_[\\w]+ =/ or $lines[$i] =~ /[.]$func = types[.]MethodType\\($func,/ or $lines[$i] =~ /[.]$func = $func$/) { }"}],[3075,{"text":"if $main::debug >= 5"}],[3077,{"text":"if ($func eq \"_init_package\")"}],[3085,{"text":"if exists $moved_lines{$lno}"}],[3088,{"text":"if (index($line, $multiline_string_sep) != -1)"}],[3092,{"text":"if $ndx < 0"}],[3095,{"text":"if (index($line, $multiline_string_sep, $ndx + 3) != -1)"}],[3086,{"text":"if ($multiline_string_sep) { }"}],[3086,{"text":"elsif ($line =~ /\"\"\"/ || $line =~ /'''/ and not $line =~ /^\\s*#/) { }"}],[3117,{"text":"if $this_is_blank"}],[3118,{"text":"if ($this_is_comment) { }"}],[3118,{"text":"elsif ($this_is_blank and $last_was_blank) { }"}],[3118,{"text":"elsif ($this_indent <= $last_indent and $line =~ /^\\s*pass$/ || $line =~ /^pass # LAST_HEADER$/) { }"}],[3118,{"text":"elsif ($this_indent < $last_indent and not $this_is_blank and not $line =~ /^\\s*except / and not $line =~ /^\\s*else:/ and not $line =~ /^\\s*elif /) { }"}],[3118,{"text":"elsif ($this_indent == 0 and not $this_is_blank and $line =~ /^def / and not $last_was_blank) { }"}],[3175,{"text":"if $line =~ /^\\s*$/"}],[3176,{"text":"if $line =~ /^\\s*#/"}],[3179,{"text":"if (not $import_as_lno and index($import_s, ' as ') > 0) { }"}],[3179,{"text":"elsif (not $import_lno) { }"}],[3200,{"text":"if ($line =~ /\\b$as_what\\./)"}],[3212,{"text":"if ($g eq $import_as_global)"}],[3216,{"text":"if ($line =~ /\\b$as_what\\./)"}],[3222,{"text":"if ($line =~ /\\b_str\\b/)"}],[3225,{"text":"if ($line =~ /\\bDie\\b/)"}],[3228,{"text":"if ($line =~ /\\b$loop_control\\b/)"}],[3231,{"text":"if ($line =~ /\\b$EVAL_RETURN_EXCEPTION\\b/)"}],[3177,{"text":"if ($line =~ /^import /) { }"}],[3177,{"text":"elsif ($line =~ /^class Die\\(/) { }"}],[3177,{"text":"elsif ($line =~ /^from $PERLLIB import Die$/) { }"}],[3177,{"text":"elsif ($line =~ /^class $loop_control\\(/) { }"}],[3177,{"text":"elsif ($line =~ /^class $EVAL_RETURN_EXCEPTION\\(/) { }"}],[3177,{"text":"elsif ($line =~ /^_str = lambda/) { }"}],[3177,{"text":"elsif (@gl = grep({$line =~ /^$_ = /;} @globals)) { }"}],[3177,{"text":"elsif ($import_lno) { }"}],[3236,{"text":"if $main::debug >= 5"}],[3239,{"text":"if ($size) { }"}],[3244,{"text":"if ($import_as_lno and not $import_as_referenced)"}],[3252,{"text":"if ($main::traceback)"}],[3247,{"text":"if ($die_import_lno and not $die_referenced) { }"}],[3247,{"text":"elsif ($die_def_lno and not $die_referenced) { }"}],[3258,{"text":"if ($_str_lno and not $_str_referenced)"}],[3261,{"text":"if ($loop_control_def_lno and not $loop_control_referenced)"}],[3265,{"text":"if ($eval_return_lno and not $eval_referenced)"}],[3270,{"text":"unless (exists $referenced_globals{$g})"}],[3237,{"text":"if ($import_lno)"}],[3282,{"text":"$^O eq 'MSWin32' ? :"}],[3315,{"text":"if $fstring"}],[3319,{"text":"if $fstring"}],[3312,{"text":"if (($ndx = index($line, $mstring_sep)) >= 0) { }"}],[3311,{"text":"if ($mstring_sep)"}],[3338,{"text":"unless $quote eq \"\\\"\" or $quote eq \"'\""}],[3339,{"text":"if ($p = index($line, \"#\")) >= 0 and $p < $ndx"}],[3340,{"text":"if substr($line, $ndx, 3) eq \"'''\""}],[3341,{"text":"if substr($line, $ndx, 3) eq \"\\\"\\\"\\\"\""}],[3346,{"text":"if $c eq \"f\""}],[3345,{"text":"if ($c eq 'f' or $c eq 'r') { }"}],[3355,{"text":"if (&Perlscan::is_escaped($line, $ndx2))"}],[3360,{"text":"if $fstring"}],[3354,{"text":"if ($ndx2 >= 0) { }"}],[3373,{"text":"if $ndx < 0"}],[3378,{"text":"if $c eq \"f\""}],[3377,{"text":"if ($c eq 'f' or $c eq 'r') { }"}],[3390,{"text":"if $fstring"}],[3395,{"text":"if $fstring"}],[3384,{"text":"if (($p = index($line, '#')) >= 0 and $p < $ndx) { }"}],[3384,{"text":"elsif (($ndx2 = index($line, $mstring_sep, $ndx + 3)) >= 0) { }"}],[3370,{"text":"if ($line =~ /\"\"\"/ || $line =~ /'''/ and not $line =~ /^\\s*#/)"}],[3323,{"text":"if ($mstring_sep) { }"}],[3323,{"text":"elsif ($line =~ /^\\s*#/) { }"}],[3401,{"text":"if (@fstring_items)"}],[3418,{"text":"if $pDot < 0"}],[3420,{"text":"unless exists $Packages{$packageName}"}],[3424,{"text":"if $type =~ /^[ahsmuHR]$/"}],[3425,{"text":"if ($type =~ /^[ahs]/) { }"}],[3430,{"text":"if $main::debug >= 5"}],[3442,{"text":"if ($suffix eq '') { }"}],[3440,{"text":"if (exists $anonymous_subs_used{$result}) { }"}],[3462,{"text":"if $split >= 0 and $pos > $split"}],[3465,{"text":"if $split >= 0"}],[3471,{"text":"if $st < 0"}],[3472,{"text":"if $st == $pos"}],[3476,{"text":"if $ValClass[1] ne \"(\""}],[3478,{"text":"if $limit < 0"}],[3481,{"text":"if $st < 0"}],[3482,{"text":"if $st == $pos"}]],"start":{"55":{"PASS_2":[{"condition":null,"statement":58,"pod":2,"branch":null,"subroutine":21,"time":null}]},"2355":{"BEGIN":[{"condition":null,"statement":44,"pod":null,"branch":null,"subroutine":15,"time":null},{"subroutine":16,"time":null,"statement":47,"condition":null,"branch":null,"pod":null}]},"30":{"BEGIN":[{"branch":null,"pod":null,"condition":null,"statement":20,"time":null,"subroutine":7}]},"1298":{"arg_from_pos":[{"subroutine":30,"time":null,"condition":161,"statement":763,"branch":287,"pod":11}]},"53":{"PASS_0":[{"time":null,"subroutine":19,"pod":null,"branch":null,"condition":null,"statement":56}]},"1852":{"next_matching_token":[{"statement":1097,"condition":226,"pod":21,"branch":456,"subroutine":41,"time":null}]},"24":{"BEGIN":[{"condition":null,"branch":null,"subroutine":1,"time":null,"statement":2,"pod":null}]},"1916":{"next_same_level_tokens":[{"subroutine":45,"time":null,"statement":1130,"condition":230,"pod":25,"branch":466}]},"1728":{"capturing_pattern":[{"pod":15,"statement":1037,"time":null,"subroutine":35,"branch":431,"condition":221}]},"35":{"BEGIN":[{"pod":null,"branch":null,"statement":35,"condition":null,"time":null,"subroutine":12}]},"1285":{"arg_type_from_pos":[{"branch":286,"pod":10,"statement":758,"condition":161,"time":null,"subroutine":29}]},"33":{"BEGIN":[{"condition":null,"statement":29,"branch":null,"pod":null,"subroutine":10,"time":null}]},"1404":{"merge_types":[{"statement":828,"condition":170,"branch":318,"pod":13,"subroutine":32,"time":null}]},"2798":{"toposort":[{"time":null,"subroutine":57,"pod":36,"branch":648,"condition":336,"statement":1638}]},"1987":{"fix_scalar_context":[{"subroutine":48,"time":null,"condition":238,"statement":1170,"branch":481,"pod":28}]},"1288":{"BEGIN":[{"statement":41,"condition":null,"branch":null,"pod":null,"subroutine":14,"time":null}]},"679":{"BEGIN":[{"condition":null,"statement":38,"branch":null,"pod":null,"subroutine":13,"time":null}]},"3282":{"pretty_print_python":[{"pod":40,"statement":1965,"branch":752,"condition":391,"time":null,"subroutine":62}]},"2430":{"BEGIN":[{"statement":50,"pod":null,"condition":null,"branch":null,"subroutine":17,"time":null}]},"1778":{"lcp":[{"pod":17,"statement":1065,"time":null,"subroutine":37,"branch":445,"condition":226}]},"28":{"BEGIN":[{"time":null,"subroutine":5,"pod":null,"branch":null,"statement":14,"condition":null}]},"1479":{"_expr_type":[{"statement":874,"pod":14,"subroutine":33,"time":null,"condition":179,"branch":341}]},"1960":{"apply_scalar_context":[{"statement":1156,"pod":27,"subroutine":47,"time":null,"condition":231,"branch":476}]},"1783":{"func_type":[{"subroutine":38,"time":null,"statement":1066,"condition":226,"pod":18,"branch":445}]},"2920":{"__ANON__":[{"time":null,"subroutine":59,"branch":716,"condition":374,"pod":38,"statement":1850}]},"2784":{"toposort_util":[{"time":null,"subroutine":56,"pod":35,"branch":647,"statement":1631,"condition":336}]},"2814":{"BEGIN":[{"time":null,"subroutine":18,"branch":null,"pod":null,"condition":null,"statement":53}]},"2720":{"print_intactline":[{"subroutine":54,"time":null,"condition":334,"statement":1601,"branch":635,"pod":33}]},"1946":{"next_lower_or_equal_precedent_token":[{"time":null,"subroutine":46,"branch":474,"pod":26,"statement":1147,"condition":231}]},"886":{"check_ref":[{"pod":6,"branch":180,"statement":563,"condition":92,"time":null,"subroutine":25}]},"3105":{"pep8":[{"statement":1850,"condition":374,"pod":38,"branch":716,"subroutine":60,"time":null}]},"1864":{"last_matching_token":[{"branch":457,"pod":22,"condition":226,"statement":1103,"time":null,"subroutine":42}]},"1832":{"reverse_matching_br":[{"subroutine":40,"time":null,"condition":226,"statement":1087,"pod":20,"branch":452}]},"1810":{"matching_br":[{"time":null,"subroutine":39,"branch":448,"pod":19,"condition":226,"statement":1077}]},"1889":{"next_same_level_token":[{"statement":1115,"condition":226,"branch":459,"pod":24,"subroutine":44,"time":null}]},"27":{"BEGIN":[{"subroutine":4,"time":null,"statement":11,"condition":null,"pod":null,"branch":null}]},"2393":{"__ANON__":[{"time":null,"subroutine":52,"pod":32,"branch":616,"statement":1528,"condition":332}]},"-1":{"__COVER__":[{"subroutine":68,"time":null,"statement":2082,"condition":399,"branch":792,"pod":46}]},"1201":{"in_sub_call":[{"branch":278,"condition":158,"time":null,"subroutine":28,"pod":9,"statement":742}]},"2810":{"move_defs_before_refs":[{"pod":37,"statement":1646,"time":null,"subroutine":58,"branch":650,"condition":336}]},"2295":{"get_here":[{"statement":1358,"condition":314,"pod":30,"branch":562,"subroutine":50,"time":null}]},"1876":{"next_matching_tokens":[{"subroutine":43,"time":null,"statement":1109,"condition":226,"branch":458,"pod":23}]},"1100":{"is_referenced":[{"subroutine":26,"time":null,"condition":152,"branch":251,"statement":681,"pod":7}]},"1114":{"scalar_reference_type":[{"condition":153,"statement":688,"branch":253,"pod":8,"subroutine":27,"time":null}]},"31":{"BEGIN":[{"condition":null,"statement":23,"pod":null,"branch":null,"subroutine":8,"time":null}]},"3439":{"new_anonymous_sub":[{"time":null,"subroutine":66,"branch":782,"condition":398,"pod":44,"statement":2052}]},"29":{"BEGIN":[{"subroutine":6,"time":null,"statement":17,"condition":null,"pod":null,"branch":null}]},"1713":{"expr_type":[{"time":null,"subroutine":34,"pod":14,"branch":429,"statement":1028,"condition":221}]},"3414":{"trash_global_types":[{"subroutine":65,"time":null,"condition":398,"statement":2036,"branch":777,"pod":43}]},"54":{"PASS_1":[{"time":null,"subroutine":20,"branch":null,"pod":1,"condition":null,"statement":57}]},"2600":{"output_line":[{"branch":616,"pod":32,"statement":1528,"condition":332,"time":null,"subroutine":53}]},"3144":{"cleanup_imports":[{"statement":1870,"pod":39,"condition":384,"branch":722,"subroutine":61,"time":null}]},"2739":{"correct_nest":[{"condition":334,"statement":1607,"pod":34,"branch":636,"subroutine":55,"time":null}]},"25":{"BEGIN":[{"branch":null,"pod":null,"statement":5,"condition":null,"time":null,"subroutine":2}]},"3459":{"being_declared_here":[{"pod":45,"branch":784,"statement":2062,"condition":398,"time":null,"subroutine":67}]},"346":{"get_globals":[{"condition":7,"statement":210,"pod":4,"branch":57,"subroutine":23,"time":null}]},"23":{"BEGIN":[{"time":null,"subroutine":null,"branch":null,"pod":null,"condition":null,"statement":null}]},"3305":{"eat_strings":[{"condition":391,"statement":1974,"pod":42,"branch":753,"subroutine":64,"time":null}]},"856":{"init_val":[{"statement":545,"condition":91,"pod":5,"branch":171,"subroutine":24,"time":null}]},"1749":{"common_type":[{"subroutine":36,"time":null,"statement":1048,"condition":221,"pod":16,"branch":435}]},"34":{"BEGIN":[{"condition":null,"statement":32,"pod":null,"branch":null,"subroutine":11,"time":null}]},"1354":{"arg_type":[{"subroutine":31,"time":null,"condition":168,"statement":796,"branch":304,"pod":12}]},"26":{"BEGIN":[{"statement":8,"condition":null,"pod":null,"branch":null,"subroutine":3,"time":null}]},"80":{"prolog":[{"statement":59,"pod":3,"condition":null,"branch":null,"subroutine":22,"time":null}]},"2168":{"end_of_function":[{"subroutine":49,"time":null,"condition":295,"statement":1279,"pod":29,"branch":526}]},"2348":{"getline":[{"time":null,"subroutine":51,"branch":570,"pod":31,"condition":322,"statement":1387}]},"32":{"BEGIN":[{"time":null,"subroutine":9,"branch":null,"pod":null,"condition":null,"statement":26}]},"3289":{"get_fstring_items":[{"time":null,"subroutine":63,"branch":753,"condition":391,"pod":41,"statement":1967}]}},"subroutine":[[23,"BEGIN"],[24,"BEGIN"],[25,"BEGIN"],[26,"BEGIN"],[27,"BEGIN"],[28,"BEGIN"],[29,"BEGIN"],[30,"BEGIN"],[31,"BEGIN"],[32,"BEGIN"],[33,"BEGIN"],[34,"BEGIN"],[35,"BEGIN"],[679,"BEGIN"],[1288,"BEGIN"],[2355,"BEGIN"],[2355,"BEGIN"],[2430,"BEGIN"],[2814,"BEGIN"],[53,"PASS_0"],[54,"PASS_1"],[55,"PASS_2"],[80,"prolog"],[346,"get_globals"],[856,"init_val"],[886,"check_ref"],[1100,"is_referenced"],[1114,"scalar_reference_type"],[1201,"in_sub_call"],[1285,"arg_type_from_pos"],[1298,"arg_from_pos"],[1354,"arg_type"],[1404,"merge_types"],[1479,"_expr_type"],[1713,"expr_type"],[1728,"capturing_pattern"],[1749,"common_type"],[1778,"lcp"],[1783,"func_type"],[1810,"matching_br"],[1832,"reverse_matching_br"],[1852,"next_matching_token"],[1864,"last_matching_token"],[1876,"next_matching_tokens"],[1889,"next_same_level_token"],[1916,"next_same_level_tokens"],[1946,"next_lower_or_equal_precedent_token"],[1960,"apply_scalar_context"],[1987,"fix_scalar_context"],[2168,"end_of_function"],[2295,"get_here"],[2348,"getline"],[2393,"__ANON__"],[2600,"output_line"],[2720,"print_intactline"],[2739,"correct_nest"],[2784,"toposort_util"],[2798,"toposort"],[2810,"move_defs_before_refs"],[2920,"__ANON__"],[3105,"pep8"],[3144,"cleanup_imports"],[3282,"pretty_print_python"],[3289,"get_fstring_items"],[3305,"eat_strings"],[3414,"trash_global_types"],[3439,"new_anonymous_sub"],[3459,"being_declared_here"]],"statement":[23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,679,679,679,1288,1288,1288,2355,2355,2355,2355,2355,2355,2430,2430,2430,2814,2814,2814,53,54,55,80,81,82,83,84,86,88,92,93,97,98,100,102,103,105,106,109,110,111,115,116,117,118,120,121,122,124,125,128,129,130,131,133,134,135,137,138,141,142,143,144,146,147,150,151,152,153,154,157,162,163,164,166,168,169,171,172,172,173,174,178,179,180,182,186,187,189,190,192,193,195,196,197,199,200,202,203,205,206,208,209,211,212,214,215,217,218,220,221,223,224,226,227,229,230,232,233,239,240,241,242,244,245,246,247,249,250,251,252,253,255,256,262,263,266,267,269,271,272,274,275,276,277,278,279,280,282,283,284,285,287,288,289,294,295,297,298,299,301,302,304,305,306,307,310,311,312,313,314,315,316,346,348,350,351,352,353,354,355,357,358,359,360,361,362,363,366,367,368,369,370,371,372,373,374,375,377,379,380,381,382,384,385,386,387,389,390,391,392,393,395,399,400,401,402,405,406,408,409,410,411,413,417,419,420,421,422,426,427,428,429,430,431,432,435,436,437,438,439,440,441,444,450,451,453,454,455,456,457,458,459,460,462,464,465,466,468,470,471,474,475,477,478,479,480,481,482,483,484,487,488,489,490,494,497,498,500,501,502,503,504,508,509,510,514,517,521,522,526,527,528,529,530,531,532,534,539,540,542,544,545,546,548,550,552,556,557,558,560,561,562,563,564,566,570,571,573,574,575,576,578,579,584,585,586,587,589,590,592,592,596,597,600,602,603,604,605,606,607,608,609,611,612,613,615,617,618,619,620,621,623,626,627,628,629,631,632,634,635,636,637,638,639,640,642,643,644,645,646,648,649,662,664,665,666,667,668,669,670,671,673,674,675,676,677,678,680,680,680,684,685,686,687,689,694,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,758,759,761,762,762,766,767,767,768,769,771,775,776,778,778,779,780,781,782,783,787,788,789,791,792,794,796,797,798,801,802,804,805,806,807,809,811,817,818,818,820,821,822,823,825,826,827,828,829,830,831,832,838,839,840,841,843,844,845,846,848,849,851,856,858,860,861,862,863,864,865,866,867,868,870,873,874,875,876,878,881,886,887,889,890,891,892,893,894,895,899,901,902,903,904,905,906,908,914,915,916,917,919,921,923,929,934,936,937,938,939,940,941,946,949,950,951,952,953,954,955,956,957,959,962,963,964,966,969,970,971,973,974,976,977,980,981,985,986,988,990,991,992,993,995,997,1001,1002,1003,1004,1005,1009,1010,1014,1017,1018,1019,1021,1022,1023,1024,1025,1026,1028,1029,1030,1031,1032,1033,1035,1037,1038,1039,1040,1042,1043,1044,1046,1049,1052,1054,1057,1059,1060,1062,1065,1066,1067,1068,1069,1071,1073,1074,1076,1078,1079,1080,1091,1092,1100,1101,1102,1104,1105,1106,1109,1114,1116,1117,1118,1119,1123,1124,1125,1127,1132,1133,1134,1136,1137,1138,1139,1140,1141,1145,1146,1148,1149,1150,1151,1152,1153,1155,1156,1159,1160,1161,1163,1164,1166,1170,1171,1172,1173,1174,1175,1177,1178,1179,1180,1181,1183,1184,1185,1187,1188,1190,1191,1193,1195,1201,1203,1205,1206,1207,1208,1209,1210,1211,1213,1215,1217,1218,1219,1221,1224,1285,1286,1287,1289,1291,1298,1299,1301,1303,1304,1305,1306,1307,1311,1313,1314,1320,1321,1322,1323,1324,1325,1326,1327,1331,1332,1334,1335,1336,1337,1338,1339,1340,1342,1343,1346,1347,1349,1354,1355,1356,1357,1358,1360,1361,1362,1363,1365,1367,1368,1369,1370,1372,1373,1374,1375,1376,1377,1379,1381,1382,1383,1384,1386,1387,1388,1389,1391,1397,1399,1404,1405,1406,1408,1409,1412,1413,1415,1416,1418,1419,1421,1422,1423,1425,1426,1428,1429,1431,1432,1433,1435,1436,1438,1439,1440,1441,1442,1443,1444,1445,1447,1449,1450,1451,1454,1455,1457,1459,1461,1463,1465,1467,1469,1471,1473,1479,1480,1481,1483,1484,1485,1487,1488,1489,1490,1494,1495,1496,1497,1498,1499,1501,1503,1506,1507,1510,1511,1514,1515,1516,1517,1518,1522,1524,1525,1526,1528,1530,1531,1532,1533,1534,1535,1536,1537,1538,1540,1542,1543,1544,1545,1547,1548,1549,1550,1551,1552,1553,1554,1556,1558,1559,1560,1561,1562,1563,1564,1565,1567,1569,1571,1572,1573,1575,1576,1577,1578,1580,1581,1583,1585,1588,1590,1592,1594,1595,1596,1597,1599,1600,1602,1603,1605,1607,1609,1610,1611,1612,1614,1615,1617,1620,1621,1623,1625,1627,1628,1629,1634,1635,1636,1637,1642,1644,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1657,1661,1663,1665,1667,1670,1671,1672,1674,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1692,1694,1695,1696,1697,1698,1699,1700,1701,1704,1706,1713,1714,1715,1716,1717,1718,1719,1721,1722,1728,1730,1731,1732,1733,1734,1736,1737,1738,1740,1744,1749,1750,1752,1753,1754,1755,1756,1758,1760,1762,1764,1766,1767,1768,1769,1771,1774,1778,1783,1784,1786,1787,1788,1790,1792,1793,1795,1801,1802,1810,1811,1812,1813,1814,1815,1817,1818,1819,1824,1832,1833,1834,1835,1836,1837,1839,1840,1841,1846,1852,1853,1854,1856,1857,1858,1864,1865,1866,1868,1869,1870,1876,1877,1878,1880,1881,1883,1889,1890,1891,1892,1894,1895,1896,1897,1899,1901,1902,1904,1906,1908,1910,1916,1917,1918,1919,1921,1922,1923,1924,1926,1928,1929,1930,1931,1933,1935,1938,1940,1946,1947,1948,1949,1950,1951,1952,1953,1955,1960,1961,1963,1964,1965,1967,1968,1969,1970,1976,1977,1978,1979,1981,1987,1988,1990,1993,1994,1995,1996,1997,1998,2003,2004,2005,2006,2007,2008,2011,2012,2014,2016,2017,2018,2022,2023,2024,2026,2028,2029,2030,2036,2037,2043,2044,2045,2046,2047,2048,2049,2051,2052,2053,2054,2056,2057,2058,2060,2061,2062,2063,2064,2065,2067,2068,2069,2070,2075,2076,2077,2078,2079,2082,2083,2084,2085,2086,2088,2089,2090,2096,2097,2098,2100,2102,2103,2104,2105,2106,2109,2111,2112,2115,2116,2117,2119,2121,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2138,2139,2140,2141,2142,2143,2147,2148,2149,2150,2152,2153,2154,2160,2161,2168,2170,2171,2173,2174,2175,2177,2178,2179,2181,2183,2184,2185,2186,2187,2188,2191,2192,2195,2196,2198,2199,2201,2202,2204,2205,2206,2208,2209,2210,2211,2213,2215,2216,2217,2219,2220,2221,2222,2225,2226,2227,2229,2231,2233,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2247,2248,2249,2250,2251,2256,2257,2263,2264,2266,2267,2268,2269,2271,2272,2273,2274,2278,2279,2281,2283,2284,2285,2286,2295,2297,2298,2299,2300,2302,2303,2304,2306,2307,2308,2309,2312,2314,2315,2316,2317,2319,2320,2321,2324,2325,2326,2328,2330,2331,2333,2334,2337,2348,2351,2352,2353,2354,2355,2356,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2368,2370,2371,2372,2373,2376,2377,2379,2385,2387,2389,2391,2405,2393,2394,2395,2396,2397,2398,2401,2403,2407,2411,2412,2415,2417,2418,2423,2424,2426,2428,2432,2437,2438,2440,2443,2444,2445,2446,2447,2448,2450,2452,2454,2455,2456,2459,2460,2461,2462,2464,2465,2466,2467,2469,2470,2471,2472,2474,2476,2478,2479,2480,2484,2486,2489,2492,2493,2495,2496,2498,2499,2504,2505,2507,2509,2510,2511,2512,2514,2515,2516,2520,2522,2523,2524,2525,2527,2528,2529,2531,2532,2533,2536,2539,2541,2542,2547,2548,2553,2554,2555,2557,2559,2561,2562,2563,2565,2566,2570,2571,2572,2573,2574,2576,2577,2580,2581,2582,2583,2585,2588,2590,2600,2601,2602,2603,2604,2605,2606,2608,2609,2611,2612,2613,2615,2616,2617,2618,2620,2623,2624,2627,2628,2630,2631,2633,2635,2636,2638,2639,2641,2643,2644,2645,2646,2648,2649,2651,2653,2654,2655,2656,2657,2660,2661,2664,2665,2666,2668,2671,2673,2677,2678,2679,2681,2683,2684,2687,2688,2689,2691,2696,2697,2698,2699,2700,2701,2703,2704,2705,2706,2708,2709,2710,2712,2720,2721,2722,2723,2724,2726,2739,2740,2741,2743,2744,2746,2747,2748,2749,2751,2752,2753,2757,2758,2762,2765,2766,2767,2768,2769,2771,2772,2774,2776,2784,2786,2787,2788,2789,2791,2791,2798,2799,2800,2801,2801,2802,2804,2805,2810,2811,2813,2815,2816,2818,2819,2820,2821,2822,2823,2824,2825,2827,2828,2829,2830,2831,2832,2833,2834,2836,2839,2840,2843,2845,2846,2847,2849,2853,2854,2854,2855,2856,2857,2858,2859,2860,2861,2863,2865,2866,2867,2870,2871,2875,2876,2878,2878,2880,2881,2882,2883,2885,2887,2887,2889,2890,2892,2892,2896,2896,2897,2903,2904,2905,2906,2907,2909,2909,2913,2914,2915,2916,2917,2920,2920,2920,2921,2922,2924,2925,2928,2930,2931,2932,2933,2936,2936,2938,2939,2940,2941,2942,2943,2944,2947,2948,2949,2950,2951,2952,2953,2954,2955,2956,2957,2958,2959,2960,2961,2963,2965,2968,2973,2974,2975,2976,2977,2978,2979,2980,2981,2982,2983,2984,2985,2987,2988,2989,2990,2991,2992,2995,2996,2997,2998,2999,3001,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3019,3015,3016,3017,3021,3022,3025,3026,3027,3028,3029,3030,3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,3043,3048,3050,3051,3055,3061,3062,3063,3065,3066,3067,3069,3070,3072,3075,3077,3078,3079,3080,3084,3085,3086,3087,3088,3089,3091,3092,3093,3095,3097,3099,3105,3106,3108,3109,3112,3113,3114,3115,3117,3118,3119,3120,3121,3123,3125,3129,3131,3133,3134,3136,3144,3146,3147,3148,3149,3150,3151,3152,3153,3154,3155,3156,3157,3158,3159,3160,3161,3162,3163,3164,3165,3166,3167,3172,3173,3174,3175,3176,3177,3178,3179,3180,3181,3183,3184,3188,3190,3192,3194,3196,3197,3198,3199,3200,3201,3204,3204,3205,3207,3209,3209,3210,3211,3212,3213,3216,3217,3222,3223,3225,3226,3228,3229,3231,3232,3236,3236,3237,3238,3239,3240,3242,3244,3245,3247,3248,3250,3251,3252,3253,3254,3255,3258,3259,3261,3262,3263,3265,3266,3267,3269,3270,3271,3274,3276,3282,3283,3289,3291,3292,3293,3294,3295,3297,3305,3306,3307,3308,3310,3311,3312,3314,3315,3316,3317,3319,3320,3323,3328,3330,3334,3335,3338,3339,3340,3341,3342,3343,3344,3345,3346,3347,3349,3352,3353,3354,3355,3356,3357,3360,3361,3362,3363,3365,3370,3371,3372,3373,3374,3375,3376,3377,3378,3379,3381,3384,3385,3388,3390,3391,3395,3396,3400,3401,3402,3405,3414,3416,3417,3418,3419,3420,3421,3421,3422,3423,3424,3425,3426,3428,3430,3431,3439,3440,3441,3442,3443,3445,3447,3448,3450,3452,3459,3460,3462,3463,3464,3465,3469,3470,3471,3472,3473,3476,3477,3478,3479,3480,3481,3482,3483,3485],"file":"C:/pythonizer/pythonizer/Pythonizer.pm","pod":[[53,"PASS_0"],[54,"PASS_1"],[55,"PASS_2"],[80,"prolog"],[346,"get_globals"],[856,"init_val"],[886,"check_ref"],[1100,"is_referenced"],[1114,"scalar_reference_type"],[1201,"in_sub_call"],[1285,"arg_type_from_pos"],[1298,"arg_from_pos"],[1354,"arg_type"],[1404,"merge_types"],[1713,"expr_type"],[1728,"capturing_pattern"],[1749,"common_type"],[1778,"lcp"],[1783,"func_type"],[1810,"matching_br"],[1832,"reverse_matching_br"],[1852,"next_matching_token"],[1864,"last_matching_token"],[1876,"next_matching_tokens"],[1889,"next_same_level_token"],[1916,"next_same_level_tokens"],[1946,"next_lower_or_equal_precedent_token"],[1960,"apply_scalar_context"],[1987,"fix_scalar_context"],[2168,"end_of_function"],[2295,"get_here"],[2348,"getline"],[2600,"output_line"],[2720,"print_intactline"],[2739,"correct_nest"],[2784,"toposort_util"],[2798,"toposort"],[2810,"move_defs_before_refs"],[3105,"pep8"],[3144,"cleanup_imports"],[3282,"pretty_print_python"],[3289,"get_fstring_items"],[3305,"eat_strings"],[3414,"trash_global_types"],[3439,"new_anonymous_sub"],[3459,"being_declared_here"]],"digest":"d19738bc6b22f4fe4448f5c96806ec4a"}