# Generated by chatGPT
# Test 'use parent' without -norequire
use strict;
use warnings;
use lib '.';
#use My::BaseClass;
#use My::Mixin;

# Test 1: Check that use parent correctly updates @ISA
{
    package My::Class1;
    use parent 'My::BaseClass';
    use Carp::Assert;
    assert(My::Class1->isa('My::BaseClass'));
}

# Test 2: Check that use parent correctly handles multiple parent classes
{
    package My::Class2;
    use parent qw( My::BaseClass My::Mixin );
    use Carp::Assert;
    assert(My::Class2->isa('My::BaseClass'));
    assert(My::Class2->isa('My::Mixin'));
}

# Test 3: Check that use parent correctly handles inheritance hierarchy
{
    package My::Class3;
    use parent 'My::BaseClass';
    package My::Subclass3;
    use parent -norequire, 'My::Class3';
    use Carp::Assert;
    assert(My::Subclass3->isa('My::Class3'));
    assert(My::Subclass3->isa('My::BaseClass'));
}

# Test 4: Check that use parent correctly handles multiple inheritance
{
    package My::Class4;
    use parent qw( My::BaseClass My::Mixin );
    package My::Subclass4;
    use parent -norequire, 'My::Class4';
    use Carp::Assert;
    assert(My::Subclass4->isa('My::Class4'));
    assert(My::Subclass4->isa('My::BaseClass'));
    assert(My::Subclass4->isa('My::Mixin'));
}

# Test 5: Check that use parent correctly handles inheritance of methods
{
    package My::Class5;
    use parent 'My::BaseClass';
    package My::Subclass5;
    use parent -norequire, 'My::Class5';
    my $obj = My::Subclass5->new;
    use Carp::Assert;
    assert($obj->foo eq 'foo', 'Inherited method correctly');
}

# Test 6: Check that use parent correctly handles inheritance of attributes
{
    package My::Class6;
    use parent 'My::BaseClass';
    package My::Subclass6;
    use parent -norequire => 'My::Class6';
    my $obj = My::Subclass6->new;
    use Carp::Assert;
    assert($obj->attribute eq 'value', 'Inherited attribute correctly');
}
print "$0 - test passed!\n";
