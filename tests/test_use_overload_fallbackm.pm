package test_use_overload_fallbackm;
use overload '""' => \&as_string, 'cmp' => \&compare, 'fallback' => 1;

# fallback
# The value assigned to the key 'fallback' tells Perl how hard it should try to find an alternative way to implement a missing operator.

# defined, but FALSE

# use overload "fallback" => 0, # ... ;
# This disables "Magic Autogeneration".

# undef

# In the default case where no value is explicitly assigned to fallback, magic autogeneration is enabled.

# TRUE

# The same as for undef, but if a missing operator cannot be autogenerated then, instead of issuing an error message, Perl is allowed to revert to what it would have done for that operator if there had been no use overload directive.

sub new {
    my ($class, $value) = @_;
    my $self = {};
    bless $self, $class;
    $self->value($value);
    return $self;
}

sub value {
    my ($self, $value) = @_;
    if(defined $value) {
        $self->{value} = $value;
    }
    return $self->{value};
}

sub as_string {
    my $self = shift;

    return "" . $self->value;
}

sub compare {
    my ($self, $other) = @_;
    return "$self" cmp "$other";
}
1;
